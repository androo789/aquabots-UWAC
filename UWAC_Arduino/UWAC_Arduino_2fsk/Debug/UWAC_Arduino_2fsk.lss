
UWAC_Arduino_2fsk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019a  00800100  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  0080029a  0080029a  000010a0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000088  00000000  00000000  0000113c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a56  00000000  00000000  000011c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000507  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000436  00000000  00000000  00002121  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f4  00000000  00000000  00002558  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000332  00000000  00000000  0000274c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae4  00000000  00000000  00002a7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003562  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 e7       	ldi	r30, 0x72	; 114
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 39       	cpi	r26, 0x9A	; 154
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e9       	ldi	r26, 0x9A	; 154
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 3a       	cpi	r26, 0xA4	; 164
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 5d 03 	call	0x6ba	; 0x6ba <main>
  9e:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CRC>:
 * @param received Is the data received or not
 *
 * @return The generated checksum
*/
int CRC(uint8_t data[100], int length, uint16_t poly, bool received)
{
  a6:	2f 92       	push	r2
  a8:	3f 92       	push	r3
  aa:	4f 92       	push	r4
  ac:	5f 92       	push	r5
  ae:	6f 92       	push	r6
  b0:	7f 92       	push	r7
  b2:	8f 92       	push	r8
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	60 97       	sbiw	r28, 0x10	; 16
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	3c 01       	movw	r6, r24
  dc:	8b 01       	movw	r16, r22
  de:	2a 01       	movw	r4, r20
  e0:	f2 2e       	mov	r15, r18
    #ifdef DEBUG // Debugging
    printf("Length: %i\n", length);
  e2:	1f 93       	push	r17
  e4:	6f 93       	push	r22
  e6:	84 eb       	ldi	r24, 0xB4	; 180
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	9f 93       	push	r25
  ec:	8f 93       	push	r24
  ee:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	10 16       	cp	r1, r16
  fc:	11 06       	cpc	r1, r17
  fe:	0c f0       	brlt	.+2      	; 0x102 <CRC+0x5c>
 100:	ca c0       	rjmp	.+404    	; 0x296 <CRC+0x1f0>
 102:	43 01       	movw	r8, r6
 104:	60 0e       	add	r6, r16
 106:	71 1e       	adc	r7, r17
 108:	21 2c       	mov	r2, r1
 10a:	31 2c       	mov	r3, r1
    {
        #ifdef DEBUG // Debugging
        printf("Data: %i, ", (uint8_t)data[i]);
 10c:	00 e8       	ldi	r16, 0x80	; 128
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	54 01       	movw	r10, r8
 112:	d4 01       	movw	r26, r8
 114:	8d 91       	ld	r24, X+
 116:	4d 01       	movw	r8, r26
 118:	1f 92       	push	r1
 11a:	8f 93       	push	r24
 11c:	1f 93       	push	r17
 11e:	0f 93       	push	r16
 120:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
        #endif // DEBUG

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
 124:	32 2c       	mov	r3, r2
 126:	22 24       	eor	r2, r2
 128:	f5 01       	movw	r30, r10
 12a:	80 81       	ld	r24, Z
 12c:	28 2a       	or	r2, r24
    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	86 14       	cp	r8, r6
 138:	97 04       	cpc	r9, r7
 13a:	51 f7       	brne	.-44     	; 0x110 <CRC+0x6a>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
 13c:	3f 92       	push	r3
 13e:	2f 92       	push	r2
 140:	8b e8       	ldi	r24, 0x8B	; 139
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	f1 10       	cpse	r15, r1
 156:	02 c0       	rjmp	.+4      	; 0x15c <CRC+0xb6>
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
 158:	32 2c       	mov	r3, r2
 15a:	22 24       	eor	r2, r2
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 15c:	92 01       	movw	r18, r4
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	cb 01       	movw	r24, r22
 168:	49 86       	std	Y+9, r4	; 0x09
 16a:	3a 87       	std	Y+10, r19	; 0x0a
 16c:	4b 87       	std	Y+11, r20	; 0x0b
 16e:	5c 87       	std	Y+12, r21	; 0x0c
 170:	6d 87       	std	Y+13, r22	; 0x0d
 172:	7e 87       	std	Y+14, r23	; 0x0e
 174:	8f 87       	std	Y+15, r24	; 0x0f
 176:	98 8b       	std	Y+16, r25	; 0x10
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	23 16       	cp	r2, r19
 17c:	31 04       	cpc	r3, r1
 17e:	08 f4       	brcc	.+2      	; 0x182 <CRC+0xdc>
 180:	9b c0       	rjmp	.+310    	; 0x2b8 <CRC+0x212>
        while (calcPoly < allData)
 182:	a1 01       	movw	r20, r2
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	dc 01       	movw	r26, r24
 18e:	29 82       	std	Y+1, r2	; 0x01
 190:	5a 83       	std	Y+2, r21	; 0x02
 192:	6b 83       	std	Y+3, r22	; 0x03
 194:	7c 83       	std	Y+4, r23	; 0x04
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	29 85       	ldd	r18, Y+9	; 0x09
 1a0:	3a 85       	ldd	r19, Y+10	; 0x0a
 1a2:	4b 85       	ldd	r20, Y+11	; 0x0b
 1a4:	5c 85       	ldd	r21, Y+12	; 0x0c
 1a6:	6d 85       	ldd	r22, Y+13	; 0x0d
 1a8:	7e 85       	ldd	r23, Y+14	; 0x0e
 1aa:	8f 85       	ldd	r24, Y+15	; 0x0f
 1ac:	98 89       	ldd	r25, Y+16	; 0x10
 1ae:	a9 80       	ldd	r10, Y+1	; 0x01
 1b0:	ba 80       	ldd	r11, Y+2	; 0x02
 1b2:	c1 2c       	mov	r12, r1
 1b4:	d1 2c       	mov	r13, r1
 1b6:	e1 2c       	mov	r14, r1
 1b8:	f1 2c       	mov	r15, r1
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	0e 94 2c 04 	call	0x858	; 0x858 <__cmpdi2>
 1c2:	c8 f5       	brcc	.+114    	; 0x236 <CRC+0x190>
 1c4:	82 2e       	mov	r8, r18
 1c6:	93 2e       	mov	r9, r19
 1c8:	44 2e       	mov	r4, r20
 1ca:	75 2e       	mov	r7, r21
 1cc:	66 2e       	mov	r6, r22
 1ce:	57 2e       	mov	r5, r23
 1d0:	f8 2f       	mov	r31, r24
 1d2:	e9 2f       	mov	r30, r25
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
 1d4:	28 2d       	mov	r18, r8
 1d6:	39 2d       	mov	r19, r9
 1d8:	44 2d       	mov	r20, r4
 1da:	57 2d       	mov	r21, r7
 1dc:	66 2d       	mov	r22, r6
 1de:	75 2d       	mov	r23, r5
 1e0:	8f 2f       	mov	r24, r31
 1e2:	9e 2f       	mov	r25, r30
 1e4:	01 e0       	ldi	r16, 0x01	; 1
 1e6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__ashldi3>
 1ea:	82 2e       	mov	r8, r18
 1ec:	93 2e       	mov	r9, r19
 1ee:	44 2e       	mov	r4, r20
 1f0:	75 2e       	mov	r7, r21
 1f2:	66 2e       	mov	r6, r22
 1f4:	57 2e       	mov	r5, r23
 1f6:	f8 2f       	mov	r31, r24
 1f8:	e9 2f       	mov	r30, r25
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
 1fa:	a9 80       	ldd	r10, Y+1	; 0x01
 1fc:	ba 80       	ldd	r11, Y+2	; 0x02
 1fe:	cb 80       	ldd	r12, Y+3	; 0x03
 200:	dc 80       	ldd	r13, Y+4	; 0x04
 202:	ed 80       	ldd	r14, Y+5	; 0x05
 204:	fe 80       	ldd	r15, Y+6	; 0x06
 206:	0f 81       	ldd	r16, Y+7	; 0x07
 208:	18 85       	ldd	r17, Y+8	; 0x08
 20a:	0e 94 2c 04 	call	0x858	; 0x858 <__cmpdi2>
 20e:	10 f3       	brcs	.-60     	; 0x1d4 <CRC+0x12e>
 210:	57 2d       	mov	r21, r7
 212:	8f 2f       	mov	r24, r31
 214:	9e 2f       	mov	r25, r30
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one
 216:	28 2d       	mov	r18, r8
 218:	39 2d       	mov	r19, r9
 21a:	66 2d       	mov	r22, r6
 21c:	75 2d       	mov	r23, r5
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	0e 94 10 04 	call	0x820	; 0x820 <__lshrdi3>
 224:	42 2e       	mov	r4, r18
 226:	53 2e       	mov	r5, r19
 228:	64 2e       	mov	r6, r20
 22a:	75 2e       	mov	r7, r21
 22c:	86 2e       	mov	r8, r22
 22e:	97 2e       	mov	r9, r23
 230:	a8 2e       	mov	r10, r24
 232:	b9 2e       	mov	r11, r25
 234:	08 c0       	rjmp	.+16     	; 0x246 <CRC+0x1a0>
    if (!received) // Check if the data is received or not
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 236:	49 84       	ldd	r4, Y+9	; 0x09
 238:	5a 84       	ldd	r5, Y+10	; 0x0a
 23a:	6b 84       	ldd	r6, Y+11	; 0x0b
 23c:	7c 84       	ldd	r7, Y+12	; 0x0c
 23e:	8d 84       	ldd	r8, Y+13	; 0x0d
 240:	9e 84       	ldd	r9, Y+14	; 0x0e
 242:	af 84       	ldd	r10, Y+15	; 0x0f
 244:	b8 88       	ldd	r11, Y+16	; 0x10
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one

        #ifdef DEBUG // Debugging
        printf("%i^%i=", allData, calcPoly);
 246:	bf 92       	push	r11
 248:	af 92       	push	r10
 24a:	9f 92       	push	r9
 24c:	8f 92       	push	r8
 24e:	7f 92       	push	r7
 250:	6f 92       	push	r6
 252:	5f 92       	push	r5
 254:	4f 92       	push	r4
 256:	3f 92       	push	r3
 258:	2f 92       	push	r2
 25a:	a9 e9       	ldi	r26, 0x99	; 153
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	bf 93       	push	r27
 260:	af 93       	push	r26
 262:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR
 266:	24 24       	eor	r2, r4
 268:	35 24       	eor	r3, r5

        #ifdef DEBUG // Debugging
        printf("%i\n", allData);
 26a:	3f 92       	push	r3
 26c:	2f 92       	push	r2
 26e:	a4 e6       	ldi	r26, 0x64	; 100
 270:	b2 e0       	ldi	r27, 0x02	; 2
 272:	bf 93       	push	r27
 274:	af 93       	push	r26
 276:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	23 16       	cp	r2, r19
 288:	31 04       	cpc	r3, r1
 28a:	08 f0       	brcs	.+2      	; 0x28e <CRC+0x1e8>
 28c:	7a cf       	rjmp	.-268    	; 0x182 <CRC+0xdc>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <CRC+0x212>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 290:	21 2c       	mov	r2, r1
 292:	31 2c       	mov	r3, r1
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <CRC+0x212>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
 296:	1f 92       	push	r1
 298:	1f 92       	push	r1
 29a:	8b e8       	ldi	r24, 0x8B	; 139
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9f 93       	push	r25
 2a0:	8f 93       	push	r24
 2a2:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	f1 10       	cpse	r15, r1
 2b0:	ef cf       	rjmp	.-34     	; 0x290 <CRC+0x1ea>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 2b2:	21 2c       	mov	r2, r1
 2b4:	31 2c       	mov	r3, r1
 2b6:	50 cf       	rjmp	.-352    	; 0x158 <CRC+0xb2>

        calcPoly = poly; // Reset the polynomial to its original value
    }

    return allData;
}
 2b8:	c1 01       	movw	r24, r2
 2ba:	60 96       	adiw	r28, 0x10	; 16
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	7f 90       	pop	r7
 2e0:	6f 90       	pop	r6
 2e2:	5f 90       	pop	r5
 2e4:	4f 90       	pop	r4
 2e6:	3f 90       	pop	r3
 2e8:	2f 90       	pop	r2
 2ea:	08 95       	ret

000002ec <fillDataArray>:
 *
 * @return The array of integers which can be send.
 *
*/
uint8_t* fillDataArray(char data[100])
{
 2ec:	3f 92       	push	r3
 2ee:	4f 92       	push	r4
 2f0:	5f 92       	push	r5
 2f2:	6f 92       	push	r6
 2f4:	7f 92       	push	r7
 2f6:	8f 92       	push	r8
 2f8:	9f 92       	push	r9
 2fa:	af 92       	push	r10
 2fc:	bf 92       	push	r11
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	c4 58       	subi	r28, 0x84	; 132
 314:	d3 40       	sbci	r29, 0x03	; 3
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	7c 01       	movw	r14, r24
    // Reset some stuff and initialize some variables
    dataLength = 0;
 322:	10 92 9b 02 	sts	0x029B, r1
 326:	10 92 9a 02 	sts	0x029A, r1
 32a:	2c 01       	movw	r4, r24
 32c:	9e 01       	movw	r18, r28
 32e:	2f 5d       	subi	r18, 0xDF	; 223
 330:	3c 4f       	sbci	r19, 0xFC	; 252
    int i;
    uint8_t ret[800]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 332:	dc 01       	movw	r26, r24
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	05 c0       	rjmp	.+10     	; 0x344 <fillDataArray+0x58>
    {
        data_num[i] = (uint8_t)data[i];
 33a:	4d 91       	ld	r20, X+
 33c:	f9 01       	movw	r30, r18
 33e:	41 93       	st	Z+, r20
 340:	9f 01       	movw	r18, r30
    int i;
    uint8_t ret[800]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	f7 01       	movw	r30, r14
 346:	01 90       	ld	r0, Z+
 348:	00 20       	and	r0, r0
 34a:	e9 f7       	brne	.-6      	; 0x346 <fillDataArray+0x5a>
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	bf 01       	movw	r22, r30
 350:	6e 19       	sub	r22, r14
 352:	7f 09       	sbc	r23, r15
 354:	86 17       	cp	r24, r22
 356:	97 07       	cpc	r25, r23
 358:	80 f3       	brcs	.-32     	; 0x33a <fillDataArray+0x4e>
    {
        data_num[i] = (uint8_t)data[i];
    }

    int checksum = CRC(data_num, strlen(data), POLY, false); // Get a checksum for the data
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	47 e6       	ldi	r20, 0x67	; 103
 35e:	51 e0       	ldi	r21, 0x01	; 1
 360:	ce 01       	movw	r24, r28
 362:	8f 5d       	subi	r24, 0xDF	; 223
 364:	9c 4f       	sbci	r25, 0xFC	; 252
 366:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 36a:	3c 01       	movw	r6, r24

    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
 36c:	7f 92       	push	r7
 36e:	8f 93       	push	r24
 370:	80 ea       	ldi	r24, 0xA0	; 160
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	9f 93       	push	r25
 376:	8f 93       	push	r24
 378:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
 37c:	8e 01       	movw	r16, r28
 37e:	0f 5f       	subi	r16, 0xFF	; 255
 380:	1f 4f       	sbci	r17, 0xFF	; 255
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	81 2c       	mov	r8, r1
 38c:	91 2c       	mov	r9, r1
            ret[i*8+j] = tmp; // Store the leftmost bit in an array

            dataLength++; // Add one to the total data length

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 38e:	0f 2e       	mov	r0, r31
 390:	ff ec       	ldi	r31, 0xCF	; 207
 392:	cf 2e       	mov	r12, r31
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	df 2e       	mov	r13, r31
 398:	f0 2d       	mov	r31, r0
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 39a:	2e c0       	rjmp	.+92     	; 0x3f8 <fillDataArray+0x10c>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
 39c:	f2 01       	movw	r30, r4
 39e:	31 90       	ld	r3, Z+
 3a0:	2f 01       	movw	r4, r30
 3a2:	58 01       	movw	r10, r16
 3a4:	f8 e0       	ldi	r31, 0x08	; 8
 3a6:	af 0e       	add	r10, r31
 3a8:	b1 1c       	adc	r11, r1
        for (j = 0; j < 8; j++)
        {
            uint8_t tmp = (ascii & 0b10000000) >> 7; // Select the leftmost bit
            ascii = ascii << 1; // Shift the data left by 1

            ret[i*8+j] = tmp; // Store the leftmost bit in an array
 3aa:	83 2d       	mov	r24, r3
 3ac:	88 1f       	adc	r24, r24
 3ae:	88 27       	eor	r24, r24
 3b0:	88 1f       	adc	r24, r24
 3b2:	f8 01       	movw	r30, r16
 3b4:	81 93       	st	Z+, r24
 3b6:	8f 01       	movw	r16, r30
 3b8:	33 0c       	add	r3, r3

            dataLength++; // Add one to the total data length
 3ba:	20 91 9a 02 	lds	r18, 0x029A
 3be:	30 91 9b 02 	lds	r19, 0x029B
 3c2:	2f 5f       	subi	r18, 0xFF	; 255
 3c4:	3f 4f       	sbci	r19, 0xFF	; 255
 3c6:	30 93 9b 02 	sts	0x029B, r19
 3ca:	20 93 9a 02 	sts	0x029A, r18

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 3ce:	1f 92       	push	r1
 3d0:	8f 93       	push	r24
 3d2:	df 92       	push	r13
 3d4:	cf 92       	push	r12
 3d6:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes

        // Loop through the bits 1 at a time
        for (j = 0; j < 8; j++)
 3da:	0f 90       	pop	r0
 3dc:	0f 90       	pop	r0
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0a 15       	cp	r16, r10
 3e4:	1b 05       	cpc	r17, r11
 3e6:	09 f7       	brne	.-62     	; 0x3aa <fillDataArray+0xbe>
            #ifdef DEBUG // Debugging
            printf("%i", tmp);
            #endif
        }
        #ifdef DEBUG // Debugging
        printf(" ");
 3e8:	80 e2       	ldi	r24, 0x20	; 32
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 4b 04 	call	0x896	; 0x896 <putchar>
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 3f0:	ff ef       	ldi	r31, 0xFF	; 255
 3f2:	8f 1a       	sub	r8, r31
 3f4:	9f 0a       	sbc	r9, r31
 3f6:	85 01       	movw	r16, r10
 3f8:	f7 01       	movw	r30, r14
 3fa:	01 90       	ld	r0, Z+
 3fc:	00 20       	and	r0, r0
 3fe:	e9 f7       	brne	.-6      	; 0x3fa <fillDataArray+0x10e>
 400:	31 97       	sbiw	r30, 0x01	; 1
 402:	ee 19       	sub	r30, r14
 404:	ff 09       	sbc	r31, r15
 406:	8e 16       	cp	r8, r30
 408:	9f 06       	cpc	r9, r31
 40a:	40 f2       	brcs	.-112    	; 0x39c <fillDataArray+0xb0>
 40c:	40 91 9a 02 	lds	r20, 0x029A
 410:	50 91 9b 02 	lds	r21, 0x029B
 414:	e1 e0       	ldi	r30, 0x01	; 1
 416:	f0 e0       	ldi	r31, 0x00	; 0
 418:	ec 0f       	add	r30, r28
 41a:	fd 1f       	adc	r31, r29
 41c:	e4 0f       	add	r30, r20
 41e:	f5 1f       	adc	r31, r21
 420:	9a 01       	movw	r18, r20
 422:	28 5f       	subi	r18, 0xF8	; 248
 424:	3f 4f       	sbci	r19, 0xFF	; 255
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	8c 0f       	add	r24, r28
 42c:	9d 1f       	adc	r25, r29
 42e:	28 0f       	add	r18, r24
 430:	39 1f       	adc	r19, r25
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
    {
        int tmp = (checksum & 0b10000000) >> 7; // Select the leftmost bit
 432:	67 fa       	bst	r6, 7
 434:	88 27       	eor	r24, r24
 436:	80 f9       	bld	r24, 0
        checksum = checksum << 1; // Shift the checksum left by 1

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
 438:	81 93       	st	Z+, r24
 43a:	66 0c       	add	r6, r6
 43c:	77 1c       	adc	r7, r7
        printf(" ");
        #endif
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
 43e:	e2 17       	cp	r30, r18
 440:	f3 07       	cpc	r31, r19
 442:	b9 f7       	brne	.-18     	; 0x432 <fillDataArray+0x146>
 444:	ca 01       	movw	r24, r20
 446:	08 96       	adiw	r24, 0x08	; 8
 448:	90 93 9b 02 	sts	0x029B, r25
 44c:	80 93 9a 02 	sts	0x029A, r24
        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
        dataLength++; // Add one to the total data length
    }

    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
 450:	9f 93       	push	r25
 452:	8f 93       	push	r24
 454:	8f ea       	ldi	r24, 0xAF	; 175
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	9f 93       	push	r25
 45a:	8f 93       	push	r24
 45c:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    #endif // DEBUG

    return ret;
 460:	0f 90       	pop	r0
 462:	0f 90       	pop	r0
 464:	0f 90       	pop	r0
 466:	0f 90       	pop	r0
}
 468:	ce 01       	movw	r24, r28
 46a:	01 96       	adiw	r24, 0x01	; 1
 46c:	cc 57       	subi	r28, 0x7C	; 124
 46e:	dc 4f       	sbci	r29, 0xFC	; 252
 470:	0f b6       	in	r0, 0x3f	; 63
 472:	f8 94       	cli
 474:	de bf       	out	0x3e, r29	; 62
 476:	0f be       	out	0x3f, r0	; 63
 478:	cd bf       	out	0x3d, r28	; 61
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	1f 91       	pop	r17
 480:	0f 91       	pop	r16
 482:	ff 90       	pop	r15
 484:	ef 90       	pop	r14
 486:	df 90       	pop	r13
 488:	cf 90       	pop	r12
 48a:	bf 90       	pop	r11
 48c:	af 90       	pop	r10
 48e:	9f 90       	pop	r9
 490:	8f 90       	pop	r8
 492:	7f 90       	pop	r7
 494:	6f 90       	pop	r6
 496:	5f 90       	pop	r5
 498:	4f 90       	pop	r4
 49a:	3f 90       	pop	r3
 49c:	08 95       	ret

0000049e <convertToData>:
 * @param length The length of the array
 *
 * @return The readable data
*/
char* convertToData(uint8_t bits[800], int length)
{
 49e:	2f 92       	push	r2
 4a0:	3f 92       	push	r3
 4a2:	4f 92       	push	r4
 4a4:	5f 92       	push	r5
 4a6:	6f 92       	push	r6
 4a8:	7f 92       	push	r7
 4aa:	8f 92       	push	r8
 4ac:	9f 92       	push	r9
 4ae:	af 92       	push	r10
 4b0:	bf 92       	push	r11
 4b2:	cf 92       	push	r12
 4b4:	df 92       	push	r13
 4b6:	ef 92       	push	r14
 4b8:	ff 92       	push	r15
 4ba:	0f 93       	push	r16
 4bc:	1f 93       	push	r17
 4be:	cf 93       	push	r28
 4c0:	df 93       	push	r29
 4c2:	cd b7       	in	r28, 0x3d	; 61
 4c4:	de b7       	in	r29, 0x3e	; 62
 4c6:	c8 5c       	subi	r28, 0xC8	; 200
 4c8:	d1 09       	sbc	r29, r1
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	f8 94       	cli
 4ce:	de bf       	out	0x3e, r29	; 62
 4d0:	0f be       	out	0x3f, r0	; 63
 4d2:	cd bf       	out	0x3d, r28	; 61
 4d4:	e8 2e       	mov	r14, r24
 4d6:	f9 2e       	mov	r15, r25
 4d8:	06 2f       	mov	r16, r22
 4da:	17 2f       	mov	r17, r23
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
 4dc:	19 82       	std	Y+1, r1	; 0x01
 4de:	1a 82       	std	Y+2, r1	; 0x02
 4e0:	1b 82       	std	Y+3, r1	; 0x03
 4e2:	1c 82       	std	Y+4, r1	; 0x04
 4e4:	fe 01       	movw	r30, r28
 4e6:	35 96       	adiw	r30, 0x05	; 5
 4e8:	80 e6       	ldi	r24, 0x60	; 96
 4ea:	df 01       	movw	r26, r30
 4ec:	1d 92       	st	X+, r1
 4ee:	8a 95       	dec	r24
 4f0:	e9 f7       	brne	.-6      	; 0x4ec <convertToData+0x4e>
    char tmp = 0b00000000; // Create a temp char with no data
    uint8_t ascii[100]; // The int representation of the data

    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
 4f2:	7f 93       	push	r23
 4f4:	6f 93       	push	r22
 4f6:	20 ec       	ldi	r18, 0xC0	; 192
 4f8:	31 e0       	ldi	r19, 0x01	; 1
 4fa:	3f 93       	push	r19
 4fc:	2f 93       	push	r18
 4fe:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
 502:	6e 2c       	mov	r6, r14
 504:	7f 2c       	mov	r7, r15
 506:	80 2e       	mov	r8, r16
 508:	91 2e       	mov	r9, r17
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
    char tmp = 0b00000000; // Create a temp char with no data
 512:	31 2c       	mov	r3, r1
*/
char* convertToData(uint8_t bits[800], int length)
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
 514:	a1 2c       	mov	r10, r1
 516:	b1 2c       	mov	r11, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 518:	00 e0       	ldi	r16, 0x00	; 0
 51a:	10 e0       	ldi	r17, 0x00	; 0
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 51c:	0f 2e       	mov	r0, r31
 51e:	fc ec       	ldi	r31, 0xCC	; 204
 520:	cf 2e       	mov	r12, r31
 522:	f1 e0       	ldi	r31, 0x01	; 1
 524:	df 2e       	mov	r13, r31
 526:	f0 2d       	mov	r31, r0
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
 528:	0f 2e       	mov	r0, r31
 52a:	f2 ed       	ldi	r31, 0xD2	; 210
 52c:	ef 2e       	mov	r14, r31
 52e:	f1 e0       	ldi	r31, 0x01	; 1
 530:	ff 2e       	mov	r15, r31
 532:	f0 2d       	mov	r31, r0

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 534:	0f 2e       	mov	r0, r31
 536:	f1 ee       	ldi	r31, 0xE1	; 225
 538:	4f 2e       	mov	r4, r31
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	5f 2e       	mov	r5, r31
 53e:	f0 2d       	mov	r31, r0
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
            total++; // Add one to the total
            tmp = 0b00000000; // Reset the temp value
 540:	21 2c       	mov	r2, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 542:	39 c0       	rjmp	.+114    	; 0x5b6 <convertToData+0x118>
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 544:	1f 93       	push	r17
 546:	0f 93       	push	r16
 548:	df 92       	push	r13
 54a:	cf 92       	push	r12
 54c:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones
 550:	f3 01       	movw	r30, r6
 552:	81 91       	ld	r24, Z+
 554:	3f 01       	movw	r6, r30
 556:	81 70       	andi	r24, 0x01	; 1
 558:	33 0c       	add	r3, r3
 55a:	38 2a       	or	r3, r24

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
 55c:	1f 92       	push	r1
 55e:	3f 92       	push	r3
 560:	1f 92       	push	r1
 562:	8f 93       	push	r24
 564:	ff 92       	push	r15
 566:	ef 92       	push	r14
 568:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
        #endif

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
 56c:	0f 5f       	subi	r16, 0xFF	; 255
 56e:	1f 4f       	sbci	r17, 0xFF	; 255
 570:	c8 01       	movw	r24, r16
 572:	87 70       	andi	r24, 0x07	; 7
 574:	99 27       	eor	r25, r25
 576:	0f b6       	in	r0, 0x3f	; 63
 578:	f8 94       	cli
 57a:	de bf       	out	0x3e, r29	; 62
 57c:	0f be       	out	0x3f, r0	; 63
 57e:	cd bf       	out	0x3d, r28	; 61
 580:	89 2b       	or	r24, r25
 582:	c9 f4       	brne	.+50     	; 0x5b6 <convertToData+0x118>
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 584:	bf 92       	push	r11
 586:	af 92       	push	r10
 588:	1f 92       	push	r1
 58a:	3f 92       	push	r3
 58c:	5f 92       	push	r5
 58e:	4f 92       	push	r4
 590:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
 594:	e1 e0       	ldi	r30, 0x01	; 1
 596:	f0 e0       	ldi	r31, 0x00	; 0
 598:	ec 0f       	add	r30, r28
 59a:	fd 1f       	adc	r31, r29
 59c:	ea 0d       	add	r30, r10
 59e:	fb 1d       	adc	r31, r11
 5a0:	30 82       	st	Z, r3
            total++; // Add one to the total
 5a2:	3f ef       	ldi	r19, 0xFF	; 255
 5a4:	a3 1a       	sub	r10, r19
 5a6:	b3 0a       	sbc	r11, r19
 5a8:	0f 90       	pop	r0
 5aa:	0f 90       	pop	r0
 5ac:	0f 90       	pop	r0
 5ae:	0f 90       	pop	r0
 5b0:	0f 90       	pop	r0
 5b2:	0f 90       	pop	r0
            tmp = 0b00000000; // Reset the temp value
 5b4:	32 2c       	mov	r3, r2
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 5b6:	08 15       	cp	r16, r8
 5b8:	19 05       	cpc	r17, r9
 5ba:	21 f6       	brne	.-120    	; 0x544 <convertToData+0xa6>
 5bc:	ae 01       	movw	r20, r28
 5be:	4f 5f       	subi	r20, 0xFF	; 255
 5c0:	5f 4f       	sbci	r21, 0xFF	; 255
 5c2:	9e 01       	movw	r18, r28
 5c4:	2b 59       	subi	r18, 0x9B	; 155
 5c6:	3f 4f       	sbci	r19, 0xFF	; 255
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	90 e0       	ldi	r25, 0x00	; 0
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 5cc:	da 01       	movw	r26, r20
 5ce:	07 c0       	rjmp	.+14     	; 0x5de <convertToData+0x140>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
 5d0:	fa 01       	movw	r30, r20
 5d2:	61 91       	ld	r22, Z+
 5d4:	af 01       	movw	r20, r30
 5d6:	f9 01       	movw	r30, r18
 5d8:	61 93       	st	Z+, r22
 5da:	9f 01       	movw	r18, r30
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 5dc:	01 96       	adiw	r24, 0x01	; 1
 5de:	fd 01       	movw	r30, r26
 5e0:	01 90       	ld	r0, Z+
 5e2:	00 20       	and	r0, r0
 5e4:	e9 f7       	brne	.-6      	; 0x5e0 <convertToData+0x142>
 5e6:	31 97       	sbiw	r30, 0x01	; 1
 5e8:	bf 01       	movw	r22, r30
 5ea:	6a 1b       	sub	r22, r26
 5ec:	7b 0b       	sbc	r23, r27
 5ee:	86 17       	cp	r24, r22
 5f0:	97 07       	cpc	r25, r23
 5f2:	70 f3       	brcs	.-36     	; 0x5d0 <convertToData+0x132>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
 5f4:	21 e0       	ldi	r18, 0x01	; 1
 5f6:	47 e6       	ldi	r20, 0x67	; 103
 5f8:	51 e0       	ldi	r21, 0x01	; 1
 5fa:	ce 01       	movw	r24, r28
 5fc:	8b 59       	subi	r24, 0x9B	; 155
 5fe:	9f 4f       	sbci	r25, 0xFF	; 255
 600:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 604:	8c 01       	movw	r16, r24

    ret[total - 1] = 0b00000000; // Set the last byte to 0 (this is the checksum)
 606:	fe 01       	movw	r30, r28
 608:	ea 0d       	add	r30, r10
 60a:	fb 1d       	adc	r31, r11
 60c:	10 82       	st	Z, r1

    #ifdef DEBUG // Debugging
    printf("\n\nChecksum: %i\n\n", checksum);
 60e:	1f 93       	push	r17
 610:	8f 93       	push	r24
 612:	84 ef       	ldi	r24, 0xF4	; 244
 614:	91 e0       	ldi	r25, 0x01	; 1
 616:	9f 93       	push	r25
 618:	8f 93       	push	r24
 61a:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
    #endif // DEBUG

    if (checksum == 0)
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	0f 90       	pop	r0
 624:	0f 90       	pop	r0
 626:	01 2b       	or	r16, r17
 628:	29 f4       	brne	.+10     	; 0x634 <convertToData+0x196>
    {
        #ifdef DEBUG // Debugging
        printf("No errors.\n");
 62a:	85 e0       	ldi	r24, 0x05	; 5
 62c:	92 e0       	ldi	r25, 0x02	; 2
 62e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <puts>
 632:	06 c0       	rjmp	.+12     	; 0x640 <convertToData+0x1a2>
        #endif // DEBUG
    }
    else
    {
        ret[0] = -1;
 634:	8f ef       	ldi	r24, 0xFF	; 255
 636:	89 83       	std	Y+1, r24	; 0x01
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
 638:	80 e1       	ldi	r24, 0x10	; 16
 63a:	92 e0       	ldi	r25, 0x02	; 2
 63c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <puts>
        #endif // DEBUG
    }

    return ret;
}
 640:	ce 01       	movw	r24, r28
 642:	01 96       	adiw	r24, 0x01	; 1
 644:	c8 53       	subi	r28, 0x38	; 56
 646:	df 4f       	sbci	r29, 0xFF	; 255
 648:	0f b6       	in	r0, 0x3f	; 63
 64a:	f8 94       	cli
 64c:	de bf       	out	0x3e, r29	; 62
 64e:	0f be       	out	0x3f, r0	; 63
 650:	cd bf       	out	0x3d, r28	; 61
 652:	df 91       	pop	r29
 654:	cf 91       	pop	r28
 656:	1f 91       	pop	r17
 658:	0f 91       	pop	r16
 65a:	ff 90       	pop	r15
 65c:	ef 90       	pop	r14
 65e:	df 90       	pop	r13
 660:	cf 90       	pop	r12
 662:	bf 90       	pop	r11
 664:	af 90       	pop	r10
 666:	9f 90       	pop	r9
 668:	8f 90       	pop	r8
 66a:	7f 90       	pop	r7
 66c:	6f 90       	pop	r6
 66e:	5f 90       	pop	r5
 670:	4f 90       	pop	r4
 672:	3f 90       	pop	r3
 674:	2f 90       	pop	r2
 676:	08 95       	ret

00000678 <sendData>:

void sendData(int* dataToSend)
{
	int i;

	for (i = 0; i < dataLength; i++)
 678:	20 91 9a 02 	lds	r18, 0x029A
 67c:	30 91 9b 02 	lds	r19, 0x029B
 680:	12 16       	cp	r1, r18
 682:	13 06       	cpc	r1, r19
 684:	cc f4       	brge	.+50     	; 0x6b8 <sendData+0x40>
 686:	e8 2f       	mov	r30, r24
 688:	f9 2f       	mov	r31, r25
 68a:	80 e0       	ldi	r24, 0x00	; 0
 68c:	90 e0       	ldi	r25, 0x00	; 0
	{
		if (dataToSend[i] == 0)
 68e:	21 91       	ld	r18, Z+
 690:	31 91       	ld	r19, Z+
 692:	23 2b       	or	r18, r19
 694:	11 f4       	brne	.+4      	; 0x69a <sendData+0x22>
			DDRB &= ~(1 << DDB5);
 696:	25 98       	cbi	0x04, 5	; 4
 698:	01 c0       	rjmp	.+2      	; 0x69c <sendData+0x24>
		else
			DDRB |= (1 << DDB5);
 69a:	25 9a       	sbi	0x04, 5	; 4
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 69c:	af e3       	ldi	r26, 0x3F	; 63
 69e:	bf e1       	ldi	r27, 0x1F	; 31
 6a0:	11 97       	sbiw	r26, 0x01	; 1
 6a2:	f1 f7       	brne	.-4      	; 0x6a0 <sendData+0x28>
 6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <sendData+0x2e>
 6a6:	00 00       	nop

void sendData(int* dataToSend)
{
	int i;

	for (i = 0; i < dataLength; i++)
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	20 91 9a 02 	lds	r18, 0x029A
 6ae:	30 91 9b 02 	lds	r19, 0x029B
 6b2:	82 17       	cp	r24, r18
 6b4:	93 07       	cpc	r25, r19
 6b6:	5c f3       	brlt	.-42     	; 0x68e <sendData+0x16>
 6b8:	08 95       	ret

000006ba <main>:

FILE usart0_output = FDEV_SETUP_STREAM(USART0SendByte, NULL, _FDEV_SETUP_WRITE);	// Output file for USART
FILE usart0_input = FDEV_SETUP_STREAM(NULL, USART0GetByte, _FDEV_SETUP_READ);		// Input file for USART

int main(void)
{
 6ba:	cf 93       	push	r28
 6bc:	df 93       	push	r29
 6be:	cd b7       	in	r28, 0x3d	; 61
 6c0:	de b7       	in	r29, 0x3e	; 62
 6c2:	c4 56       	subi	r28, 0x64	; 100
 6c4:	d1 09       	sbc	r29, r1
 6c6:	0f b6       	in	r0, 0x3f	; 63
 6c8:	f8 94       	cli
 6ca:	de bf       	out	0x3e, r29	; 62
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	cd bf       	out	0x3d, r28	; 61
	DDRB |= (1 << DDB5);
 6d0:	25 9a       	sbi	0x04, 5	; 4

	PORTB |= (1 << DDB5);
 6d2:	2d 9a       	sbi	0x05, 5	; 5

	/* USART INIT START */
	USART0Init();
 6d4:	0e 94 c8 03 	call	0x790	; 0x790 <USART0Init>
	stdout =& usart0_output;
 6d8:	ee e9       	ldi	r30, 0x9E	; 158
 6da:	f2 e0       	ldi	r31, 0x02	; 2
 6dc:	8e e0       	ldi	r24, 0x0E	; 14
 6de:	91 e0       	ldi	r25, 0x01	; 1
 6e0:	93 83       	std	Z+3, r25	; 0x03
 6e2:	82 83       	std	Z+2, r24	; 0x02
	stdin =& usart0_input;
 6e4:	80 e0       	ldi	r24, 0x00	; 0
 6e6:	91 e0       	ldi	r25, 0x01	; 1
 6e8:	91 83       	std	Z+1, r25	; 0x01
 6ea:	80 83       	st	Z, r24
	/* USART INIT STOP */

	//char input[55] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; // MAX STRING LENGTH BEFORE UC DOES WIERD STUFF
	//char input[55] = "test";

	char input[100] = "Now, this is a story all about how My life got flipped-turned upside down";
 6ec:	8a e4       	ldi	r24, 0x4A	; 74
 6ee:	ec e1       	ldi	r30, 0x1C	; 28
 6f0:	f1 e0       	ldi	r31, 0x01	; 1
 6f2:	8e 01       	movw	r16, r28
 6f4:	0f 5f       	subi	r16, 0xFF	; 255
 6f6:	1f 4f       	sbci	r17, 0xFF	; 255
 6f8:	d8 01       	movw	r26, r16
 6fa:	01 90       	ld	r0, Z+
 6fc:	0d 92       	st	X+, r0
 6fe:	8a 95       	dec	r24
 700:	e1 f7       	brne	.-8      	; 0x6fa <main+0x40>
 702:	fe 01       	movw	r30, r28
 704:	e5 5b       	subi	r30, 0xB5	; 181
 706:	ff 4f       	sbci	r31, 0xFF	; 255
 708:	8a e1       	ldi	r24, 0x1A	; 26
 70a:	df 01       	movw	r26, r30
 70c:	1d 92       	st	X+, r1
 70e:	8a 95       	dec	r24
 710:	e9 f7       	brne	.-6      	; 0x70c <main+0x52>

	#ifdef DEBUG
	printf("\n\n\n\nSTART CODE WITH THIS INPUT: %s\n\n", input); // Print the input string
 712:	1f 93       	push	r17
 714:	0f 93       	push	r16
 716:	80 e2       	ldi	r24, 0x20	; 32
 718:	92 e0       	ldi	r25, 0x02	; 2
 71a:	9f 93       	push	r25
 71c:	8f 93       	push	r24
 71e:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
	#endif // DEBUG
		
	int* dataToSend = fillDataArray(input); // Convert data to base4
 722:	c8 01       	movw	r24, r16
 724:	0e 94 76 01 	call	0x2ec	; 0x2ec <fillDataArray>
 728:	7c 01       	movw	r14, r24
	char* received = convertToData(dataToSend, dataLength); // Convert base4 to data
 72a:	60 91 9a 02 	lds	r22, 0x029A
 72e:	70 91 9b 02 	lds	r23, 0x029B
 732:	0e 94 4f 02 	call	0x49e	; 0x49e <convertToData>

	#ifdef DEBUG
	printf("\nReceived data: %s\n\n", received); // Print the received data
 736:	9f 93       	push	r25
 738:	8f 93       	push	r24
 73a:	85 e4       	ldi	r24, 0x45	; 69
 73c:	92 e0       	ldi	r25, 0x02	; 2
 73e:	9f 93       	push	r25
 740:	8f 93       	push	r24
 742:	0e 94 35 04 	call	0x86a	; 0x86a <printf>

	unsigned int time;

	time = (1000 / BAUDRATE) * dataLength;
 746:	00 91 9a 02 	lds	r16, 0x029A
 74a:	10 91 9b 02 	lds	r17, 0x029B
 74e:	00 0f       	add	r16, r16
 750:	11 1f       	adc	r17, r17

	printf("Baudtime: %i\n", 1000/BAUDRATE);
 752:	1f 92       	push	r1
 754:	82 e0       	ldi	r24, 0x02	; 2
 756:	8f 93       	push	r24
 758:	8a e5       	ldi	r24, 0x5A	; 90
 75a:	92 e0       	ldi	r25, 0x02	; 2
 75c:	9f 93       	push	r25
 75e:	8f 93       	push	r24
 760:	0e 94 35 04 	call	0x86a	; 0x86a <printf>
	printf("Time needed to send: %i ms\n", time);
 764:	1f 93       	push	r17
 766:	0f 93       	push	r16
 768:	88 e6       	ldi	r24, 0x68	; 104
 76a:	92 e0       	ldi	r25, 0x02	; 2
 76c:	9f 93       	push	r25
 76e:	8f 93       	push	r24
 770:	0e 94 35 04 	call	0x86a	; 0x86a <printf>

	PORTB &= ~(1 << DDB5);
 774:	2d 98       	cbi	0x05, 5	; 5

	sendData(dataToSend);
 776:	c7 01       	movw	r24, r14
 778:	0e 94 3c 03 	call	0x678	; 0x678 <sendData>

	printf("Entering loop now....\n");
 77c:	84 e8       	ldi	r24, 0x84	; 132
 77e:	92 e0       	ldi	r25, 0x02	; 2
 780:	0e 94 52 04 	call	0x8a4	; 0x8a4 <puts>
 784:	0f b6       	in	r0, 0x3f	; 63
 786:	f8 94       	cli
 788:	de bf       	out	0x3e, r29	; 62
 78a:	0f be       	out	0x3f, r0	; 63
 78c:	cd bf       	out	0x3d, r28	; 61
	#endif

	while (1)
	{
		// Main loop
	}
 78e:	ff cf       	rjmp	.-2      	; 0x78e <main+0xd4>

00000790 <USART0Init>:

#include "USART.h"

void USART0Init()
{
	receiveDone = 0;
 790:	10 92 9d 02 	sts	0x029D, r1
 794:	10 92 9c 02 	sts	0x029C, r1

	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_BAUDRATE >> 8);
 798:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_BAUDRATE;
 79c:	10 92 c4 00 	sts	0x00C4, r1

	// Enable transmission and receiving
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 7a0:	e1 ec       	ldi	r30, 0xC1	; 193
 7a2:	f0 e0       	ldi	r31, 0x00	; 0
 7a4:	80 81       	ld	r24, Z
 7a6:	88 61       	ori	r24, 0x18	; 24
 7a8:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 7aa:	e2 ec       	ldi	r30, 0xC2	; 194
 7ac:	f0 e0       	ldi	r31, 0x00	; 0
 7ae:	80 81       	ld	r24, Z
 7b0:	86 60       	ori	r24, 0x06	; 6
 7b2:	80 83       	st	Z, r24
 7b4:	08 95       	ret

000007b6 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
 7b6:	cf 93       	push	r28
 7b8:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
 7ba:	8a 30       	cpi	r24, 0x0A	; 10
 7bc:	19 f4       	brne	.+6      	; 0x7c4 <USART0SendByte+0xe>
 7be:	8d e0       	ldi	r24, 0x0D	; 13
 7c0:	0e 94 db 03 	call	0x7b6	; 0x7b6 <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 7c4:	e0 ec       	ldi	r30, 0xC0	; 192
 7c6:	f0 e0       	ldi	r31, 0x00	; 0
 7c8:	90 81       	ld	r25, Z
 7ca:	95 ff       	sbrs	r25, 5
 7cc:	fd cf       	rjmp	.-6      	; 0x7c8 <USART0SendByte+0x12>

	// Transmit data
	UDR0 = u8Data;
 7ce:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
 7d2:	80 e0       	ldi	r24, 0x00	; 0
 7d4:	90 e0       	ldi	r25, 0x00	; 0
 7d6:	cf 91       	pop	r28
 7d8:	08 95       	ret

000007da <USART0GetByte>:

char USART0GetByte(FILE *stream)
{
	while (!(UCSR0A & (1 << RXC0)));
 7da:	e0 ec       	ldi	r30, 0xC0	; 192
 7dc:	f0 e0       	ldi	r31, 0x00	; 0
 7de:	80 81       	ld	r24, Z
 7e0:	88 23       	and	r24, r24
 7e2:	ec f7       	brge	.-6      	; 0x7de <USART0GetByte+0x4>
	
	return UDR0;
 7e4:	80 91 c6 00 	lds	r24, 0x00C6
 7e8:	08 95       	ret

000007ea <__ashldi3>:
 7ea:	0f 93       	push	r16
 7ec:	08 30       	cpi	r16, 0x08	; 8
 7ee:	90 f0       	brcs	.+36     	; 0x814 <__ashldi3+0x2a>
 7f0:	98 2f       	mov	r25, r24
 7f2:	87 2f       	mov	r24, r23
 7f4:	76 2f       	mov	r23, r22
 7f6:	65 2f       	mov	r22, r21
 7f8:	54 2f       	mov	r21, r20
 7fa:	43 2f       	mov	r20, r19
 7fc:	32 2f       	mov	r19, r18
 7fe:	22 27       	eor	r18, r18
 800:	08 50       	subi	r16, 0x08	; 8
 802:	f4 cf       	rjmp	.-24     	; 0x7ec <__ashldi3+0x2>
 804:	22 0f       	add	r18, r18
 806:	33 1f       	adc	r19, r19
 808:	44 1f       	adc	r20, r20
 80a:	55 1f       	adc	r21, r21
 80c:	66 1f       	adc	r22, r22
 80e:	77 1f       	adc	r23, r23
 810:	88 1f       	adc	r24, r24
 812:	99 1f       	adc	r25, r25
 814:	0a 95       	dec	r16
 816:	b2 f7       	brpl	.-20     	; 0x804 <__ashldi3+0x1a>
 818:	0f 91       	pop	r16
 81a:	08 95       	ret

0000081c <__ashrdi3>:
 81c:	97 fb       	bst	r25, 7
 81e:	10 f8       	bld	r1, 0

00000820 <__lshrdi3>:
 820:	16 94       	lsr	r1
 822:	00 08       	sbc	r0, r0
 824:	0f 93       	push	r16
 826:	08 30       	cpi	r16, 0x08	; 8
 828:	98 f0       	brcs	.+38     	; 0x850 <__lshrdi3+0x30>
 82a:	08 50       	subi	r16, 0x08	; 8
 82c:	23 2f       	mov	r18, r19
 82e:	34 2f       	mov	r19, r20
 830:	45 2f       	mov	r20, r21
 832:	56 2f       	mov	r21, r22
 834:	67 2f       	mov	r22, r23
 836:	78 2f       	mov	r23, r24
 838:	89 2f       	mov	r24, r25
 83a:	90 2d       	mov	r25, r0
 83c:	f4 cf       	rjmp	.-24     	; 0x826 <__lshrdi3+0x6>
 83e:	05 94       	asr	r0
 840:	97 95       	ror	r25
 842:	87 95       	ror	r24
 844:	77 95       	ror	r23
 846:	67 95       	ror	r22
 848:	57 95       	ror	r21
 84a:	47 95       	ror	r20
 84c:	37 95       	ror	r19
 84e:	27 95       	ror	r18
 850:	0a 95       	dec	r16
 852:	aa f7       	brpl	.-22     	; 0x83e <__lshrdi3+0x1e>
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <__cmpdi2>:
 858:	2a 15       	cp	r18, r10
 85a:	3b 05       	cpc	r19, r11
 85c:	4c 05       	cpc	r20, r12
 85e:	5d 05       	cpc	r21, r13
 860:	6e 05       	cpc	r22, r14
 862:	7f 05       	cpc	r23, r15
 864:	80 07       	cpc	r24, r16
 866:	91 07       	cpc	r25, r17
 868:	08 95       	ret

0000086a <printf>:
 86a:	a0 e0       	ldi	r26, 0x00	; 0
 86c:	b0 e0       	ldi	r27, 0x00	; 0
 86e:	eb e3       	ldi	r30, 0x3B	; 59
 870:	f4 e0       	ldi	r31, 0x04	; 4
 872:	0c 94 10 07 	jmp	0xe20	; 0xe20 <__prologue_saves__+0x20>
 876:	ae 01       	movw	r20, r28
 878:	4b 5f       	subi	r20, 0xFB	; 251
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	fa 01       	movw	r30, r20
 87e:	61 91       	ld	r22, Z+
 880:	71 91       	ld	r23, Z+
 882:	af 01       	movw	r20, r30
 884:	80 91 a0 02 	lds	r24, 0x02A0
 888:	90 91 a1 02 	lds	r25, 0x02A1
 88c:	0e 94 82 04 	call	0x904	; 0x904 <vfprintf>
 890:	e2 e0       	ldi	r30, 0x02	; 2
 892:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__epilogue_restores__+0x20>

00000896 <putchar>:
 896:	60 91 a0 02 	lds	r22, 0x02A0
 89a:	70 91 a1 02 	lds	r23, 0x02A1
 89e:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 8a2:	08 95       	ret

000008a4 <puts>:
 8a4:	0f 93       	push	r16
 8a6:	1f 93       	push	r17
 8a8:	cf 93       	push	r28
 8aa:	df 93       	push	r29
 8ac:	e0 91 a0 02 	lds	r30, 0x02A0
 8b0:	f0 91 a1 02 	lds	r31, 0x02A1
 8b4:	23 81       	ldd	r18, Z+3	; 0x03
 8b6:	21 ff       	sbrs	r18, 1
 8b8:	1b c0       	rjmp	.+54     	; 0x8f0 <puts+0x4c>
 8ba:	8c 01       	movw	r16, r24
 8bc:	d0 e0       	ldi	r29, 0x00	; 0
 8be:	c0 e0       	ldi	r28, 0x00	; 0
 8c0:	f8 01       	movw	r30, r16
 8c2:	81 91       	ld	r24, Z+
 8c4:	8f 01       	movw	r16, r30
 8c6:	60 91 a0 02 	lds	r22, 0x02A0
 8ca:	70 91 a1 02 	lds	r23, 0x02A1
 8ce:	db 01       	movw	r26, r22
 8d0:	18 96       	adiw	r26, 0x08	; 8
 8d2:	ed 91       	ld	r30, X+
 8d4:	fc 91       	ld	r31, X
 8d6:	19 97       	sbiw	r26, 0x09	; 9
 8d8:	88 23       	and	r24, r24
 8da:	31 f0       	breq	.+12     	; 0x8e8 <puts+0x44>
 8dc:	09 95       	icall
 8de:	89 2b       	or	r24, r25
 8e0:	79 f3       	breq	.-34     	; 0x8c0 <puts+0x1c>
 8e2:	df ef       	ldi	r29, 0xFF	; 255
 8e4:	cf ef       	ldi	r28, 0xFF	; 255
 8e6:	ec cf       	rjmp	.-40     	; 0x8c0 <puts+0x1c>
 8e8:	8a e0       	ldi	r24, 0x0A	; 10
 8ea:	09 95       	icall
 8ec:	89 2b       	or	r24, r25
 8ee:	19 f0       	breq	.+6      	; 0x8f6 <puts+0x52>
 8f0:	8f ef       	ldi	r24, 0xFF	; 255
 8f2:	9f ef       	ldi	r25, 0xFF	; 255
 8f4:	02 c0       	rjmp	.+4      	; 0x8fa <puts+0x56>
 8f6:	8d 2f       	mov	r24, r29
 8f8:	9c 2f       	mov	r25, r28
 8fa:	df 91       	pop	r29
 8fc:	cf 91       	pop	r28
 8fe:	1f 91       	pop	r17
 900:	0f 91       	pop	r16
 902:	08 95       	ret

00000904 <vfprintf>:
 904:	ac e0       	ldi	r26, 0x0C	; 12
 906:	b0 e0       	ldi	r27, 0x00	; 0
 908:	e8 e8       	ldi	r30, 0x88	; 136
 90a:	f4 e0       	ldi	r31, 0x04	; 4
 90c:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__prologue_saves__>
 910:	7c 01       	movw	r14, r24
 912:	6b 01       	movw	r12, r22
 914:	8a 01       	movw	r16, r20
 916:	fc 01       	movw	r30, r24
 918:	17 82       	std	Z+7, r1	; 0x07
 91a:	16 82       	std	Z+6, r1	; 0x06
 91c:	83 81       	ldd	r24, Z+3	; 0x03
 91e:	81 ff       	sbrs	r24, 1
 920:	bd c1       	rjmp	.+890    	; 0xc9c <vfprintf+0x398>
 922:	ce 01       	movw	r24, r28
 924:	01 96       	adiw	r24, 0x01	; 1
 926:	4c 01       	movw	r8, r24
 928:	f7 01       	movw	r30, r14
 92a:	93 81       	ldd	r25, Z+3	; 0x03
 92c:	f6 01       	movw	r30, r12
 92e:	93 fd       	sbrc	r25, 3
 930:	85 91       	lpm	r24, Z+
 932:	93 ff       	sbrs	r25, 3
 934:	81 91       	ld	r24, Z+
 936:	6f 01       	movw	r12, r30
 938:	88 23       	and	r24, r24
 93a:	09 f4       	brne	.+2      	; 0x93e <vfprintf+0x3a>
 93c:	ab c1       	rjmp	.+854    	; 0xc94 <vfprintf+0x390>
 93e:	85 32       	cpi	r24, 0x25	; 37
 940:	39 f4       	brne	.+14     	; 0x950 <vfprintf+0x4c>
 942:	93 fd       	sbrc	r25, 3
 944:	85 91       	lpm	r24, Z+
 946:	93 ff       	sbrs	r25, 3
 948:	81 91       	ld	r24, Z+
 94a:	6f 01       	movw	r12, r30
 94c:	85 32       	cpi	r24, 0x25	; 37
 94e:	29 f4       	brne	.+10     	; 0x95a <vfprintf+0x56>
 950:	b7 01       	movw	r22, r14
 952:	90 e0       	ldi	r25, 0x00	; 0
 954:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 958:	e7 cf       	rjmp	.-50     	; 0x928 <vfprintf+0x24>
 95a:	51 2c       	mov	r5, r1
 95c:	31 2c       	mov	r3, r1
 95e:	20 e0       	ldi	r18, 0x00	; 0
 960:	20 32       	cpi	r18, 0x20	; 32
 962:	a0 f4       	brcc	.+40     	; 0x98c <vfprintf+0x88>
 964:	8b 32       	cpi	r24, 0x2B	; 43
 966:	69 f0       	breq	.+26     	; 0x982 <vfprintf+0x7e>
 968:	30 f4       	brcc	.+12     	; 0x976 <vfprintf+0x72>
 96a:	80 32       	cpi	r24, 0x20	; 32
 96c:	59 f0       	breq	.+22     	; 0x984 <vfprintf+0x80>
 96e:	83 32       	cpi	r24, 0x23	; 35
 970:	69 f4       	brne	.+26     	; 0x98c <vfprintf+0x88>
 972:	20 61       	ori	r18, 0x10	; 16
 974:	2c c0       	rjmp	.+88     	; 0x9ce <vfprintf+0xca>
 976:	8d 32       	cpi	r24, 0x2D	; 45
 978:	39 f0       	breq	.+14     	; 0x988 <vfprintf+0x84>
 97a:	80 33       	cpi	r24, 0x30	; 48
 97c:	39 f4       	brne	.+14     	; 0x98c <vfprintf+0x88>
 97e:	21 60       	ori	r18, 0x01	; 1
 980:	26 c0       	rjmp	.+76     	; 0x9ce <vfprintf+0xca>
 982:	22 60       	ori	r18, 0x02	; 2
 984:	24 60       	ori	r18, 0x04	; 4
 986:	23 c0       	rjmp	.+70     	; 0x9ce <vfprintf+0xca>
 988:	28 60       	ori	r18, 0x08	; 8
 98a:	21 c0       	rjmp	.+66     	; 0x9ce <vfprintf+0xca>
 98c:	27 fd       	sbrc	r18, 7
 98e:	27 c0       	rjmp	.+78     	; 0x9de <vfprintf+0xda>
 990:	30 ed       	ldi	r19, 0xD0	; 208
 992:	38 0f       	add	r19, r24
 994:	3a 30       	cpi	r19, 0x0A	; 10
 996:	78 f4       	brcc	.+30     	; 0x9b6 <vfprintf+0xb2>
 998:	26 ff       	sbrs	r18, 6
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0xa4>
 99c:	fa e0       	ldi	r31, 0x0A	; 10
 99e:	5f 9e       	mul	r5, r31
 9a0:	30 0d       	add	r19, r0
 9a2:	11 24       	eor	r1, r1
 9a4:	53 2e       	mov	r5, r19
 9a6:	13 c0       	rjmp	.+38     	; 0x9ce <vfprintf+0xca>
 9a8:	8a e0       	ldi	r24, 0x0A	; 10
 9aa:	38 9e       	mul	r3, r24
 9ac:	30 0d       	add	r19, r0
 9ae:	11 24       	eor	r1, r1
 9b0:	33 2e       	mov	r3, r19
 9b2:	20 62       	ori	r18, 0x20	; 32
 9b4:	0c c0       	rjmp	.+24     	; 0x9ce <vfprintf+0xca>
 9b6:	8e 32       	cpi	r24, 0x2E	; 46
 9b8:	21 f4       	brne	.+8      	; 0x9c2 <vfprintf+0xbe>
 9ba:	26 fd       	sbrc	r18, 6
 9bc:	6b c1       	rjmp	.+726    	; 0xc94 <vfprintf+0x390>
 9be:	20 64       	ori	r18, 0x40	; 64
 9c0:	06 c0       	rjmp	.+12     	; 0x9ce <vfprintf+0xca>
 9c2:	8c 36       	cpi	r24, 0x6C	; 108
 9c4:	11 f4       	brne	.+4      	; 0x9ca <vfprintf+0xc6>
 9c6:	20 68       	ori	r18, 0x80	; 128
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <vfprintf+0xca>
 9ca:	88 36       	cpi	r24, 0x68	; 104
 9cc:	41 f4       	brne	.+16     	; 0x9de <vfprintf+0xda>
 9ce:	f6 01       	movw	r30, r12
 9d0:	93 fd       	sbrc	r25, 3
 9d2:	85 91       	lpm	r24, Z+
 9d4:	93 ff       	sbrs	r25, 3
 9d6:	81 91       	ld	r24, Z+
 9d8:	6f 01       	movw	r12, r30
 9da:	81 11       	cpse	r24, r1
 9dc:	c1 cf       	rjmp	.-126    	; 0x960 <vfprintf+0x5c>
 9de:	98 2f       	mov	r25, r24
 9e0:	9f 7d       	andi	r25, 0xDF	; 223
 9e2:	95 54       	subi	r25, 0x45	; 69
 9e4:	93 30       	cpi	r25, 0x03	; 3
 9e6:	28 f4       	brcc	.+10     	; 0x9f2 <vfprintf+0xee>
 9e8:	0c 5f       	subi	r16, 0xFC	; 252
 9ea:	1f 4f       	sbci	r17, 0xFF	; 255
 9ec:	ff e3       	ldi	r31, 0x3F	; 63
 9ee:	f9 83       	std	Y+1, r31	; 0x01
 9f0:	0d c0       	rjmp	.+26     	; 0xa0c <vfprintf+0x108>
 9f2:	83 36       	cpi	r24, 0x63	; 99
 9f4:	31 f0       	breq	.+12     	; 0xa02 <vfprintf+0xfe>
 9f6:	83 37       	cpi	r24, 0x73	; 115
 9f8:	71 f0       	breq	.+28     	; 0xa16 <vfprintf+0x112>
 9fa:	83 35       	cpi	r24, 0x53	; 83
 9fc:	09 f0       	breq	.+2      	; 0xa00 <vfprintf+0xfc>
 9fe:	5b c0       	rjmp	.+182    	; 0xab6 <vfprintf+0x1b2>
 a00:	22 c0       	rjmp	.+68     	; 0xa46 <vfprintf+0x142>
 a02:	f8 01       	movw	r30, r16
 a04:	80 81       	ld	r24, Z
 a06:	89 83       	std	Y+1, r24	; 0x01
 a08:	0e 5f       	subi	r16, 0xFE	; 254
 a0a:	1f 4f       	sbci	r17, 0xFF	; 255
 a0c:	44 24       	eor	r4, r4
 a0e:	43 94       	inc	r4
 a10:	51 2c       	mov	r5, r1
 a12:	54 01       	movw	r10, r8
 a14:	15 c0       	rjmp	.+42     	; 0xa40 <vfprintf+0x13c>
 a16:	38 01       	movw	r6, r16
 a18:	f2 e0       	ldi	r31, 0x02	; 2
 a1a:	6f 0e       	add	r6, r31
 a1c:	71 1c       	adc	r7, r1
 a1e:	f8 01       	movw	r30, r16
 a20:	a0 80       	ld	r10, Z
 a22:	b1 80       	ldd	r11, Z+1	; 0x01
 a24:	26 ff       	sbrs	r18, 6
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x12a>
 a28:	65 2d       	mov	r22, r5
 a2a:	70 e0       	ldi	r23, 0x00	; 0
 a2c:	02 c0       	rjmp	.+4      	; 0xa32 <vfprintf+0x12e>
 a2e:	6f ef       	ldi	r22, 0xFF	; 255
 a30:	7f ef       	ldi	r23, 0xFF	; 255
 a32:	c5 01       	movw	r24, r10
 a34:	2c 87       	std	Y+12, r18	; 0x0c
 a36:	0e 94 5f 06 	call	0xcbe	; 0xcbe <strnlen>
 a3a:	2c 01       	movw	r4, r24
 a3c:	83 01       	movw	r16, r6
 a3e:	2c 85       	ldd	r18, Y+12	; 0x0c
 a40:	2f 77       	andi	r18, 0x7F	; 127
 a42:	22 2e       	mov	r2, r18
 a44:	17 c0       	rjmp	.+46     	; 0xa74 <vfprintf+0x170>
 a46:	38 01       	movw	r6, r16
 a48:	f2 e0       	ldi	r31, 0x02	; 2
 a4a:	6f 0e       	add	r6, r31
 a4c:	71 1c       	adc	r7, r1
 a4e:	f8 01       	movw	r30, r16
 a50:	a0 80       	ld	r10, Z
 a52:	b1 80       	ldd	r11, Z+1	; 0x01
 a54:	26 ff       	sbrs	r18, 6
 a56:	03 c0       	rjmp	.+6      	; 0xa5e <vfprintf+0x15a>
 a58:	65 2d       	mov	r22, r5
 a5a:	70 e0       	ldi	r23, 0x00	; 0
 a5c:	02 c0       	rjmp	.+4      	; 0xa62 <vfprintf+0x15e>
 a5e:	6f ef       	ldi	r22, 0xFF	; 255
 a60:	7f ef       	ldi	r23, 0xFF	; 255
 a62:	c5 01       	movw	r24, r10
 a64:	2c 87       	std	Y+12, r18	; 0x0c
 a66:	0e 94 54 06 	call	0xca8	; 0xca8 <strnlen_P>
 a6a:	2c 01       	movw	r4, r24
 a6c:	2c 85       	ldd	r18, Y+12	; 0x0c
 a6e:	20 68       	ori	r18, 0x80	; 128
 a70:	22 2e       	mov	r2, r18
 a72:	83 01       	movw	r16, r6
 a74:	23 fc       	sbrc	r2, 3
 a76:	1b c0       	rjmp	.+54     	; 0xaae <vfprintf+0x1aa>
 a78:	83 2d       	mov	r24, r3
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	48 16       	cp	r4, r24
 a7e:	59 06       	cpc	r5, r25
 a80:	b0 f4       	brcc	.+44     	; 0xaae <vfprintf+0x1aa>
 a82:	b7 01       	movw	r22, r14
 a84:	80 e2       	ldi	r24, 0x20	; 32
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 a8c:	3a 94       	dec	r3
 a8e:	f4 cf       	rjmp	.-24     	; 0xa78 <vfprintf+0x174>
 a90:	f5 01       	movw	r30, r10
 a92:	27 fc       	sbrc	r2, 7
 a94:	85 91       	lpm	r24, Z+
 a96:	27 fe       	sbrs	r2, 7
 a98:	81 91       	ld	r24, Z+
 a9a:	5f 01       	movw	r10, r30
 a9c:	b7 01       	movw	r22, r14
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 aa4:	31 10       	cpse	r3, r1
 aa6:	3a 94       	dec	r3
 aa8:	f1 e0       	ldi	r31, 0x01	; 1
 aaa:	4f 1a       	sub	r4, r31
 aac:	51 08       	sbc	r5, r1
 aae:	41 14       	cp	r4, r1
 ab0:	51 04       	cpc	r5, r1
 ab2:	71 f7       	brne	.-36     	; 0xa90 <vfprintf+0x18c>
 ab4:	e5 c0       	rjmp	.+458    	; 0xc80 <vfprintf+0x37c>
 ab6:	84 36       	cpi	r24, 0x64	; 100
 ab8:	11 f0       	breq	.+4      	; 0xabe <vfprintf+0x1ba>
 aba:	89 36       	cpi	r24, 0x69	; 105
 abc:	39 f5       	brne	.+78     	; 0xb0c <vfprintf+0x208>
 abe:	f8 01       	movw	r30, r16
 ac0:	27 ff       	sbrs	r18, 7
 ac2:	07 c0       	rjmp	.+14     	; 0xad2 <vfprintf+0x1ce>
 ac4:	60 81       	ld	r22, Z
 ac6:	71 81       	ldd	r23, Z+1	; 0x01
 ac8:	82 81       	ldd	r24, Z+2	; 0x02
 aca:	93 81       	ldd	r25, Z+3	; 0x03
 acc:	0c 5f       	subi	r16, 0xFC	; 252
 ace:	1f 4f       	sbci	r17, 0xFF	; 255
 ad0:	08 c0       	rjmp	.+16     	; 0xae2 <vfprintf+0x1de>
 ad2:	60 81       	ld	r22, Z
 ad4:	71 81       	ldd	r23, Z+1	; 0x01
 ad6:	07 2e       	mov	r0, r23
 ad8:	00 0c       	add	r0, r0
 ada:	88 0b       	sbc	r24, r24
 adc:	99 0b       	sbc	r25, r25
 ade:	0e 5f       	subi	r16, 0xFE	; 254
 ae0:	1f 4f       	sbci	r17, 0xFF	; 255
 ae2:	2f 76       	andi	r18, 0x6F	; 111
 ae4:	72 2e       	mov	r7, r18
 ae6:	97 ff       	sbrs	r25, 7
 ae8:	09 c0       	rjmp	.+18     	; 0xafc <vfprintf+0x1f8>
 aea:	90 95       	com	r25
 aec:	80 95       	com	r24
 aee:	70 95       	com	r23
 af0:	61 95       	neg	r22
 af2:	7f 4f       	sbci	r23, 0xFF	; 255
 af4:	8f 4f       	sbci	r24, 0xFF	; 255
 af6:	9f 4f       	sbci	r25, 0xFF	; 255
 af8:	20 68       	ori	r18, 0x80	; 128
 afa:	72 2e       	mov	r7, r18
 afc:	2a e0       	ldi	r18, 0x0A	; 10
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	a4 01       	movw	r20, r8
 b02:	0e 94 a2 06 	call	0xd44	; 0xd44 <__ultoa_invert>
 b06:	a8 2e       	mov	r10, r24
 b08:	a8 18       	sub	r10, r8
 b0a:	44 c0       	rjmp	.+136    	; 0xb94 <vfprintf+0x290>
 b0c:	85 37       	cpi	r24, 0x75	; 117
 b0e:	29 f4       	brne	.+10     	; 0xb1a <vfprintf+0x216>
 b10:	2f 7e       	andi	r18, 0xEF	; 239
 b12:	b2 2e       	mov	r11, r18
 b14:	2a e0       	ldi	r18, 0x0A	; 10
 b16:	30 e0       	ldi	r19, 0x00	; 0
 b18:	25 c0       	rjmp	.+74     	; 0xb64 <vfprintf+0x260>
 b1a:	f2 2f       	mov	r31, r18
 b1c:	f9 7f       	andi	r31, 0xF9	; 249
 b1e:	bf 2e       	mov	r11, r31
 b20:	8f 36       	cpi	r24, 0x6F	; 111
 b22:	c1 f0       	breq	.+48     	; 0xb54 <vfprintf+0x250>
 b24:	18 f4       	brcc	.+6      	; 0xb2c <vfprintf+0x228>
 b26:	88 35       	cpi	r24, 0x58	; 88
 b28:	79 f0       	breq	.+30     	; 0xb48 <vfprintf+0x244>
 b2a:	b4 c0       	rjmp	.+360    	; 0xc94 <vfprintf+0x390>
 b2c:	80 37       	cpi	r24, 0x70	; 112
 b2e:	19 f0       	breq	.+6      	; 0xb36 <vfprintf+0x232>
 b30:	88 37       	cpi	r24, 0x78	; 120
 b32:	21 f0       	breq	.+8      	; 0xb3c <vfprintf+0x238>
 b34:	af c0       	rjmp	.+350    	; 0xc94 <vfprintf+0x390>
 b36:	2f 2f       	mov	r18, r31
 b38:	20 61       	ori	r18, 0x10	; 16
 b3a:	b2 2e       	mov	r11, r18
 b3c:	b4 fe       	sbrs	r11, 4
 b3e:	0d c0       	rjmp	.+26     	; 0xb5a <vfprintf+0x256>
 b40:	8b 2d       	mov	r24, r11
 b42:	84 60       	ori	r24, 0x04	; 4
 b44:	b8 2e       	mov	r11, r24
 b46:	09 c0       	rjmp	.+18     	; 0xb5a <vfprintf+0x256>
 b48:	24 ff       	sbrs	r18, 4
 b4a:	0a c0       	rjmp	.+20     	; 0xb60 <vfprintf+0x25c>
 b4c:	9f 2f       	mov	r25, r31
 b4e:	96 60       	ori	r25, 0x06	; 6
 b50:	b9 2e       	mov	r11, r25
 b52:	06 c0       	rjmp	.+12     	; 0xb60 <vfprintf+0x25c>
 b54:	28 e0       	ldi	r18, 0x08	; 8
 b56:	30 e0       	ldi	r19, 0x00	; 0
 b58:	05 c0       	rjmp	.+10     	; 0xb64 <vfprintf+0x260>
 b5a:	20 e1       	ldi	r18, 0x10	; 16
 b5c:	30 e0       	ldi	r19, 0x00	; 0
 b5e:	02 c0       	rjmp	.+4      	; 0xb64 <vfprintf+0x260>
 b60:	20 e1       	ldi	r18, 0x10	; 16
 b62:	32 e0       	ldi	r19, 0x02	; 2
 b64:	f8 01       	movw	r30, r16
 b66:	b7 fe       	sbrs	r11, 7
 b68:	07 c0       	rjmp	.+14     	; 0xb78 <vfprintf+0x274>
 b6a:	60 81       	ld	r22, Z
 b6c:	71 81       	ldd	r23, Z+1	; 0x01
 b6e:	82 81       	ldd	r24, Z+2	; 0x02
 b70:	93 81       	ldd	r25, Z+3	; 0x03
 b72:	0c 5f       	subi	r16, 0xFC	; 252
 b74:	1f 4f       	sbci	r17, 0xFF	; 255
 b76:	06 c0       	rjmp	.+12     	; 0xb84 <vfprintf+0x280>
 b78:	60 81       	ld	r22, Z
 b7a:	71 81       	ldd	r23, Z+1	; 0x01
 b7c:	80 e0       	ldi	r24, 0x00	; 0
 b7e:	90 e0       	ldi	r25, 0x00	; 0
 b80:	0e 5f       	subi	r16, 0xFE	; 254
 b82:	1f 4f       	sbci	r17, 0xFF	; 255
 b84:	a4 01       	movw	r20, r8
 b86:	0e 94 a2 06 	call	0xd44	; 0xd44 <__ultoa_invert>
 b8a:	a8 2e       	mov	r10, r24
 b8c:	a8 18       	sub	r10, r8
 b8e:	fb 2d       	mov	r31, r11
 b90:	ff 77       	andi	r31, 0x7F	; 127
 b92:	7f 2e       	mov	r7, r31
 b94:	76 fe       	sbrs	r7, 6
 b96:	0b c0       	rjmp	.+22     	; 0xbae <vfprintf+0x2aa>
 b98:	37 2d       	mov	r19, r7
 b9a:	3e 7f       	andi	r19, 0xFE	; 254
 b9c:	a5 14       	cp	r10, r5
 b9e:	50 f4       	brcc	.+20     	; 0xbb4 <vfprintf+0x2b0>
 ba0:	74 fe       	sbrs	r7, 4
 ba2:	0a c0       	rjmp	.+20     	; 0xbb8 <vfprintf+0x2b4>
 ba4:	72 fc       	sbrc	r7, 2
 ba6:	08 c0       	rjmp	.+16     	; 0xbb8 <vfprintf+0x2b4>
 ba8:	37 2d       	mov	r19, r7
 baa:	3e 7e       	andi	r19, 0xEE	; 238
 bac:	05 c0       	rjmp	.+10     	; 0xbb8 <vfprintf+0x2b4>
 bae:	ba 2c       	mov	r11, r10
 bb0:	37 2d       	mov	r19, r7
 bb2:	03 c0       	rjmp	.+6      	; 0xbba <vfprintf+0x2b6>
 bb4:	ba 2c       	mov	r11, r10
 bb6:	01 c0       	rjmp	.+2      	; 0xbba <vfprintf+0x2b6>
 bb8:	b5 2c       	mov	r11, r5
 bba:	34 ff       	sbrs	r19, 4
 bbc:	0d c0       	rjmp	.+26     	; 0xbd8 <vfprintf+0x2d4>
 bbe:	fe 01       	movw	r30, r28
 bc0:	ea 0d       	add	r30, r10
 bc2:	f1 1d       	adc	r31, r1
 bc4:	80 81       	ld	r24, Z
 bc6:	80 33       	cpi	r24, 0x30	; 48
 bc8:	11 f4       	brne	.+4      	; 0xbce <vfprintf+0x2ca>
 bca:	39 7e       	andi	r19, 0xE9	; 233
 bcc:	09 c0       	rjmp	.+18     	; 0xbe0 <vfprintf+0x2dc>
 bce:	32 ff       	sbrs	r19, 2
 bd0:	06 c0       	rjmp	.+12     	; 0xbde <vfprintf+0x2da>
 bd2:	b3 94       	inc	r11
 bd4:	b3 94       	inc	r11
 bd6:	04 c0       	rjmp	.+8      	; 0xbe0 <vfprintf+0x2dc>
 bd8:	83 2f       	mov	r24, r19
 bda:	86 78       	andi	r24, 0x86	; 134
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <vfprintf+0x2dc>
 bde:	b3 94       	inc	r11
 be0:	33 fd       	sbrc	r19, 3
 be2:	13 c0       	rjmp	.+38     	; 0xc0a <vfprintf+0x306>
 be4:	30 ff       	sbrs	r19, 0
 be6:	06 c0       	rjmp	.+12     	; 0xbf4 <vfprintf+0x2f0>
 be8:	5a 2c       	mov	r5, r10
 bea:	b3 14       	cp	r11, r3
 bec:	18 f4       	brcc	.+6      	; 0xbf4 <vfprintf+0x2f0>
 bee:	53 0c       	add	r5, r3
 bf0:	5b 18       	sub	r5, r11
 bf2:	b3 2c       	mov	r11, r3
 bf4:	b3 14       	cp	r11, r3
 bf6:	68 f4       	brcc	.+26     	; 0xc12 <vfprintf+0x30e>
 bf8:	b7 01       	movw	r22, r14
 bfa:	80 e2       	ldi	r24, 0x20	; 32
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	3c 87       	std	Y+12, r19	; 0x0c
 c00:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 c04:	b3 94       	inc	r11
 c06:	3c 85       	ldd	r19, Y+12	; 0x0c
 c08:	f5 cf       	rjmp	.-22     	; 0xbf4 <vfprintf+0x2f0>
 c0a:	b3 14       	cp	r11, r3
 c0c:	10 f4       	brcc	.+4      	; 0xc12 <vfprintf+0x30e>
 c0e:	3b 18       	sub	r3, r11
 c10:	01 c0       	rjmp	.+2      	; 0xc14 <vfprintf+0x310>
 c12:	31 2c       	mov	r3, r1
 c14:	34 ff       	sbrs	r19, 4
 c16:	12 c0       	rjmp	.+36     	; 0xc3c <vfprintf+0x338>
 c18:	b7 01       	movw	r22, r14
 c1a:	80 e3       	ldi	r24, 0x30	; 48
 c1c:	90 e0       	ldi	r25, 0x00	; 0
 c1e:	3c 87       	std	Y+12, r19	; 0x0c
 c20:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 c24:	3c 85       	ldd	r19, Y+12	; 0x0c
 c26:	32 ff       	sbrs	r19, 2
 c28:	17 c0       	rjmp	.+46     	; 0xc58 <vfprintf+0x354>
 c2a:	31 fd       	sbrc	r19, 1
 c2c:	03 c0       	rjmp	.+6      	; 0xc34 <vfprintf+0x330>
 c2e:	88 e7       	ldi	r24, 0x78	; 120
 c30:	90 e0       	ldi	r25, 0x00	; 0
 c32:	02 c0       	rjmp	.+4      	; 0xc38 <vfprintf+0x334>
 c34:	88 e5       	ldi	r24, 0x58	; 88
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	b7 01       	movw	r22, r14
 c3a:	0c c0       	rjmp	.+24     	; 0xc54 <vfprintf+0x350>
 c3c:	83 2f       	mov	r24, r19
 c3e:	86 78       	andi	r24, 0x86	; 134
 c40:	59 f0       	breq	.+22     	; 0xc58 <vfprintf+0x354>
 c42:	31 ff       	sbrs	r19, 1
 c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x346>
 c46:	8b e2       	ldi	r24, 0x2B	; 43
 c48:	01 c0       	rjmp	.+2      	; 0xc4c <vfprintf+0x348>
 c4a:	80 e2       	ldi	r24, 0x20	; 32
 c4c:	37 fd       	sbrc	r19, 7
 c4e:	8d e2       	ldi	r24, 0x2D	; 45
 c50:	b7 01       	movw	r22, r14
 c52:	90 e0       	ldi	r25, 0x00	; 0
 c54:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 c58:	a5 14       	cp	r10, r5
 c5a:	38 f4       	brcc	.+14     	; 0xc6a <vfprintf+0x366>
 c5c:	b7 01       	movw	r22, r14
 c5e:	80 e3       	ldi	r24, 0x30	; 48
 c60:	90 e0       	ldi	r25, 0x00	; 0
 c62:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 c66:	5a 94       	dec	r5
 c68:	f7 cf       	rjmp	.-18     	; 0xc58 <vfprintf+0x354>
 c6a:	aa 94       	dec	r10
 c6c:	f4 01       	movw	r30, r8
 c6e:	ea 0d       	add	r30, r10
 c70:	f1 1d       	adc	r31, r1
 c72:	80 81       	ld	r24, Z
 c74:	b7 01       	movw	r22, r14
 c76:	90 e0       	ldi	r25, 0x00	; 0
 c78:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 c7c:	a1 10       	cpse	r10, r1
 c7e:	f5 cf       	rjmp	.-22     	; 0xc6a <vfprintf+0x366>
 c80:	33 20       	and	r3, r3
 c82:	09 f4       	brne	.+2      	; 0xc86 <vfprintf+0x382>
 c84:	51 ce       	rjmp	.-862    	; 0x928 <vfprintf+0x24>
 c86:	b7 01       	movw	r22, r14
 c88:	80 e2       	ldi	r24, 0x20	; 32
 c8a:	90 e0       	ldi	r25, 0x00	; 0
 c8c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <fputc>
 c90:	3a 94       	dec	r3
 c92:	f6 cf       	rjmp	.-20     	; 0xc80 <vfprintf+0x37c>
 c94:	f7 01       	movw	r30, r14
 c96:	86 81       	ldd	r24, Z+6	; 0x06
 c98:	97 81       	ldd	r25, Z+7	; 0x07
 c9a:	02 c0       	rjmp	.+4      	; 0xca0 <vfprintf+0x39c>
 c9c:	8f ef       	ldi	r24, 0xFF	; 255
 c9e:	9f ef       	ldi	r25, 0xFF	; 255
 ca0:	2c 96       	adiw	r28, 0x0c	; 12
 ca2:	e2 e1       	ldi	r30, 0x12	; 18
 ca4:	0c 94 1c 07 	jmp	0xe38	; 0xe38 <__epilogue_restores__>

00000ca8 <strnlen_P>:
 ca8:	fc 01       	movw	r30, r24
 caa:	05 90       	lpm	r0, Z+
 cac:	61 50       	subi	r22, 0x01	; 1
 cae:	70 40       	sbci	r23, 0x00	; 0
 cb0:	01 10       	cpse	r0, r1
 cb2:	d8 f7       	brcc	.-10     	; 0xcaa <strnlen_P+0x2>
 cb4:	80 95       	com	r24
 cb6:	90 95       	com	r25
 cb8:	8e 0f       	add	r24, r30
 cba:	9f 1f       	adc	r25, r31
 cbc:	08 95       	ret

00000cbe <strnlen>:
 cbe:	fc 01       	movw	r30, r24
 cc0:	61 50       	subi	r22, 0x01	; 1
 cc2:	70 40       	sbci	r23, 0x00	; 0
 cc4:	01 90       	ld	r0, Z+
 cc6:	01 10       	cpse	r0, r1
 cc8:	d8 f7       	brcc	.-10     	; 0xcc0 <strnlen+0x2>
 cca:	80 95       	com	r24
 ccc:	90 95       	com	r25
 cce:	8e 0f       	add	r24, r30
 cd0:	9f 1f       	adc	r25, r31
 cd2:	08 95       	ret

00000cd4 <fputc>:
 cd4:	0f 93       	push	r16
 cd6:	1f 93       	push	r17
 cd8:	cf 93       	push	r28
 cda:	df 93       	push	r29
 cdc:	fb 01       	movw	r30, r22
 cde:	23 81       	ldd	r18, Z+3	; 0x03
 ce0:	21 fd       	sbrc	r18, 1
 ce2:	03 c0       	rjmp	.+6      	; 0xcea <fputc+0x16>
 ce4:	8f ef       	ldi	r24, 0xFF	; 255
 ce6:	9f ef       	ldi	r25, 0xFF	; 255
 ce8:	28 c0       	rjmp	.+80     	; 0xd3a <fputc+0x66>
 cea:	22 ff       	sbrs	r18, 2
 cec:	16 c0       	rjmp	.+44     	; 0xd1a <fputc+0x46>
 cee:	46 81       	ldd	r20, Z+6	; 0x06
 cf0:	57 81       	ldd	r21, Z+7	; 0x07
 cf2:	24 81       	ldd	r18, Z+4	; 0x04
 cf4:	35 81       	ldd	r19, Z+5	; 0x05
 cf6:	42 17       	cp	r20, r18
 cf8:	53 07       	cpc	r21, r19
 cfa:	44 f4       	brge	.+16     	; 0xd0c <fputc+0x38>
 cfc:	a0 81       	ld	r26, Z
 cfe:	b1 81       	ldd	r27, Z+1	; 0x01
 d00:	9d 01       	movw	r18, r26
 d02:	2f 5f       	subi	r18, 0xFF	; 255
 d04:	3f 4f       	sbci	r19, 0xFF	; 255
 d06:	31 83       	std	Z+1, r19	; 0x01
 d08:	20 83       	st	Z, r18
 d0a:	8c 93       	st	X, r24
 d0c:	26 81       	ldd	r18, Z+6	; 0x06
 d0e:	37 81       	ldd	r19, Z+7	; 0x07
 d10:	2f 5f       	subi	r18, 0xFF	; 255
 d12:	3f 4f       	sbci	r19, 0xFF	; 255
 d14:	37 83       	std	Z+7, r19	; 0x07
 d16:	26 83       	std	Z+6, r18	; 0x06
 d18:	10 c0       	rjmp	.+32     	; 0xd3a <fputc+0x66>
 d1a:	eb 01       	movw	r28, r22
 d1c:	09 2f       	mov	r16, r25
 d1e:	18 2f       	mov	r17, r24
 d20:	00 84       	ldd	r0, Z+8	; 0x08
 d22:	f1 85       	ldd	r31, Z+9	; 0x09
 d24:	e0 2d       	mov	r30, r0
 d26:	09 95       	icall
 d28:	89 2b       	or	r24, r25
 d2a:	e1 f6       	brne	.-72     	; 0xce4 <fputc+0x10>
 d2c:	8e 81       	ldd	r24, Y+6	; 0x06
 d2e:	9f 81       	ldd	r25, Y+7	; 0x07
 d30:	01 96       	adiw	r24, 0x01	; 1
 d32:	9f 83       	std	Y+7, r25	; 0x07
 d34:	8e 83       	std	Y+6, r24	; 0x06
 d36:	81 2f       	mov	r24, r17
 d38:	90 2f       	mov	r25, r16
 d3a:	df 91       	pop	r29
 d3c:	cf 91       	pop	r28
 d3e:	1f 91       	pop	r17
 d40:	0f 91       	pop	r16
 d42:	08 95       	ret

00000d44 <__ultoa_invert>:
 d44:	fa 01       	movw	r30, r20
 d46:	aa 27       	eor	r26, r26
 d48:	28 30       	cpi	r18, 0x08	; 8
 d4a:	51 f1       	breq	.+84     	; 0xda0 <__ultoa_invert+0x5c>
 d4c:	20 31       	cpi	r18, 0x10	; 16
 d4e:	81 f1       	breq	.+96     	; 0xdb0 <__ultoa_invert+0x6c>
 d50:	e8 94       	clt
 d52:	6f 93       	push	r22
 d54:	6e 7f       	andi	r22, 0xFE	; 254
 d56:	6e 5f       	subi	r22, 0xFE	; 254
 d58:	7f 4f       	sbci	r23, 0xFF	; 255
 d5a:	8f 4f       	sbci	r24, 0xFF	; 255
 d5c:	9f 4f       	sbci	r25, 0xFF	; 255
 d5e:	af 4f       	sbci	r26, 0xFF	; 255
 d60:	b1 e0       	ldi	r27, 0x01	; 1
 d62:	3e d0       	rcall	.+124    	; 0xde0 <__ultoa_invert+0x9c>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	3c d0       	rcall	.+120    	; 0xde0 <__ultoa_invert+0x9c>
 d68:	67 0f       	add	r22, r23
 d6a:	78 1f       	adc	r23, r24
 d6c:	89 1f       	adc	r24, r25
 d6e:	9a 1f       	adc	r25, r26
 d70:	a1 1d       	adc	r26, r1
 d72:	68 0f       	add	r22, r24
 d74:	79 1f       	adc	r23, r25
 d76:	8a 1f       	adc	r24, r26
 d78:	91 1d       	adc	r25, r1
 d7a:	a1 1d       	adc	r26, r1
 d7c:	6a 0f       	add	r22, r26
 d7e:	71 1d       	adc	r23, r1
 d80:	81 1d       	adc	r24, r1
 d82:	91 1d       	adc	r25, r1
 d84:	a1 1d       	adc	r26, r1
 d86:	20 d0       	rcall	.+64     	; 0xdc8 <__ultoa_invert+0x84>
 d88:	09 f4       	brne	.+2      	; 0xd8c <__ultoa_invert+0x48>
 d8a:	68 94       	set
 d8c:	3f 91       	pop	r19
 d8e:	2a e0       	ldi	r18, 0x0A	; 10
 d90:	26 9f       	mul	r18, r22
 d92:	11 24       	eor	r1, r1
 d94:	30 19       	sub	r19, r0
 d96:	30 5d       	subi	r19, 0xD0	; 208
 d98:	31 93       	st	Z+, r19
 d9a:	de f6       	brtc	.-74     	; 0xd52 <__ultoa_invert+0xe>
 d9c:	cf 01       	movw	r24, r30
 d9e:	08 95       	ret
 da0:	46 2f       	mov	r20, r22
 da2:	47 70       	andi	r20, 0x07	; 7
 da4:	40 5d       	subi	r20, 0xD0	; 208
 da6:	41 93       	st	Z+, r20
 da8:	b3 e0       	ldi	r27, 0x03	; 3
 daa:	0f d0       	rcall	.+30     	; 0xdca <__ultoa_invert+0x86>
 dac:	c9 f7       	brne	.-14     	; 0xda0 <__ultoa_invert+0x5c>
 dae:	f6 cf       	rjmp	.-20     	; 0xd9c <__ultoa_invert+0x58>
 db0:	46 2f       	mov	r20, r22
 db2:	4f 70       	andi	r20, 0x0F	; 15
 db4:	40 5d       	subi	r20, 0xD0	; 208
 db6:	4a 33       	cpi	r20, 0x3A	; 58
 db8:	18 f0       	brcs	.+6      	; 0xdc0 <__ultoa_invert+0x7c>
 dba:	49 5d       	subi	r20, 0xD9	; 217
 dbc:	31 fd       	sbrc	r19, 1
 dbe:	40 52       	subi	r20, 0x20	; 32
 dc0:	41 93       	st	Z+, r20
 dc2:	02 d0       	rcall	.+4      	; 0xdc8 <__ultoa_invert+0x84>
 dc4:	a9 f7       	brne	.-22     	; 0xdb0 <__ultoa_invert+0x6c>
 dc6:	ea cf       	rjmp	.-44     	; 0xd9c <__ultoa_invert+0x58>
 dc8:	b4 e0       	ldi	r27, 0x04	; 4
 dca:	a6 95       	lsr	r26
 dcc:	97 95       	ror	r25
 dce:	87 95       	ror	r24
 dd0:	77 95       	ror	r23
 dd2:	67 95       	ror	r22
 dd4:	ba 95       	dec	r27
 dd6:	c9 f7       	brne	.-14     	; 0xdca <__ultoa_invert+0x86>
 dd8:	00 97       	sbiw	r24, 0x00	; 0
 dda:	61 05       	cpc	r22, r1
 ddc:	71 05       	cpc	r23, r1
 dde:	08 95       	ret
 de0:	9b 01       	movw	r18, r22
 de2:	ac 01       	movw	r20, r24
 de4:	0a 2e       	mov	r0, r26
 de6:	06 94       	lsr	r0
 de8:	57 95       	ror	r21
 dea:	47 95       	ror	r20
 dec:	37 95       	ror	r19
 dee:	27 95       	ror	r18
 df0:	ba 95       	dec	r27
 df2:	c9 f7       	brne	.-14     	; 0xde6 <__ultoa_invert+0xa2>
 df4:	62 0f       	add	r22, r18
 df6:	73 1f       	adc	r23, r19
 df8:	84 1f       	adc	r24, r20
 dfa:	95 1f       	adc	r25, r21
 dfc:	a0 1d       	adc	r26, r0
 dfe:	08 95       	ret

00000e00 <__prologue_saves__>:
 e00:	2f 92       	push	r2
 e02:	3f 92       	push	r3
 e04:	4f 92       	push	r4
 e06:	5f 92       	push	r5
 e08:	6f 92       	push	r6
 e0a:	7f 92       	push	r7
 e0c:	8f 92       	push	r8
 e0e:	9f 92       	push	r9
 e10:	af 92       	push	r10
 e12:	bf 92       	push	r11
 e14:	cf 92       	push	r12
 e16:	df 92       	push	r13
 e18:	ef 92       	push	r14
 e1a:	ff 92       	push	r15
 e1c:	0f 93       	push	r16
 e1e:	1f 93       	push	r17
 e20:	cf 93       	push	r28
 e22:	df 93       	push	r29
 e24:	cd b7       	in	r28, 0x3d	; 61
 e26:	de b7       	in	r29, 0x3e	; 62
 e28:	ca 1b       	sub	r28, r26
 e2a:	db 0b       	sbc	r29, r27
 e2c:	0f b6       	in	r0, 0x3f	; 63
 e2e:	f8 94       	cli
 e30:	de bf       	out	0x3e, r29	; 62
 e32:	0f be       	out	0x3f, r0	; 63
 e34:	cd bf       	out	0x3d, r28	; 61
 e36:	09 94       	ijmp

00000e38 <__epilogue_restores__>:
 e38:	2a 88       	ldd	r2, Y+18	; 0x12
 e3a:	39 88       	ldd	r3, Y+17	; 0x11
 e3c:	48 88       	ldd	r4, Y+16	; 0x10
 e3e:	5f 84       	ldd	r5, Y+15	; 0x0f
 e40:	6e 84       	ldd	r6, Y+14	; 0x0e
 e42:	7d 84       	ldd	r7, Y+13	; 0x0d
 e44:	8c 84       	ldd	r8, Y+12	; 0x0c
 e46:	9b 84       	ldd	r9, Y+11	; 0x0b
 e48:	aa 84       	ldd	r10, Y+10	; 0x0a
 e4a:	b9 84       	ldd	r11, Y+9	; 0x09
 e4c:	c8 84       	ldd	r12, Y+8	; 0x08
 e4e:	df 80       	ldd	r13, Y+7	; 0x07
 e50:	ee 80       	ldd	r14, Y+6	; 0x06
 e52:	fd 80       	ldd	r15, Y+5	; 0x05
 e54:	0c 81       	ldd	r16, Y+4	; 0x04
 e56:	1b 81       	ldd	r17, Y+3	; 0x03
 e58:	aa 81       	ldd	r26, Y+2	; 0x02
 e5a:	b9 81       	ldd	r27, Y+1	; 0x01
 e5c:	ce 0f       	add	r28, r30
 e5e:	d1 1d       	adc	r29, r1
 e60:	0f b6       	in	r0, 0x3f	; 63
 e62:	f8 94       	cli
 e64:	de bf       	out	0x3e, r29	; 62
 e66:	0f be       	out	0x3f, r0	; 63
 e68:	cd bf       	out	0x3d, r28	; 61
 e6a:	ed 01       	movw	r28, r26
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
