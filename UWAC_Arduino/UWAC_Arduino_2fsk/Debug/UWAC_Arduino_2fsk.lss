
UWAC_Arduino_2fsk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b2  00800200  00000d3e  00000dd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000032c  008002b2  008002b2  00000e84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00000f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a31  00000000  00000000  00000fd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000052e  00000000  00000000  00001a01  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006dd  00000000  00000000  00001f2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000208  00000000  00000000  0000260c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  00002814  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a6e  00000000  00000000  00002b79  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  000035e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ee e3       	ldi	r30, 0x3E	; 62
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 3b       	cpi	r26, 0xB2	; 178
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	25 e0       	ldi	r18, 0x05	; 5
 110:	a2 eb       	ldi	r26, 0xB2	; 178
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ae 3d       	cpi	r26, 0xDE	; 222
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	4a d2       	rcall	.+1172   	; 0x5b4 <main>
 120:	0c c6       	rjmp	.+3096   	; 0xd3a <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CRC>:
 * @param received Is the data received or not
 *
 * @return The generated checksum
*/
int CRC(uint8_t data[100], int length, uint16_t poly, bool received)
{
 124:	2f 92       	push	r2
 126:	3f 92       	push	r3
 128:	4f 92       	push	r4
 12a:	5f 92       	push	r5
 12c:	6f 92       	push	r6
 12e:	7f 92       	push	r7
 130:	8f 92       	push	r8
 132:	9f 92       	push	r9
 134:	af 92       	push	r10
 136:	bf 92       	push	r11
 138:	cf 92       	push	r12
 13a:	df 92       	push	r13
 13c:	ef 92       	push	r14
 13e:	ff 92       	push	r15
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	cd b7       	in	r28, 0x3d	; 61
 14a:	de b7       	in	r29, 0x3e	; 62
 14c:	60 97       	sbiw	r28, 0x10	; 16
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
 158:	16 16       	cp	r1, r22
 15a:	17 06       	cpc	r1, r23
 15c:	0c f0       	brlt	.+2      	; 0x160 <CRC+0x3c>
 15e:	80 c0       	rjmp	.+256    	; 0x260 <CRC+0x13c>
 160:	fc 01       	movw	r30, r24
 162:	68 0f       	add	r22, r24
 164:	79 1f       	adc	r23, r25
 166:	61 2c       	mov	r6, r1
 168:	71 2c       	mov	r7, r1
    {
        #ifdef DEBUG // Debugging
        printf("Data: %i, ", (uint8_t)data[i]);
        #endif // DEBUG

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
 16a:	76 2c       	mov	r7, r6
 16c:	66 24       	eor	r6, r6
 16e:	81 91       	ld	r24, Z+
 170:	68 2a       	or	r6, r24
    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
 172:	e6 17       	cp	r30, r22
 174:	f7 07       	cpc	r31, r23
 176:	c9 f7       	brne	.-14     	; 0x16a <CRC+0x46>

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 178:	21 11       	cpse	r18, r1
 17a:	02 c0       	rjmp	.+4      	; 0x180 <CRC+0x5c>
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
 17c:	76 2c       	mov	r7, r6
 17e:	66 24       	eor	r6, r6
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 180:	6a 01       	movw	r12, r20
 182:	e1 2c       	mov	r14, r1
 184:	f1 2c       	mov	r15, r1
 186:	00 e0       	ldi	r16, 0x00	; 0
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	98 01       	movw	r18, r16
 18c:	49 87       	std	Y+9, r20	; 0x09
 18e:	da 86       	std	Y+10, r13	; 0x0a
 190:	eb 86       	std	Y+11, r14	; 0x0b
 192:	fc 86       	std	Y+12, r15	; 0x0c
 194:	0d 87       	std	Y+13, r16	; 0x0d
 196:	1e 87       	std	Y+14, r17	; 0x0e
 198:	2f 87       	std	Y+15, r18	; 0x0f
 19a:	38 8b       	std	Y+16, r19	; 0x10
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 19c:	0f ef       	ldi	r16, 0xFF	; 255
 19e:	60 16       	cp	r6, r16
 1a0:	71 04       	cpc	r7, r1
 1a2:	08 f4       	brcc	.+2      	; 0x1a6 <CRC+0x82>
 1a4:	62 c0       	rjmp	.+196    	; 0x26a <CRC+0x146>
        while (calcPoly < allData)
 1a6:	93 01       	movw	r18, r6
 1a8:	40 e0       	ldi	r20, 0x00	; 0
 1aa:	50 e0       	ldi	r21, 0x00	; 0
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	70 e0       	ldi	r23, 0x00	; 0
 1b0:	cb 01       	movw	r24, r22
 1b2:	69 82       	std	Y+1, r6	; 0x01
 1b4:	3a 83       	std	Y+2, r19	; 0x02
 1b6:	4b 83       	std	Y+3, r20	; 0x03
 1b8:	5c 83       	std	Y+4, r21	; 0x04
 1ba:	6d 83       	std	Y+5, r22	; 0x05
 1bc:	7e 83       	std	Y+6, r23	; 0x06
 1be:	8f 83       	std	Y+7, r24	; 0x07
 1c0:	98 87       	std	Y+8, r25	; 0x08
 1c2:	29 85       	ldd	r18, Y+9	; 0x09
 1c4:	3a 85       	ldd	r19, Y+10	; 0x0a
 1c6:	4b 85       	ldd	r20, Y+11	; 0x0b
 1c8:	5c 85       	ldd	r21, Y+12	; 0x0c
 1ca:	6d 85       	ldd	r22, Y+13	; 0x0d
 1cc:	7e 85       	ldd	r23, Y+14	; 0x0e
 1ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 1d0:	98 89       	ldd	r25, Y+16	; 0x10
 1d2:	a9 80       	ldd	r10, Y+1	; 0x01
 1d4:	ba 80       	ldd	r11, Y+2	; 0x02
 1d6:	c1 2c       	mov	r12, r1
 1d8:	d1 2c       	mov	r13, r1
 1da:	e1 2c       	mov	r14, r1
 1dc:	f1 2c       	mov	r15, r1
 1de:	00 e0       	ldi	r16, 0x00	; 0
 1e0:	10 e0       	ldi	r17, 0x00	; 0
 1e2:	c5 d2       	rcall	.+1418   	; 0x76e <__cmpdi2>
 1e4:	80 f5       	brcc	.+96     	; 0x246 <CRC+0x122>
 1e6:	82 2e       	mov	r8, r18
 1e8:	93 2e       	mov	r9, r19
 1ea:	24 2e       	mov	r2, r20
 1ec:	55 2e       	mov	r5, r21
 1ee:	46 2e       	mov	r4, r22
 1f0:	37 2e       	mov	r3, r23
 1f2:	f8 2f       	mov	r31, r24
 1f4:	e9 2f       	mov	r30, r25
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
 1f6:	28 2d       	mov	r18, r8
 1f8:	39 2d       	mov	r19, r9
 1fa:	42 2d       	mov	r20, r2
 1fc:	55 2d       	mov	r21, r5
 1fe:	64 2d       	mov	r22, r4
 200:	73 2d       	mov	r23, r3
 202:	8f 2f       	mov	r24, r31
 204:	9e 2f       	mov	r25, r30
 206:	01 e0       	ldi	r16, 0x01	; 1
 208:	7b d2       	rcall	.+1270   	; 0x700 <__ashldi3>
 20a:	82 2e       	mov	r8, r18
 20c:	93 2e       	mov	r9, r19
 20e:	24 2e       	mov	r2, r20
 210:	55 2e       	mov	r5, r21
 212:	46 2e       	mov	r4, r22
 214:	37 2e       	mov	r3, r23
 216:	f8 2f       	mov	r31, r24
 218:	e9 2f       	mov	r30, r25
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
 21a:	a9 80       	ldd	r10, Y+1	; 0x01
 21c:	ba 80       	ldd	r11, Y+2	; 0x02
 21e:	cb 80       	ldd	r12, Y+3	; 0x03
 220:	dc 80       	ldd	r13, Y+4	; 0x04
 222:	ed 80       	ldd	r14, Y+5	; 0x05
 224:	fe 80       	ldd	r15, Y+6	; 0x06
 226:	0f 81       	ldd	r16, Y+7	; 0x07
 228:	18 85       	ldd	r17, Y+8	; 0x08
 22a:	a1 d2       	rcall	.+1346   	; 0x76e <__cmpdi2>
 22c:	20 f3       	brcs	.-56     	; 0x1f6 <CRC+0xd2>
 22e:	55 2d       	mov	r21, r5
 230:	8f 2f       	mov	r24, r31
 232:	9e 2f       	mov	r25, r30
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one
 234:	28 2d       	mov	r18, r8
 236:	39 2d       	mov	r19, r9
 238:	64 2d       	mov	r22, r4
 23a:	73 2d       	mov	r23, r3
 23c:	01 e0       	ldi	r16, 0x01	; 1
 23e:	7b d2       	rcall	.+1270   	; 0x736 <__lshrdi3>
 240:	82 2e       	mov	r8, r18
 242:	93 2e       	mov	r9, r19
 244:	02 c0       	rjmp	.+4      	; 0x24a <CRC+0x126>
    if (!received) // Check if the data is received or not
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 246:	89 84       	ldd	r8, Y+9	; 0x09
 248:	9a 84       	ldd	r9, Y+10	; 0x0a

        #ifdef DEBUG // Debugging
        printf("%i^%i=", allData, calcPoly);
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR
 24a:	68 24       	eor	r6, r8
 24c:	79 24       	eor	r7, r9
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 24e:	3f ef       	ldi	r19, 0xFF	; 255
 250:	63 16       	cp	r6, r19
 252:	71 04       	cpc	r7, r1
 254:	08 f0       	brcs	.+2      	; 0x258 <CRC+0x134>
 256:	a7 cf       	rjmp	.-178    	; 0x1a6 <CRC+0x82>
 258:	08 c0       	rjmp	.+16     	; 0x26a <CRC+0x146>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 25a:	61 2c       	mov	r6, r1
 25c:	71 2c       	mov	r7, r1
 25e:	05 c0       	rjmp	.+10     	; 0x26a <CRC+0x146>

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 260:	21 11       	cpse	r18, r1
 262:	fb cf       	rjmp	.-10     	; 0x25a <CRC+0x136>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 264:	61 2c       	mov	r6, r1
 266:	71 2c       	mov	r7, r1
 268:	89 cf       	rjmp	.-238    	; 0x17c <CRC+0x58>

        calcPoly = poly; // Reset the polynomial to its original value
    }

    return allData;
}
 26a:	c3 01       	movw	r24, r6
 26c:	60 96       	adiw	r28, 0x10	; 16
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	0f 91       	pop	r16
 280:	ff 90       	pop	r15
 282:	ef 90       	pop	r14
 284:	df 90       	pop	r13
 286:	cf 90       	pop	r12
 288:	bf 90       	pop	r11
 28a:	af 90       	pop	r10
 28c:	9f 90       	pop	r9
 28e:	8f 90       	pop	r8
 290:	7f 90       	pop	r7
 292:	6f 90       	pop	r6
 294:	5f 90       	pop	r5
 296:	4f 90       	pop	r4
 298:	3f 90       	pop	r3
 29a:	2f 90       	pop	r2
 29c:	08 95       	ret

0000029e <fillDataArray>:
 *
 * @return The array of integers which can be send.
 *
*/
uint8_t* fillDataArray(char data[100])
{
 29e:	ef 92       	push	r14
 2a0:	ff 92       	push	r15
 2a2:	0f 93       	push	r16
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	c4 58       	subi	r28, 0x84	; 132
 2b0:	d3 40       	sbci	r29, 0x03	; 3
 2b2:	0f b6       	in	r0, 0x3f	; 63
 2b4:	f8 94       	cli
 2b6:	de bf       	out	0x3e, r29	; 62
 2b8:	0f be       	out	0x3f, r0	; 63
 2ba:	cd bf       	out	0x3d, r28	; 61
 2bc:	8c 01       	movw	r16, r24
 2be:	fe 01       	movw	r30, r28
 2c0:	31 96       	adiw	r30, 0x01	; 1
 2c2:	9e 01       	movw	r18, r28
 2c4:	27 5f       	subi	r18, 0xF7	; 247
 2c6:	3f 4f       	sbci	r19, 0xFF	; 255
    uint8_t ret[800]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

	for (i = 0; i < 8; i++)
	{
		ret[dataLength] = 1;
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	81 93       	st	Z+, r24
    dataLength = 0;
    int i;
    uint8_t ret[800]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

	for (i = 0; i < 8; i++)
 2cc:	e2 17       	cp	r30, r18
 2ce:	f3 07       	cpc	r31, r19
 2d0:	e1 f7       	brne	.-8      	; 0x2ca <fillDataArray+0x2c>
 2d2:	88 e0       	ldi	r24, 0x08	; 8
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	90 93 b3 02 	sts	0x02B3, r25
 2da:	80 93 b2 02 	sts	0x02B2, r24
 2de:	78 01       	movw	r14, r16
 2e0:	ce 01       	movw	r24, r28
 2e2:	8f 5d       	subi	r24, 0xDF	; 223
 2e4:	9c 4f       	sbci	r25, 0xFC	; 252
 2e6:	d8 01       	movw	r26, r16
 2e8:	20 e0       	ldi	r18, 0x00	; 0
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	06 c0       	rjmp	.+12     	; 0x2fa <fillDataArray+0x5c>
	}

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
    {
        data_num[i] = (uint8_t)data[i];
 2ee:	4d 91       	ld	r20, X+
 2f0:	fc 01       	movw	r30, r24
 2f2:	41 93       	st	Z+, r20
 2f4:	cf 01       	movw	r24, r30
		ret[dataLength] = 1;
		dataLength++;
	}

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 2f6:	2f 5f       	subi	r18, 0xFF	; 255
 2f8:	3f 4f       	sbci	r19, 0xFF	; 255
 2fa:	f8 01       	movw	r30, r16
 2fc:	01 90       	ld	r0, Z+
 2fe:	00 20       	and	r0, r0
 300:	e9 f7       	brne	.-6      	; 0x2fc <fillDataArray+0x5e>
 302:	31 97       	sbiw	r30, 0x01	; 1
 304:	bf 01       	movw	r22, r30
 306:	60 1b       	sub	r22, r16
 308:	71 0b       	sbc	r23, r17
 30a:	26 17       	cp	r18, r22
 30c:	37 07       	cpc	r19, r23
 30e:	78 f3       	brcs	.-34     	; 0x2ee <fillDataArray+0x50>
    {
        data_num[i] = (uint8_t)data[i];
    }

    int checksum = CRC(data_num, strlen(data), POLY, false); // Get a checksum for the data
 310:	20 e0       	ldi	r18, 0x00	; 0
 312:	47 e6       	ldi	r20, 0x67	; 103
 314:	51 e0       	ldi	r21, 0x01	; 1
 316:	ce 01       	movw	r24, r28
 318:	8f 5d       	subi	r24, 0xDF	; 223
 31a:	9c 4f       	sbci	r25, 0xFC	; 252
 31c:	03 df       	rcall	.-506    	; 0x124 <CRC>
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	50 e0       	ldi	r21, 0x00	; 0
 322:	27 c0       	rjmp	.+78     	; 0x372 <fillDataArray+0xd4>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
 324:	d7 01       	movw	r26, r14
 326:	8d 91       	ld	r24, X+
 328:	7d 01       	movw	r14, r26
 32a:	60 91 b2 02 	lds	r22, 0x02B2
 32e:	70 91 b3 02 	lds	r23, 0x02B3
 332:	e1 e0       	ldi	r30, 0x01	; 1
 334:	f0 e0       	ldi	r31, 0x00	; 0
 336:	ec 0f       	add	r30, r28
 338:	fd 1f       	adc	r31, r29
 33a:	e6 0f       	add	r30, r22
 33c:	f7 1f       	adc	r31, r23
 33e:	9b 01       	movw	r18, r22
 340:	28 5f       	subi	r18, 0xF8	; 248
 342:	3f 4f       	sbci	r19, 0xFF	; 255
 344:	a1 e0       	ldi	r26, 0x01	; 1
 346:	b0 e0       	ldi	r27, 0x00	; 0
 348:	ac 0f       	add	r26, r28
 34a:	bd 1f       	adc	r27, r29
 34c:	2a 0f       	add	r18, r26
 34e:	3b 1f       	adc	r19, r27
        for (j = 0; j < 8; j++)
        {
            uint8_t tmp = (ascii & 0b10000000) >> 7; // Select the leftmost bit
            ascii = ascii << 1; // Shift the data left by 1

            ret[dataLength] = tmp; // Store the leftmost bit in an array
 350:	98 2f       	mov	r25, r24
 352:	99 1f       	adc	r25, r25
 354:	99 27       	eor	r25, r25
 356:	99 1f       	adc	r25, r25
 358:	91 93       	st	Z+, r25
 35a:	88 0f       	add	r24, r24
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes

        // Loop through the bits 1 at a time
        for (j = 0; j < 8; j++)
 35c:	e2 17       	cp	r30, r18
 35e:	f3 07       	cpc	r31, r19
 360:	b9 f7       	brne	.-18     	; 0x350 <fillDataArray+0xb2>
 362:	68 5f       	subi	r22, 0xF8	; 248
 364:	7f 4f       	sbci	r23, 0xFF	; 255
 366:	70 93 b3 02 	sts	0x02B3, r23
 36a:	60 93 b2 02 	sts	0x02B2, r22
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 36e:	4f 5f       	subi	r20, 0xFF	; 255
 370:	5f 4f       	sbci	r21, 0xFF	; 255
 372:	f8 01       	movw	r30, r16
 374:	01 90       	ld	r0, Z+
 376:	00 20       	and	r0, r0
 378:	e9 f7       	brne	.-6      	; 0x374 <fillDataArray+0xd6>
 37a:	31 97       	sbiw	r30, 0x01	; 1
 37c:	e0 1b       	sub	r30, r16
 37e:	f1 0b       	sbc	r31, r17
 380:	4e 17       	cp	r20, r30
 382:	5f 07       	cpc	r21, r31
 384:	78 f2       	brcs	.-98     	; 0x324 <fillDataArray+0x86>
 386:	40 91 b2 02 	lds	r20, 0x02B2
 38a:	50 91 b3 02 	lds	r21, 0x02B3
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	90 e0       	ldi	r25, 0x00	; 0
 392:	8c 0f       	add	r24, r28
 394:	9d 1f       	adc	r25, r29
 396:	84 0f       	add	r24, r20
 398:	95 1f       	adc	r25, r21
 39a:	9a 01       	movw	r18, r20
 39c:	28 5f       	subi	r18, 0xF8	; 248
 39e:	3f 4f       	sbci	r19, 0xFF	; 255
 3a0:	e1 e0       	ldi	r30, 0x01	; 1
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	ec 0f       	add	r30, r28
 3a6:	fd 1f       	adc	r31, r29
 3a8:	2e 0f       	add	r18, r30
 3aa:	3f 1f       	adc	r19, r31
 3ac:	01 96       	adiw	r24, 0x01	; 1
        printf(" ");
        #endif
    }

    // Loop 8 more times for the CRC byte
    for (i = 0; i < 8; i++)
 3ae:	82 17       	cp	r24, r18
 3b0:	93 07       	cpc	r25, r19
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <fillDataArray+0x10e>
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	01 97       	sbiw	r24, 0x01	; 1

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
        dataLength++; // Add one to the total data length
    }

	for (i = 0; i < 8; i++)
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <fillDataArray+0x11a>
 3bc:	40 5f       	subi	r20, 0xF0	; 240
 3be:	5f 4f       	sbci	r21, 0xFF	; 255
 3c0:	50 93 b3 02 	sts	0x02B3, r21
 3c4:	40 93 b2 02 	sts	0x02B2, r20
    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
    #endif // DEBUG

    return ret;
}
 3c8:	ce 01       	movw	r24, r28
 3ca:	01 96       	adiw	r24, 0x01	; 1
 3cc:	cc 57       	subi	r28, 0x7C	; 124
 3ce:	dc 4f       	sbci	r29, 0xFC	; 252
 3d0:	0f b6       	in	r0, 0x3f	; 63
 3d2:	f8 94       	cli
 3d4:	de bf       	out	0x3e, r29	; 62
 3d6:	0f be       	out	0x3f, r0	; 63
 3d8:	cd bf       	out	0x3d, r28	; 61
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	0f 91       	pop	r16
 3e2:	ff 90       	pop	r15
 3e4:	ef 90       	pop	r14
 3e6:	08 95       	ret

000003e8 <convertToData>:
 * @param length The length of the array
 *
 * @return The readable data
*/
char* convertToData(uint8_t bits[800], int length)
{
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
 3ee:	df 93       	push	r29
 3f0:	cd b7       	in	r28, 0x3d	; 61
 3f2:	de b7       	in	r29, 0x3e	; 62
 3f4:	c8 5c       	subi	r28, 0xC8	; 200
 3f6:	d1 09       	sbc	r29, r1
 3f8:	0f b6       	in	r0, 0x3f	; 63
 3fa:	f8 94       	cli
 3fc:	de bf       	out	0x3e, r29	; 62
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	cd bf       	out	0x3d, r28	; 61
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
 402:	19 82       	std	Y+1, r1	; 0x01
 404:	1a 82       	std	Y+2, r1	; 0x02
 406:	1b 82       	std	Y+3, r1	; 0x03
 408:	1c 82       	std	Y+4, r1	; 0x04
 40a:	fe 01       	movw	r30, r28
 40c:	35 96       	adiw	r30, 0x05	; 5
 40e:	20 e6       	ldi	r18, 0x60	; 96
 410:	df 01       	movw	r26, r30
 412:	1d 92       	st	X+, r1
 414:	2a 95       	dec	r18
 416:	e9 f7       	brne	.-6      	; 0x412 <convertToData+0x2a>
 418:	fc 01       	movw	r30, r24
 41a:	06 2f       	mov	r16, r22
 41c:	17 2f       	mov	r17, r23
    char tmp = 0b00000000; // Create a temp char with no data
 41e:	90 e0       	ldi	r25, 0x00	; 0
*/
char* convertToData(uint8_t bits[800], int length)
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
            printf("\nchar %c\nTotal %i\n", tmp, total);
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
            total++; // Add one to the total
            tmp = 0b00000000; // Reset the temp value
 428:	80 e0       	ldi	r24, 0x00	; 0
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 42a:	16 c0       	rjmp	.+44     	; 0x458 <convertToData+0x70>
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
        #endif

        tmp = tmp << 1 | (bits[i] & 0b1); // Add the bit to the right of the previous ones
 42c:	41 91       	ld	r20, Z+
 42e:	41 70       	andi	r20, 0x01	; 1
 430:	99 0f       	add	r25, r25
 432:	94 2b       	or	r25, r20
        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b1), (uint8_t)tmp);
        #endif

        // If this is dividable by 8
        if ((i + 1) % 8 == 0)
 434:	2f 5f       	subi	r18, 0xFF	; 255
 436:	3f 4f       	sbci	r19, 0xFF	; 255
 438:	a9 01       	movw	r20, r18
 43a:	47 70       	andi	r20, 0x07	; 7
 43c:	55 27       	eor	r21, r21
 43e:	45 2b       	or	r20, r21
 440:	59 f4       	brne	.+22     	; 0x458 <convertToData+0x70>
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
 442:	41 e0       	ldi	r20, 0x01	; 1
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	4c 0f       	add	r20, r28
 448:	5d 1f       	adc	r21, r29
 44a:	46 0f       	add	r20, r22
 44c:	57 1f       	adc	r21, r23
 44e:	da 01       	movw	r26, r20
 450:	9c 93       	st	X, r25
            total++; // Add one to the total
 452:	6f 5f       	subi	r22, 0xFF	; 255
 454:	7f 4f       	sbci	r23, 0xFF	; 255
            tmp = 0b00000000; // Reset the temp value
 456:	98 2f       	mov	r25, r24
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 458:	20 17       	cp	r18, r16
 45a:	31 07       	cpc	r19, r17
 45c:	39 f7       	brne	.-50     	; 0x42c <convertToData+0x44>
 45e:	ae 01       	movw	r20, r28
 460:	4f 5f       	subi	r20, 0xFF	; 255
 462:	5f 4f       	sbci	r21, 0xFF	; 255
 464:	9e 01       	movw	r18, r28
 466:	2b 59       	subi	r18, 0x9B	; 155
 468:	3f 4f       	sbci	r19, 0xFF	; 255
 46a:	80 e0       	ldi	r24, 0x00	; 0
 46c:	90 e0       	ldi	r25, 0x00	; 0
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 46e:	da 01       	movw	r26, r20
 470:	07 c0       	rjmp	.+14     	; 0x480 <convertToData+0x98>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
 472:	fa 01       	movw	r30, r20
 474:	61 91       	ld	r22, Z+
 476:	af 01       	movw	r20, r30
 478:	f9 01       	movw	r30, r18
 47a:	61 93       	st	Z+, r22
 47c:	9f 01       	movw	r18, r30
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	fd 01       	movw	r30, r26
 482:	01 90       	ld	r0, Z+
 484:	00 20       	and	r0, r0
 486:	e9 f7       	brne	.-6      	; 0x482 <convertToData+0x9a>
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	bf 01       	movw	r22, r30
 48c:	6a 1b       	sub	r22, r26
 48e:	7b 0b       	sbc	r23, r27
 490:	86 17       	cp	r24, r22
 492:	97 07       	cpc	r25, r23
 494:	70 f3       	brcs	.-36     	; 0x472 <convertToData+0x8a>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
 496:	21 e0       	ldi	r18, 0x01	; 1
 498:	47 e6       	ldi	r20, 0x67	; 103
 49a:	51 e0       	ldi	r21, 0x01	; 1
 49c:	ce 01       	movw	r24, r28
 49e:	8b 59       	subi	r24, 0x9B	; 155
 4a0:	9f 4f       	sbci	r25, 0xFF	; 255
 4a2:	40 de       	rcall	.-896    	; 0x124 <CRC>
        printf("Error detected.\n");
        #endif // DEBUG
    }

    return ret;
}
 4a4:	ce 01       	movw	r24, r28
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	c8 53       	subi	r28, 0x38	; 56
 4aa:	df 4f       	sbci	r29, 0xFF	; 255
 4ac:	0f b6       	in	r0, 0x3f	; 63
 4ae:	f8 94       	cli
 4b0:	de bf       	out	0x3e, r29	; 62
 4b2:	0f be       	out	0x3f, r0	; 63
 4b4:	cd bf       	out	0x3d, r28	; 61
 4b6:	df 91       	pop	r29
 4b8:	cf 91       	pop	r28
 4ba:	1f 91       	pop	r17
 4bc:	0f 91       	pop	r16
 4be:	08 95       	ret

000004c0 <sendData>:
		// Main loop
	}
}

void sendData(uint8_t dataToSend[800])
{
 4c0:	9f 92       	push	r9
 4c2:	af 92       	push	r10
 4c4:	bf 92       	push	r11
 4c6:	cf 92       	push	r12
 4c8:	df 92       	push	r13
 4ca:	ef 92       	push	r14
 4cc:	ff 92       	push	r15
 4ce:	0f 93       	push	r16
 4d0:	1f 93       	push	r17
 4d2:	cf 93       	push	r28
 4d4:	df 93       	push	r29
 4d6:	d8 2f       	mov	r29, r24
 4d8:	c9 2f       	mov	r28, r25
	printf("datalength: %i\n", dataLength);
 4da:	20 91 b3 02 	lds	r18, 0x02B3
 4de:	2f 93       	push	r18
 4e0:	20 91 b2 02 	lds	r18, 0x02B2
 4e4:	2f 93       	push	r18
 4e6:	2c e1       	ldi	r18, 0x1C	; 28
 4e8:	32 e0       	ldi	r19, 0x02	; 2
 4ea:	3f 93       	push	r19
 4ec:	2f 93       	push	r18
 4ee:	48 d1       	rcall	.+656    	; 0x780 <printf>


	int i;

	for (i = 0; i < dataLength; i++)
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
 4f6:	0f 90       	pop	r0
 4f8:	20 91 b2 02 	lds	r18, 0x02B2
 4fc:	30 91 b3 02 	lds	r19, 0x02B3
 500:	12 16       	cp	r1, r18
 502:	13 06       	cpc	r1, r19
 504:	0c f0       	brlt	.+2      	; 0x508 <sendData+0x48>
 506:	4a c0       	rjmp	.+148    	; 0x59c <sendData+0xdc>
 508:	0d 2f       	mov	r16, r29
 50a:	1c 2f       	mov	r17, r28
 50c:	0f 2e       	mov	r0, r31
 50e:	f4 eb       	ldi	r31, 0xB4	; 180
 510:	af 2e       	mov	r10, r31
 512:	f2 e0       	ldi	r31, 0x02	; 2
 514:	bf 2e       	mov	r11, r31
 516:	f0 2d       	mov	r31, r0
 518:	e1 2c       	mov	r14, r1
 51a:	f1 2c       	mov	r15, r1

		_delay_ms((1000/OUTPUT_BAUDRATE)/2);

		uint8_t memes = PINC & (1 << INPUT_PIN);

		printf("%i -> %i \n",(dataToSend[i] && 0b1) , memes);
 51c:	99 24       	eor	r9, r9
 51e:	93 94       	inc	r9
 520:	d0 e0       	ldi	r29, 0x00	; 0
 522:	0f 2e       	mov	r0, r31
 524:	fc e2       	ldi	r31, 0x2C	; 44
 526:	cf 2e       	mov	r12, r31
 528:	f2 e0       	ldi	r31, 0x02	; 2
 52a:	df 2e       	mov	r13, r31
 52c:	f0 2d       	mov	r31, r0
 52e:	f8 01       	movw	r30, r16

	int i;

	for (i = 0; i < dataLength; i++)
	{
		if ((dataToSend[i] && 0b1) == 0)
 530:	80 81       	ld	r24, Z
 532:	81 11       	cpse	r24, r1
 534:	02 c0       	rjmp	.+4      	; 0x53a <sendData+0x7a>
		{
			PORTB &= ~(1 << OUTPUT_PIN);
 536:	28 98       	cbi	0x05, 0	; 5
 538:	01 c0       	rjmp	.+2      	; 0x53c <sendData+0x7c>
		}
		else
		{
			PORTB |= (1 << OUTPUT_PIN);
 53a:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53c:	8f e9       	ldi	r24, 0x9F	; 159
 53e:	9f e0       	ldi	r25, 0x0F	; 15
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	f1 f7       	brne	.-4      	; 0x540 <sendData+0x80>
 544:	00 c0       	rjmp	.+0      	; 0x546 <sendData+0x86>
 546:	00 00       	nop

		//printf("%i  ", i);

		_delay_ms((1000/OUTPUT_BAUDRATE)/2);

		uint8_t memes = PINC & (1 << INPUT_PIN);
 548:	c6 b1       	in	r28, 0x06	; 6
 54a:	c1 70       	andi	r28, 0x01	; 1
 54c:	0f 5f       	subi	r16, 0xFF	; 255
 54e:	1f 4f       	sbci	r17, 0xFF	; 255

		printf("%i -> %i \n",(dataToSend[i] && 0b1) , memes);
 550:	1f 92       	push	r1
 552:	cf 93       	push	r28
 554:	89 2d       	mov	r24, r9
 556:	9d 2f       	mov	r25, r29
 558:	20 81       	ld	r18, Z
 55a:	21 11       	cpse	r18, r1
 55c:	01 c0       	rjmp	.+2      	; 0x560 <sendData+0xa0>
 55e:	8d 2f       	mov	r24, r29
 560:	9f 93       	push	r25
 562:	8f 93       	push	r24
 564:	df 92       	push	r13
 566:	cf 92       	push	r12
 568:	0b d1       	rcall	.+534    	; 0x780 <printf>

		receivedData[i] = memes;
 56a:	d5 01       	movw	r26, r10
 56c:	cd 93       	st	X+, r28
 56e:	5d 01       	movw	r10, r26
 570:	ef e9       	ldi	r30, 0x9F	; 159
 572:	ff e0       	ldi	r31, 0x0F	; 15
 574:	31 97       	sbiw	r30, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <sendData+0xb4>
 578:	00 c0       	rjmp	.+0      	; 0x57a <sendData+0xba>
 57a:	00 00       	nop
	printf("datalength: %i\n", dataLength);


	int i;

	for (i = 0; i < dataLength; i++)
 57c:	ff ef       	ldi	r31, 0xFF	; 255
 57e:	ef 1a       	sub	r14, r31
 580:	ff 0a       	sbc	r15, r31
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	0f 90       	pop	r0
 58a:	0f 90       	pop	r0
 58c:	0f 90       	pop	r0
 58e:	80 91 b2 02 	lds	r24, 0x02B2
 592:	90 91 b3 02 	lds	r25, 0x02B3
 596:	e8 16       	cp	r14, r24
 598:	f9 06       	cpc	r15, r25
 59a:	4c f2       	brlt	.-110    	; 0x52e <sendData+0x6e>

		receivedData[i] = memes;

		_delay_ms((1000/OUTPUT_BAUDRATE)/2);
	}
 59c:	df 91       	pop	r29
 59e:	cf 91       	pop	r28
 5a0:	1f 91       	pop	r17
 5a2:	0f 91       	pop	r16
 5a4:	ff 90       	pop	r15
 5a6:	ef 90       	pop	r14
 5a8:	df 90       	pop	r13
 5aa:	cf 90       	pop	r12
 5ac:	bf 90       	pop	r11
 5ae:	af 90       	pop	r10
 5b0:	9f 90       	pop	r9
 5b2:	08 95       	ret

000005b4 <main>:

int counter;
uint8_t receivedData[800];

int main(void)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29
 5b8:	cd b7       	in	r28, 0x3d	; 61
 5ba:	de b7       	in	r29, 0x3e	; 62
 5bc:	c4 56       	subi	r28, 0x64	; 100
 5be:	d1 09       	sbc	r29, r1
 5c0:	0f b6       	in	r0, 0x3f	; 63
 5c2:	f8 94       	cli
 5c4:	de bf       	out	0x3e, r29	; 62
 5c6:	0f be       	out	0x3f, r0	; 63
 5c8:	cd bf       	out	0x3d, r28	; 61
 5ca:	e4 eb       	ldi	r30, 0xB4	; 180
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	84 ed       	ldi	r24, 0xD4	; 212
 5d0:	95 e0       	ldi	r25, 0x05	; 5
	int i;
	for (i = 0; i < 800; i++)
	{
		receivedData[i] = 0;
 5d2:	11 92       	st	Z+, r1
uint8_t receivedData[800];

int main(void)
{
	int i;
	for (i = 0; i < 800; i++)
 5d4:	e8 17       	cp	r30, r24
 5d6:	f9 07       	cpc	r31, r25
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <main+0x1e>
	{
		receivedData[i] = 0;
	}

	// init IO
	DDRB |= (1 << OUTPUT_PIN); // Set the output pin
 5da:	20 9a       	sbi	0x04, 0	; 4
	DDRC &= ~(1 << INPUT_PIN); // Set the input pin
 5dc:	38 98       	cbi	0x07, 0	; 7
	PORTC |= (1 << INPUT_PIN); // Enable pull-up resistor
 5de:	40 9a       	sbi	0x08, 0	; 8

	TCCR0B |= (1 << CS02); // set prescaler to 256 and start the timer*/


	/* USART INIT START */
	USART0Init();
 5e0:	63 d0       	rcall	.+198    	; 0x6a8 <USART0Init>
	stdout =& usart0_output;
 5e2:	e8 ed       	ldi	r30, 0xD8	; 216
 5e4:	f5 e0       	ldi	r31, 0x05	; 5
 5e6:	8e e0       	ldi	r24, 0x0E	; 14
 5e8:	92 e0       	ldi	r25, 0x02	; 2
 5ea:	93 83       	std	Z+3, r25	; 0x03
 5ec:	82 83       	std	Z+2, r24	; 0x02
	stdin =& usart0_input;
 5ee:	80 e0       	ldi	r24, 0x00	; 0
 5f0:	92 e0       	ldi	r25, 0x02	; 2
 5f2:	91 83       	std	Z+1, r25	; 0x01
 5f4:	80 83       	st	Z, r24
	/* USART INIT STOP */

	SPIInit(); // Init the SPI bus
 5f6:	52 d0       	rcall	.+164    	; 0x69c <SPIInit>

	//char input[100] = "Now, this is a story all about how My life got flipped-turned upside down";
	char input[100] = "";
 5f8:	19 82       	std	Y+1, r1	; 0x01
 5fa:	1a 82       	std	Y+2, r1	; 0x02
 5fc:	1b 82       	std	Y+3, r1	; 0x03
 5fe:	1c 82       	std	Y+4, r1	; 0x04
 600:	fe 01       	movw	r30, r28
 602:	35 96       	adiw	r30, 0x05	; 5
 604:	80 e6       	ldi	r24, 0x60	; 96
 606:	df 01       	movw	r26, r30
 608:	1d 92       	st	X+, r1
 60a:	8a 95       	dec	r24
 60c:	e9 f7       	brne	.-6      	; 0x608 <main+0x54>
	printf("\n\n\n\nSTART CODE WITH THIS INPUT: %s\n\n", input); // Print the input string
 60e:	8e 01       	movw	r16, r28
 610:	0f 5f       	subi	r16, 0xFF	; 255
 612:	1f 4f       	sbci	r17, 0xFF	; 255
 614:	1f 93       	push	r17
 616:	0f 93       	push	r16
 618:	87 e3       	ldi	r24, 0x37	; 55
 61a:	92 e0       	ldi	r25, 0x02	; 2
 61c:	9f 93       	push	r25
 61e:	8f 93       	push	r24
 620:	af d0       	rcall	.+350    	; 0x780 <printf>
		
	uint8_t* dataToSend = fillDataArray(input); // Convert data to base2
 622:	c8 01       	movw	r24, r16
 624:	3c de       	rcall	.-904    	; 0x29e <fillDataArray>
 626:	7c 01       	movw	r14, r24

	unsigned int time;

	time = (1000 / OUTPUT_BAUDRATE) * dataLength;
 628:	00 91 b2 02 	lds	r16, 0x02B2
 62c:	10 91 b3 02 	lds	r17, 0x02B3
 630:	00 0f       	add	r16, r16
 632:	11 1f       	adc	r17, r17

	printf("Baudtime: %i\n", 1000/OUTPUT_BAUDRATE);
 634:	1f 92       	push	r1
 636:	82 e0       	ldi	r24, 0x02	; 2
 638:	8f 93       	push	r24
 63a:	2c e5       	ldi	r18, 0x5C	; 92
 63c:	32 e0       	ldi	r19, 0x02	; 2
 63e:	3f 93       	push	r19
 640:	2f 93       	push	r18
 642:	9e d0       	rcall	.+316    	; 0x780 <printf>
	printf("Time needed to send: %i ms\n", time);
 644:	1f 93       	push	r17
 646:	0f 93       	push	r16
 648:	2a e6       	ldi	r18, 0x6A	; 106
 64a:	32 e0       	ldi	r19, 0x02	; 2
 64c:	3f 93       	push	r19
 64e:	2f 93       	push	r18
 650:	97 d0       	rcall	.+302    	; 0x780 <printf>


	sendData(dataToSend);
 652:	c7 01       	movw	r24, r14
 654:	35 df       	rcall	.-406    	; 0x4c0 <sendData>

	printf("datalength: %i\n", dataLength);
 656:	80 91 b3 02 	lds	r24, 0x02B3
 65a:	8f 93       	push	r24
 65c:	80 91 b2 02 	lds	r24, 0x02B2
 660:	8f 93       	push	r24
 662:	8c e1       	ldi	r24, 0x1C	; 28
 664:	92 e0       	ldi	r25, 0x02	; 2
 666:	9f 93       	push	r25
 668:	8f 93       	push	r24
 66a:	8a d0       	rcall	.+276    	; 0x780 <printf>

	char* received = convertToData(receivedData, dataLength); // Convert base2 to data
 66c:	60 91 b2 02 	lds	r22, 0x02B2
 670:	70 91 b3 02 	lds	r23, 0x02B3
 674:	84 eb       	ldi	r24, 0xB4	; 180
 676:	92 e0       	ldi	r25, 0x02	; 2
 678:	b7 de       	rcall	.-658    	; 0x3e8 <convertToData>
	{
		printf("Error detected...\n");
	}
	else
	{
		printf("\nReceived data: %s\n\n", received); // Print the received data
 67a:	9f 93       	push	r25
 67c:	8f 93       	push	r24
 67e:	86 e8       	ldi	r24, 0x86	; 134
 680:	92 e0       	ldi	r25, 0x02	; 2
 682:	9f 93       	push	r25
 684:	8f 93       	push	r24
 686:	7c d0       	rcall	.+248    	; 0x780 <printf>
	}

	printf("Entering loop now....\n");
 688:	8b e9       	ldi	r24, 0x9B	; 155
 68a:	92 e0       	ldi	r25, 0x02	; 2
 68c:	8c d0       	rcall	.+280    	; 0x7a6 <puts>
	PORTB &= ~(1 << OUTPUT_PIN);
 68e:	28 98       	cbi	0x05, 0	; 5
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	f8 94       	cli
 694:	de bf       	out	0x3e, r29	; 62
 696:	0f be       	out	0x3f, r0	; 63
 698:	cd bf       	out	0x3d, r28	; 61

	while (1)
	{
		// Main loop
	}
 69a:	ff cf       	rjmp	.-2      	; 0x69a <main+0xe6>

0000069c <SPIInit>:
#include "SPI.h"

void SPIInit()
{
	// Set MOSI, SCK as output
	DDRB |= (1 << DDB3) | (1 << DDB5);
 69c:	84 b1       	in	r24, 0x04	; 4
 69e:	88 62       	ori	r24, 0x28	; 40
 6a0:	84 b9       	out	0x04, r24	; 4

	// Enable SPI, Master, set clock rate to fck/4
	SPCR = (1 << SPE) | (1 << MSTR);
 6a2:	80 e5       	ldi	r24, 0x50	; 80
 6a4:	8c bd       	out	0x2c, r24	; 44
 6a6:	08 95       	ret

000006a8 <USART0Init>:

#include "USART.h"

void USART0Init()
{
	receiveDone = 0;
 6a8:	10 92 d7 05 	sts	0x05D7, r1
 6ac:	10 92 d6 05 	sts	0x05D6, r1

	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_BAUDRATE >> 8);
 6b0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_BAUDRATE;
 6b4:	10 92 c4 00 	sts	0x00C4, r1

	// Enable transmission and receiving
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 6b8:	e1 ec       	ldi	r30, 0xC1	; 193
 6ba:	f0 e0       	ldi	r31, 0x00	; 0
 6bc:	80 81       	ld	r24, Z
 6be:	88 61       	ori	r24, 0x18	; 24
 6c0:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 6c2:	e2 ec       	ldi	r30, 0xC2	; 194
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	86 60       	ori	r24, 0x06	; 6
 6ca:	80 83       	st	Z, r24
 6cc:	08 95       	ret

000006ce <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
 6ce:	cf 93       	push	r28
 6d0:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
 6d2:	8a 30       	cpi	r24, 0x0A	; 10
 6d4:	11 f4       	brne	.+4      	; 0x6da <USART0SendByte+0xc>
 6d6:	8d e0       	ldi	r24, 0x0D	; 13
 6d8:	fa df       	rcall	.-12     	; 0x6ce <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 6da:	e0 ec       	ldi	r30, 0xC0	; 192
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	90 81       	ld	r25, Z
 6e0:	95 ff       	sbrs	r25, 5
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <USART0SendByte+0x10>

	// Transmit data
	UDR0 = u8Data;
 6e4:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
 6e8:	80 e0       	ldi	r24, 0x00	; 0
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	cf 91       	pop	r28
 6ee:	08 95       	ret

000006f0 <USART0GetByte>:

char USART0GetByte(FILE *stream)
{
	while (!(UCSR0A & (1 << RXC0)));
 6f0:	e0 ec       	ldi	r30, 0xC0	; 192
 6f2:	f0 e0       	ldi	r31, 0x00	; 0
 6f4:	80 81       	ld	r24, Z
 6f6:	88 23       	and	r24, r24
 6f8:	ec f7       	brge	.-6      	; 0x6f4 <USART0GetByte+0x4>
	
	return UDR0;
 6fa:	80 91 c6 00 	lds	r24, 0x00C6
 6fe:	08 95       	ret

00000700 <__ashldi3>:
 700:	0f 93       	push	r16
 702:	08 30       	cpi	r16, 0x08	; 8
 704:	90 f0       	brcs	.+36     	; 0x72a <__ashldi3+0x2a>
 706:	98 2f       	mov	r25, r24
 708:	87 2f       	mov	r24, r23
 70a:	76 2f       	mov	r23, r22
 70c:	65 2f       	mov	r22, r21
 70e:	54 2f       	mov	r21, r20
 710:	43 2f       	mov	r20, r19
 712:	32 2f       	mov	r19, r18
 714:	22 27       	eor	r18, r18
 716:	08 50       	subi	r16, 0x08	; 8
 718:	f4 cf       	rjmp	.-24     	; 0x702 <__ashldi3+0x2>
 71a:	22 0f       	add	r18, r18
 71c:	33 1f       	adc	r19, r19
 71e:	44 1f       	adc	r20, r20
 720:	55 1f       	adc	r21, r21
 722:	66 1f       	adc	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	99 1f       	adc	r25, r25
 72a:	0a 95       	dec	r16
 72c:	b2 f7       	brpl	.-20     	; 0x71a <__ashldi3+0x1a>
 72e:	0f 91       	pop	r16
 730:	08 95       	ret

00000732 <__ashrdi3>:
 732:	97 fb       	bst	r25, 7
 734:	10 f8       	bld	r1, 0

00000736 <__lshrdi3>:
 736:	16 94       	lsr	r1
 738:	00 08       	sbc	r0, r0
 73a:	0f 93       	push	r16
 73c:	08 30       	cpi	r16, 0x08	; 8
 73e:	98 f0       	brcs	.+38     	; 0x766 <__lshrdi3+0x30>
 740:	08 50       	subi	r16, 0x08	; 8
 742:	23 2f       	mov	r18, r19
 744:	34 2f       	mov	r19, r20
 746:	45 2f       	mov	r20, r21
 748:	56 2f       	mov	r21, r22
 74a:	67 2f       	mov	r22, r23
 74c:	78 2f       	mov	r23, r24
 74e:	89 2f       	mov	r24, r25
 750:	90 2d       	mov	r25, r0
 752:	f4 cf       	rjmp	.-24     	; 0x73c <__lshrdi3+0x6>
 754:	05 94       	asr	r0
 756:	97 95       	ror	r25
 758:	87 95       	ror	r24
 75a:	77 95       	ror	r23
 75c:	67 95       	ror	r22
 75e:	57 95       	ror	r21
 760:	47 95       	ror	r20
 762:	37 95       	ror	r19
 764:	27 95       	ror	r18
 766:	0a 95       	dec	r16
 768:	aa f7       	brpl	.-22     	; 0x754 <__lshrdi3+0x1e>
 76a:	0f 91       	pop	r16
 76c:	08 95       	ret

0000076e <__cmpdi2>:
 76e:	2a 15       	cp	r18, r10
 770:	3b 05       	cpc	r19, r11
 772:	4c 05       	cpc	r20, r12
 774:	5d 05       	cpc	r21, r13
 776:	6e 05       	cpc	r22, r14
 778:	7f 05       	cpc	r23, r15
 77a:	80 07       	cpc	r24, r16
 77c:	91 07       	cpc	r25, r17
 77e:	08 95       	ret

00000780 <printf>:
 780:	cf 93       	push	r28
 782:	df 93       	push	r29
 784:	cd b7       	in	r28, 0x3d	; 61
 786:	de b7       	in	r29, 0x3e	; 62
 788:	ae 01       	movw	r20, r28
 78a:	4a 5f       	subi	r20, 0xFA	; 250
 78c:	5f 4f       	sbci	r21, 0xFF	; 255
 78e:	fa 01       	movw	r30, r20
 790:	61 91       	ld	r22, Z+
 792:	71 91       	ld	r23, Z+
 794:	af 01       	movw	r20, r30
 796:	80 91 da 05 	lds	r24, 0x05DA
 79a:	90 91 db 05 	lds	r25, 0x05DB
 79e:	33 d0       	rcall	.+102    	; 0x806 <vfprintf>
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <puts>:
 7a6:	0f 93       	push	r16
 7a8:	1f 93       	push	r17
 7aa:	cf 93       	push	r28
 7ac:	df 93       	push	r29
 7ae:	e0 91 da 05 	lds	r30, 0x05DA
 7b2:	f0 91 db 05 	lds	r31, 0x05DB
 7b6:	23 81       	ldd	r18, Z+3	; 0x03
 7b8:	21 ff       	sbrs	r18, 1
 7ba:	1b c0       	rjmp	.+54     	; 0x7f2 <puts+0x4c>
 7bc:	8c 01       	movw	r16, r24
 7be:	d0 e0       	ldi	r29, 0x00	; 0
 7c0:	c0 e0       	ldi	r28, 0x00	; 0
 7c2:	f8 01       	movw	r30, r16
 7c4:	81 91       	ld	r24, Z+
 7c6:	8f 01       	movw	r16, r30
 7c8:	60 91 da 05 	lds	r22, 0x05DA
 7cc:	70 91 db 05 	lds	r23, 0x05DB
 7d0:	db 01       	movw	r26, r22
 7d2:	18 96       	adiw	r26, 0x08	; 8
 7d4:	ed 91       	ld	r30, X+
 7d6:	fc 91       	ld	r31, X
 7d8:	19 97       	sbiw	r26, 0x09	; 9
 7da:	88 23       	and	r24, r24
 7dc:	31 f0       	breq	.+12     	; 0x7ea <puts+0x44>
 7de:	19 95       	eicall
 7e0:	89 2b       	or	r24, r25
 7e2:	79 f3       	breq	.-34     	; 0x7c2 <puts+0x1c>
 7e4:	df ef       	ldi	r29, 0xFF	; 255
 7e6:	cf ef       	ldi	r28, 0xFF	; 255
 7e8:	ec cf       	rjmp	.-40     	; 0x7c2 <puts+0x1c>
 7ea:	8a e0       	ldi	r24, 0x0A	; 10
 7ec:	19 95       	eicall
 7ee:	89 2b       	or	r24, r25
 7f0:	19 f0       	breq	.+6      	; 0x7f8 <puts+0x52>
 7f2:	8f ef       	ldi	r24, 0xFF	; 255
 7f4:	9f ef       	ldi	r25, 0xFF	; 255
 7f6:	02 c0       	rjmp	.+4      	; 0x7fc <puts+0x56>
 7f8:	8d 2f       	mov	r24, r29
 7fa:	9c 2f       	mov	r25, r28
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <vfprintf>:
 806:	2f 92       	push	r2
 808:	3f 92       	push	r3
 80a:	4f 92       	push	r4
 80c:	5f 92       	push	r5
 80e:	6f 92       	push	r6
 810:	7f 92       	push	r7
 812:	8f 92       	push	r8
 814:	9f 92       	push	r9
 816:	af 92       	push	r10
 818:	bf 92       	push	r11
 81a:	cf 92       	push	r12
 81c:	df 92       	push	r13
 81e:	ef 92       	push	r14
 820:	ff 92       	push	r15
 822:	0f 93       	push	r16
 824:	1f 93       	push	r17
 826:	cf 93       	push	r28
 828:	df 93       	push	r29
 82a:	cd b7       	in	r28, 0x3d	; 61
 82c:	de b7       	in	r29, 0x3e	; 62
 82e:	2c 97       	sbiw	r28, 0x0c	; 12
 830:	0f b6       	in	r0, 0x3f	; 63
 832:	f8 94       	cli
 834:	de bf       	out	0x3e, r29	; 62
 836:	0f be       	out	0x3f, r0	; 63
 838:	cd bf       	out	0x3d, r28	; 61
 83a:	7c 01       	movw	r14, r24
 83c:	6b 01       	movw	r12, r22
 83e:	8a 01       	movw	r16, r20
 840:	fc 01       	movw	r30, r24
 842:	17 82       	std	Z+7, r1	; 0x07
 844:	16 82       	std	Z+6, r1	; 0x06
 846:	83 81       	ldd	r24, Z+3	; 0x03
 848:	81 ff       	sbrs	r24, 1
 84a:	b0 c1       	rjmp	.+864    	; 0xbac <vfprintf+0x3a6>
 84c:	ce 01       	movw	r24, r28
 84e:	01 96       	adiw	r24, 0x01	; 1
 850:	4c 01       	movw	r8, r24
 852:	f7 01       	movw	r30, r14
 854:	93 81       	ldd	r25, Z+3	; 0x03
 856:	f6 01       	movw	r30, r12
 858:	93 fd       	sbrc	r25, 3
 85a:	85 91       	lpm	r24, Z+
 85c:	93 ff       	sbrs	r25, 3
 85e:	81 91       	ld	r24, Z+
 860:	6f 01       	movw	r12, r30
 862:	88 23       	and	r24, r24
 864:	09 f4       	brne	.+2      	; 0x868 <vfprintf+0x62>
 866:	9e c1       	rjmp	.+828    	; 0xba4 <vfprintf+0x39e>
 868:	85 32       	cpi	r24, 0x25	; 37
 86a:	39 f4       	brne	.+14     	; 0x87a <vfprintf+0x74>
 86c:	93 fd       	sbrc	r25, 3
 86e:	85 91       	lpm	r24, Z+
 870:	93 ff       	sbrs	r25, 3
 872:	81 91       	ld	r24, Z+
 874:	6f 01       	movw	r12, r30
 876:	85 32       	cpi	r24, 0x25	; 37
 878:	21 f4       	brne	.+8      	; 0x882 <vfprintf+0x7c>
 87a:	b7 01       	movw	r22, r14
 87c:	90 e0       	ldi	r25, 0x00	; 0
 87e:	c7 d1       	rcall	.+910    	; 0xc0e <fputc>
 880:	e8 cf       	rjmp	.-48     	; 0x852 <vfprintf+0x4c>
 882:	51 2c       	mov	r5, r1
 884:	31 2c       	mov	r3, r1
 886:	20 e0       	ldi	r18, 0x00	; 0
 888:	20 32       	cpi	r18, 0x20	; 32
 88a:	a0 f4       	brcc	.+40     	; 0x8b4 <vfprintf+0xae>
 88c:	8b 32       	cpi	r24, 0x2B	; 43
 88e:	69 f0       	breq	.+26     	; 0x8aa <vfprintf+0xa4>
 890:	30 f4       	brcc	.+12     	; 0x89e <vfprintf+0x98>
 892:	80 32       	cpi	r24, 0x20	; 32
 894:	59 f0       	breq	.+22     	; 0x8ac <vfprintf+0xa6>
 896:	83 32       	cpi	r24, 0x23	; 35
 898:	69 f4       	brne	.+26     	; 0x8b4 <vfprintf+0xae>
 89a:	20 61       	ori	r18, 0x10	; 16
 89c:	2c c0       	rjmp	.+88     	; 0x8f6 <vfprintf+0xf0>
 89e:	8d 32       	cpi	r24, 0x2D	; 45
 8a0:	39 f0       	breq	.+14     	; 0x8b0 <vfprintf+0xaa>
 8a2:	80 33       	cpi	r24, 0x30	; 48
 8a4:	39 f4       	brne	.+14     	; 0x8b4 <vfprintf+0xae>
 8a6:	21 60       	ori	r18, 0x01	; 1
 8a8:	26 c0       	rjmp	.+76     	; 0x8f6 <vfprintf+0xf0>
 8aa:	22 60       	ori	r18, 0x02	; 2
 8ac:	24 60       	ori	r18, 0x04	; 4
 8ae:	23 c0       	rjmp	.+70     	; 0x8f6 <vfprintf+0xf0>
 8b0:	28 60       	ori	r18, 0x08	; 8
 8b2:	21 c0       	rjmp	.+66     	; 0x8f6 <vfprintf+0xf0>
 8b4:	27 fd       	sbrc	r18, 7
 8b6:	27 c0       	rjmp	.+78     	; 0x906 <vfprintf+0x100>
 8b8:	30 ed       	ldi	r19, 0xD0	; 208
 8ba:	38 0f       	add	r19, r24
 8bc:	3a 30       	cpi	r19, 0x0A	; 10
 8be:	78 f4       	brcc	.+30     	; 0x8de <vfprintf+0xd8>
 8c0:	26 ff       	sbrs	r18, 6
 8c2:	06 c0       	rjmp	.+12     	; 0x8d0 <vfprintf+0xca>
 8c4:	fa e0       	ldi	r31, 0x0A	; 10
 8c6:	5f 9e       	mul	r5, r31
 8c8:	30 0d       	add	r19, r0
 8ca:	11 24       	eor	r1, r1
 8cc:	53 2e       	mov	r5, r19
 8ce:	13 c0       	rjmp	.+38     	; 0x8f6 <vfprintf+0xf0>
 8d0:	8a e0       	ldi	r24, 0x0A	; 10
 8d2:	38 9e       	mul	r3, r24
 8d4:	30 0d       	add	r19, r0
 8d6:	11 24       	eor	r1, r1
 8d8:	33 2e       	mov	r3, r19
 8da:	20 62       	ori	r18, 0x20	; 32
 8dc:	0c c0       	rjmp	.+24     	; 0x8f6 <vfprintf+0xf0>
 8de:	8e 32       	cpi	r24, 0x2E	; 46
 8e0:	21 f4       	brne	.+8      	; 0x8ea <vfprintf+0xe4>
 8e2:	26 fd       	sbrc	r18, 6
 8e4:	5f c1       	rjmp	.+702    	; 0xba4 <vfprintf+0x39e>
 8e6:	20 64       	ori	r18, 0x40	; 64
 8e8:	06 c0       	rjmp	.+12     	; 0x8f6 <vfprintf+0xf0>
 8ea:	8c 36       	cpi	r24, 0x6C	; 108
 8ec:	11 f4       	brne	.+4      	; 0x8f2 <vfprintf+0xec>
 8ee:	20 68       	ori	r18, 0x80	; 128
 8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <vfprintf+0xf0>
 8f2:	88 36       	cpi	r24, 0x68	; 104
 8f4:	41 f4       	brne	.+16     	; 0x906 <vfprintf+0x100>
 8f6:	f6 01       	movw	r30, r12
 8f8:	93 fd       	sbrc	r25, 3
 8fa:	85 91       	lpm	r24, Z+
 8fc:	93 ff       	sbrs	r25, 3
 8fe:	81 91       	ld	r24, Z+
 900:	6f 01       	movw	r12, r30
 902:	81 11       	cpse	r24, r1
 904:	c1 cf       	rjmp	.-126    	; 0x888 <vfprintf+0x82>
 906:	98 2f       	mov	r25, r24
 908:	9f 7d       	andi	r25, 0xDF	; 223
 90a:	95 54       	subi	r25, 0x45	; 69
 90c:	93 30       	cpi	r25, 0x03	; 3
 90e:	28 f4       	brcc	.+10     	; 0x91a <vfprintf+0x114>
 910:	0c 5f       	subi	r16, 0xFC	; 252
 912:	1f 4f       	sbci	r17, 0xFF	; 255
 914:	ff e3       	ldi	r31, 0x3F	; 63
 916:	f9 83       	std	Y+1, r31	; 0x01
 918:	0d c0       	rjmp	.+26     	; 0x934 <vfprintf+0x12e>
 91a:	83 36       	cpi	r24, 0x63	; 99
 91c:	31 f0       	breq	.+12     	; 0x92a <vfprintf+0x124>
 91e:	83 37       	cpi	r24, 0x73	; 115
 920:	71 f0       	breq	.+28     	; 0x93e <vfprintf+0x138>
 922:	83 35       	cpi	r24, 0x53	; 83
 924:	09 f0       	breq	.+2      	; 0x928 <vfprintf+0x122>
 926:	57 c0       	rjmp	.+174    	; 0x9d6 <vfprintf+0x1d0>
 928:	21 c0       	rjmp	.+66     	; 0x96c <vfprintf+0x166>
 92a:	f8 01       	movw	r30, r16
 92c:	80 81       	ld	r24, Z
 92e:	89 83       	std	Y+1, r24	; 0x01
 930:	0e 5f       	subi	r16, 0xFE	; 254
 932:	1f 4f       	sbci	r17, 0xFF	; 255
 934:	44 24       	eor	r4, r4
 936:	43 94       	inc	r4
 938:	51 2c       	mov	r5, r1
 93a:	54 01       	movw	r10, r8
 93c:	14 c0       	rjmp	.+40     	; 0x966 <vfprintf+0x160>
 93e:	38 01       	movw	r6, r16
 940:	f2 e0       	ldi	r31, 0x02	; 2
 942:	6f 0e       	add	r6, r31
 944:	71 1c       	adc	r7, r1
 946:	f8 01       	movw	r30, r16
 948:	a0 80       	ld	r10, Z
 94a:	b1 80       	ldd	r11, Z+1	; 0x01
 94c:	26 ff       	sbrs	r18, 6
 94e:	03 c0       	rjmp	.+6      	; 0x956 <vfprintf+0x150>
 950:	65 2d       	mov	r22, r5
 952:	70 e0       	ldi	r23, 0x00	; 0
 954:	02 c0       	rjmp	.+4      	; 0x95a <vfprintf+0x154>
 956:	6f ef       	ldi	r22, 0xFF	; 255
 958:	7f ef       	ldi	r23, 0xFF	; 255
 95a:	c5 01       	movw	r24, r10
 95c:	2c 87       	std	Y+12, r18	; 0x0c
 95e:	4c d1       	rcall	.+664    	; 0xbf8 <strnlen>
 960:	2c 01       	movw	r4, r24
 962:	83 01       	movw	r16, r6
 964:	2c 85       	ldd	r18, Y+12	; 0x0c
 966:	2f 77       	andi	r18, 0x7F	; 127
 968:	22 2e       	mov	r2, r18
 96a:	16 c0       	rjmp	.+44     	; 0x998 <vfprintf+0x192>
 96c:	38 01       	movw	r6, r16
 96e:	f2 e0       	ldi	r31, 0x02	; 2
 970:	6f 0e       	add	r6, r31
 972:	71 1c       	adc	r7, r1
 974:	f8 01       	movw	r30, r16
 976:	a0 80       	ld	r10, Z
 978:	b1 80       	ldd	r11, Z+1	; 0x01
 97a:	26 ff       	sbrs	r18, 6
 97c:	03 c0       	rjmp	.+6      	; 0x984 <vfprintf+0x17e>
 97e:	65 2d       	mov	r22, r5
 980:	70 e0       	ldi	r23, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <vfprintf+0x182>
 984:	6f ef       	ldi	r22, 0xFF	; 255
 986:	7f ef       	ldi	r23, 0xFF	; 255
 988:	c5 01       	movw	r24, r10
 98a:	2c 87       	std	Y+12, r18	; 0x0c
 98c:	2a d1       	rcall	.+596    	; 0xbe2 <strnlen_P>
 98e:	2c 01       	movw	r4, r24
 990:	2c 85       	ldd	r18, Y+12	; 0x0c
 992:	20 68       	ori	r18, 0x80	; 128
 994:	22 2e       	mov	r2, r18
 996:	83 01       	movw	r16, r6
 998:	23 fc       	sbrc	r2, 3
 99a:	19 c0       	rjmp	.+50     	; 0x9ce <vfprintf+0x1c8>
 99c:	83 2d       	mov	r24, r3
 99e:	90 e0       	ldi	r25, 0x00	; 0
 9a0:	48 16       	cp	r4, r24
 9a2:	59 06       	cpc	r5, r25
 9a4:	a0 f4       	brcc	.+40     	; 0x9ce <vfprintf+0x1c8>
 9a6:	b7 01       	movw	r22, r14
 9a8:	80 e2       	ldi	r24, 0x20	; 32
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	30 d1       	rcall	.+608    	; 0xc0e <fputc>
 9ae:	3a 94       	dec	r3
 9b0:	f5 cf       	rjmp	.-22     	; 0x99c <vfprintf+0x196>
 9b2:	f5 01       	movw	r30, r10
 9b4:	27 fc       	sbrc	r2, 7
 9b6:	85 91       	lpm	r24, Z+
 9b8:	27 fe       	sbrs	r2, 7
 9ba:	81 91       	ld	r24, Z+
 9bc:	5f 01       	movw	r10, r30
 9be:	b7 01       	movw	r22, r14
 9c0:	90 e0       	ldi	r25, 0x00	; 0
 9c2:	25 d1       	rcall	.+586    	; 0xc0e <fputc>
 9c4:	31 10       	cpse	r3, r1
 9c6:	3a 94       	dec	r3
 9c8:	f1 e0       	ldi	r31, 0x01	; 1
 9ca:	4f 1a       	sub	r4, r31
 9cc:	51 08       	sbc	r5, r1
 9ce:	41 14       	cp	r4, r1
 9d0:	51 04       	cpc	r5, r1
 9d2:	79 f7       	brne	.-34     	; 0x9b2 <vfprintf+0x1ac>
 9d4:	de c0       	rjmp	.+444    	; 0xb92 <vfprintf+0x38c>
 9d6:	84 36       	cpi	r24, 0x64	; 100
 9d8:	11 f0       	breq	.+4      	; 0x9de <vfprintf+0x1d8>
 9da:	89 36       	cpi	r24, 0x69	; 105
 9dc:	31 f5       	brne	.+76     	; 0xa2a <vfprintf+0x224>
 9de:	f8 01       	movw	r30, r16
 9e0:	27 ff       	sbrs	r18, 7
 9e2:	07 c0       	rjmp	.+14     	; 0x9f2 <vfprintf+0x1ec>
 9e4:	60 81       	ld	r22, Z
 9e6:	71 81       	ldd	r23, Z+1	; 0x01
 9e8:	82 81       	ldd	r24, Z+2	; 0x02
 9ea:	93 81       	ldd	r25, Z+3	; 0x03
 9ec:	0c 5f       	subi	r16, 0xFC	; 252
 9ee:	1f 4f       	sbci	r17, 0xFF	; 255
 9f0:	08 c0       	rjmp	.+16     	; 0xa02 <vfprintf+0x1fc>
 9f2:	60 81       	ld	r22, Z
 9f4:	71 81       	ldd	r23, Z+1	; 0x01
 9f6:	07 2e       	mov	r0, r23
 9f8:	00 0c       	add	r0, r0
 9fa:	88 0b       	sbc	r24, r24
 9fc:	99 0b       	sbc	r25, r25
 9fe:	0e 5f       	subi	r16, 0xFE	; 254
 a00:	1f 4f       	sbci	r17, 0xFF	; 255
 a02:	2f 76       	andi	r18, 0x6F	; 111
 a04:	72 2e       	mov	r7, r18
 a06:	97 ff       	sbrs	r25, 7
 a08:	09 c0       	rjmp	.+18     	; 0xa1c <vfprintf+0x216>
 a0a:	90 95       	com	r25
 a0c:	80 95       	com	r24
 a0e:	70 95       	com	r23
 a10:	61 95       	neg	r22
 a12:	7f 4f       	sbci	r23, 0xFF	; 255
 a14:	8f 4f       	sbci	r24, 0xFF	; 255
 a16:	9f 4f       	sbci	r25, 0xFF	; 255
 a18:	20 68       	ori	r18, 0x80	; 128
 a1a:	72 2e       	mov	r7, r18
 a1c:	2a e0       	ldi	r18, 0x0A	; 10
 a1e:	30 e0       	ldi	r19, 0x00	; 0
 a20:	a4 01       	movw	r20, r8
 a22:	2d d1       	rcall	.+602    	; 0xc7e <__ultoa_invert>
 a24:	a8 2e       	mov	r10, r24
 a26:	a8 18       	sub	r10, r8
 a28:	43 c0       	rjmp	.+134    	; 0xab0 <vfprintf+0x2aa>
 a2a:	85 37       	cpi	r24, 0x75	; 117
 a2c:	29 f4       	brne	.+10     	; 0xa38 <vfprintf+0x232>
 a2e:	2f 7e       	andi	r18, 0xEF	; 239
 a30:	b2 2e       	mov	r11, r18
 a32:	2a e0       	ldi	r18, 0x0A	; 10
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	25 c0       	rjmp	.+74     	; 0xa82 <vfprintf+0x27c>
 a38:	f2 2f       	mov	r31, r18
 a3a:	f9 7f       	andi	r31, 0xF9	; 249
 a3c:	bf 2e       	mov	r11, r31
 a3e:	8f 36       	cpi	r24, 0x6F	; 111
 a40:	c1 f0       	breq	.+48     	; 0xa72 <vfprintf+0x26c>
 a42:	18 f4       	brcc	.+6      	; 0xa4a <vfprintf+0x244>
 a44:	88 35       	cpi	r24, 0x58	; 88
 a46:	79 f0       	breq	.+30     	; 0xa66 <vfprintf+0x260>
 a48:	ad c0       	rjmp	.+346    	; 0xba4 <vfprintf+0x39e>
 a4a:	80 37       	cpi	r24, 0x70	; 112
 a4c:	19 f0       	breq	.+6      	; 0xa54 <vfprintf+0x24e>
 a4e:	88 37       	cpi	r24, 0x78	; 120
 a50:	21 f0       	breq	.+8      	; 0xa5a <vfprintf+0x254>
 a52:	a8 c0       	rjmp	.+336    	; 0xba4 <vfprintf+0x39e>
 a54:	2f 2f       	mov	r18, r31
 a56:	20 61       	ori	r18, 0x10	; 16
 a58:	b2 2e       	mov	r11, r18
 a5a:	b4 fe       	sbrs	r11, 4
 a5c:	0d c0       	rjmp	.+26     	; 0xa78 <vfprintf+0x272>
 a5e:	8b 2d       	mov	r24, r11
 a60:	84 60       	ori	r24, 0x04	; 4
 a62:	b8 2e       	mov	r11, r24
 a64:	09 c0       	rjmp	.+18     	; 0xa78 <vfprintf+0x272>
 a66:	24 ff       	sbrs	r18, 4
 a68:	0a c0       	rjmp	.+20     	; 0xa7e <vfprintf+0x278>
 a6a:	9f 2f       	mov	r25, r31
 a6c:	96 60       	ori	r25, 0x06	; 6
 a6e:	b9 2e       	mov	r11, r25
 a70:	06 c0       	rjmp	.+12     	; 0xa7e <vfprintf+0x278>
 a72:	28 e0       	ldi	r18, 0x08	; 8
 a74:	30 e0       	ldi	r19, 0x00	; 0
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <vfprintf+0x27c>
 a78:	20 e1       	ldi	r18, 0x10	; 16
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	02 c0       	rjmp	.+4      	; 0xa82 <vfprintf+0x27c>
 a7e:	20 e1       	ldi	r18, 0x10	; 16
 a80:	32 e0       	ldi	r19, 0x02	; 2
 a82:	f8 01       	movw	r30, r16
 a84:	b7 fe       	sbrs	r11, 7
 a86:	07 c0       	rjmp	.+14     	; 0xa96 <vfprintf+0x290>
 a88:	60 81       	ld	r22, Z
 a8a:	71 81       	ldd	r23, Z+1	; 0x01
 a8c:	82 81       	ldd	r24, Z+2	; 0x02
 a8e:	93 81       	ldd	r25, Z+3	; 0x03
 a90:	0c 5f       	subi	r16, 0xFC	; 252
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <vfprintf+0x29c>
 a96:	60 81       	ld	r22, Z
 a98:	71 81       	ldd	r23, Z+1	; 0x01
 a9a:	80 e0       	ldi	r24, 0x00	; 0
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 5f       	subi	r16, 0xFE	; 254
 aa0:	1f 4f       	sbci	r17, 0xFF	; 255
 aa2:	a4 01       	movw	r20, r8
 aa4:	ec d0       	rcall	.+472    	; 0xc7e <__ultoa_invert>
 aa6:	a8 2e       	mov	r10, r24
 aa8:	a8 18       	sub	r10, r8
 aaa:	fb 2d       	mov	r31, r11
 aac:	ff 77       	andi	r31, 0x7F	; 127
 aae:	7f 2e       	mov	r7, r31
 ab0:	76 fe       	sbrs	r7, 6
 ab2:	0b c0       	rjmp	.+22     	; 0xaca <vfprintf+0x2c4>
 ab4:	37 2d       	mov	r19, r7
 ab6:	3e 7f       	andi	r19, 0xFE	; 254
 ab8:	a5 14       	cp	r10, r5
 aba:	50 f4       	brcc	.+20     	; 0xad0 <vfprintf+0x2ca>
 abc:	74 fe       	sbrs	r7, 4
 abe:	0a c0       	rjmp	.+20     	; 0xad4 <vfprintf+0x2ce>
 ac0:	72 fc       	sbrc	r7, 2
 ac2:	08 c0       	rjmp	.+16     	; 0xad4 <vfprintf+0x2ce>
 ac4:	37 2d       	mov	r19, r7
 ac6:	3e 7e       	andi	r19, 0xEE	; 238
 ac8:	05 c0       	rjmp	.+10     	; 0xad4 <vfprintf+0x2ce>
 aca:	ba 2c       	mov	r11, r10
 acc:	37 2d       	mov	r19, r7
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <vfprintf+0x2d0>
 ad0:	ba 2c       	mov	r11, r10
 ad2:	01 c0       	rjmp	.+2      	; 0xad6 <vfprintf+0x2d0>
 ad4:	b5 2c       	mov	r11, r5
 ad6:	34 ff       	sbrs	r19, 4
 ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <vfprintf+0x2ee>
 ada:	fe 01       	movw	r30, r28
 adc:	ea 0d       	add	r30, r10
 ade:	f1 1d       	adc	r31, r1
 ae0:	80 81       	ld	r24, Z
 ae2:	80 33       	cpi	r24, 0x30	; 48
 ae4:	11 f4       	brne	.+4      	; 0xaea <vfprintf+0x2e4>
 ae6:	39 7e       	andi	r19, 0xE9	; 233
 ae8:	09 c0       	rjmp	.+18     	; 0xafc <vfprintf+0x2f6>
 aea:	32 ff       	sbrs	r19, 2
 aec:	06 c0       	rjmp	.+12     	; 0xafa <vfprintf+0x2f4>
 aee:	b3 94       	inc	r11
 af0:	b3 94       	inc	r11
 af2:	04 c0       	rjmp	.+8      	; 0xafc <vfprintf+0x2f6>
 af4:	83 2f       	mov	r24, r19
 af6:	86 78       	andi	r24, 0x86	; 134
 af8:	09 f0       	breq	.+2      	; 0xafc <vfprintf+0x2f6>
 afa:	b3 94       	inc	r11
 afc:	33 fd       	sbrc	r19, 3
 afe:	12 c0       	rjmp	.+36     	; 0xb24 <vfprintf+0x31e>
 b00:	30 ff       	sbrs	r19, 0
 b02:	06 c0       	rjmp	.+12     	; 0xb10 <vfprintf+0x30a>
 b04:	5a 2c       	mov	r5, r10
 b06:	b3 14       	cp	r11, r3
 b08:	18 f4       	brcc	.+6      	; 0xb10 <vfprintf+0x30a>
 b0a:	53 0c       	add	r5, r3
 b0c:	5b 18       	sub	r5, r11
 b0e:	b3 2c       	mov	r11, r3
 b10:	b3 14       	cp	r11, r3
 b12:	60 f4       	brcc	.+24     	; 0xb2c <vfprintf+0x326>
 b14:	b7 01       	movw	r22, r14
 b16:	80 e2       	ldi	r24, 0x20	; 32
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	3c 87       	std	Y+12, r19	; 0x0c
 b1c:	78 d0       	rcall	.+240    	; 0xc0e <fputc>
 b1e:	b3 94       	inc	r11
 b20:	3c 85       	ldd	r19, Y+12	; 0x0c
 b22:	f6 cf       	rjmp	.-20     	; 0xb10 <vfprintf+0x30a>
 b24:	b3 14       	cp	r11, r3
 b26:	10 f4       	brcc	.+4      	; 0xb2c <vfprintf+0x326>
 b28:	3b 18       	sub	r3, r11
 b2a:	01 c0       	rjmp	.+2      	; 0xb2e <vfprintf+0x328>
 b2c:	31 2c       	mov	r3, r1
 b2e:	34 ff       	sbrs	r19, 4
 b30:	11 c0       	rjmp	.+34     	; 0xb54 <vfprintf+0x34e>
 b32:	b7 01       	movw	r22, r14
 b34:	80 e3       	ldi	r24, 0x30	; 48
 b36:	90 e0       	ldi	r25, 0x00	; 0
 b38:	3c 87       	std	Y+12, r19	; 0x0c
 b3a:	69 d0       	rcall	.+210    	; 0xc0e <fputc>
 b3c:	3c 85       	ldd	r19, Y+12	; 0x0c
 b3e:	32 ff       	sbrs	r19, 2
 b40:	16 c0       	rjmp	.+44     	; 0xb6e <vfprintf+0x368>
 b42:	31 fd       	sbrc	r19, 1
 b44:	03 c0       	rjmp	.+6      	; 0xb4c <vfprintf+0x346>
 b46:	88 e7       	ldi	r24, 0x78	; 120
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	02 c0       	rjmp	.+4      	; 0xb50 <vfprintf+0x34a>
 b4c:	88 e5       	ldi	r24, 0x58	; 88
 b4e:	90 e0       	ldi	r25, 0x00	; 0
 b50:	b7 01       	movw	r22, r14
 b52:	0c c0       	rjmp	.+24     	; 0xb6c <vfprintf+0x366>
 b54:	83 2f       	mov	r24, r19
 b56:	86 78       	andi	r24, 0x86	; 134
 b58:	51 f0       	breq	.+20     	; 0xb6e <vfprintf+0x368>
 b5a:	31 ff       	sbrs	r19, 1
 b5c:	02 c0       	rjmp	.+4      	; 0xb62 <vfprintf+0x35c>
 b5e:	8b e2       	ldi	r24, 0x2B	; 43
 b60:	01 c0       	rjmp	.+2      	; 0xb64 <vfprintf+0x35e>
 b62:	80 e2       	ldi	r24, 0x20	; 32
 b64:	37 fd       	sbrc	r19, 7
 b66:	8d e2       	ldi	r24, 0x2D	; 45
 b68:	b7 01       	movw	r22, r14
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	50 d0       	rcall	.+160    	; 0xc0e <fputc>
 b6e:	a5 14       	cp	r10, r5
 b70:	30 f4       	brcc	.+12     	; 0xb7e <vfprintf+0x378>
 b72:	b7 01       	movw	r22, r14
 b74:	80 e3       	ldi	r24, 0x30	; 48
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	4a d0       	rcall	.+148    	; 0xc0e <fputc>
 b7a:	5a 94       	dec	r5
 b7c:	f8 cf       	rjmp	.-16     	; 0xb6e <vfprintf+0x368>
 b7e:	aa 94       	dec	r10
 b80:	f4 01       	movw	r30, r8
 b82:	ea 0d       	add	r30, r10
 b84:	f1 1d       	adc	r31, r1
 b86:	80 81       	ld	r24, Z
 b88:	b7 01       	movw	r22, r14
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	40 d0       	rcall	.+128    	; 0xc0e <fputc>
 b8e:	a1 10       	cpse	r10, r1
 b90:	f6 cf       	rjmp	.-20     	; 0xb7e <vfprintf+0x378>
 b92:	33 20       	and	r3, r3
 b94:	09 f4       	brne	.+2      	; 0xb98 <vfprintf+0x392>
 b96:	5d ce       	rjmp	.-838    	; 0x852 <vfprintf+0x4c>
 b98:	b7 01       	movw	r22, r14
 b9a:	80 e2       	ldi	r24, 0x20	; 32
 b9c:	90 e0       	ldi	r25, 0x00	; 0
 b9e:	37 d0       	rcall	.+110    	; 0xc0e <fputc>
 ba0:	3a 94       	dec	r3
 ba2:	f7 cf       	rjmp	.-18     	; 0xb92 <vfprintf+0x38c>
 ba4:	f7 01       	movw	r30, r14
 ba6:	86 81       	ldd	r24, Z+6	; 0x06
 ba8:	97 81       	ldd	r25, Z+7	; 0x07
 baa:	02 c0       	rjmp	.+4      	; 0xbb0 <vfprintf+0x3aa>
 bac:	8f ef       	ldi	r24, 0xFF	; 255
 bae:	9f ef       	ldi	r25, 0xFF	; 255
 bb0:	2c 96       	adiw	r28, 0x0c	; 12
 bb2:	0f b6       	in	r0, 0x3f	; 63
 bb4:	f8 94       	cli
 bb6:	de bf       	out	0x3e, r29	; 62
 bb8:	0f be       	out	0x3f, r0	; 63
 bba:	cd bf       	out	0x3d, r28	; 61
 bbc:	df 91       	pop	r29
 bbe:	cf 91       	pop	r28
 bc0:	1f 91       	pop	r17
 bc2:	0f 91       	pop	r16
 bc4:	ff 90       	pop	r15
 bc6:	ef 90       	pop	r14
 bc8:	df 90       	pop	r13
 bca:	cf 90       	pop	r12
 bcc:	bf 90       	pop	r11
 bce:	af 90       	pop	r10
 bd0:	9f 90       	pop	r9
 bd2:	8f 90       	pop	r8
 bd4:	7f 90       	pop	r7
 bd6:	6f 90       	pop	r6
 bd8:	5f 90       	pop	r5
 bda:	4f 90       	pop	r4
 bdc:	3f 90       	pop	r3
 bde:	2f 90       	pop	r2
 be0:	08 95       	ret

00000be2 <strnlen_P>:
 be2:	fc 01       	movw	r30, r24
 be4:	05 90       	lpm	r0, Z+
 be6:	61 50       	subi	r22, 0x01	; 1
 be8:	70 40       	sbci	r23, 0x00	; 0
 bea:	01 10       	cpse	r0, r1
 bec:	d8 f7       	brcc	.-10     	; 0xbe4 <strnlen_P+0x2>
 bee:	80 95       	com	r24
 bf0:	90 95       	com	r25
 bf2:	8e 0f       	add	r24, r30
 bf4:	9f 1f       	adc	r25, r31
 bf6:	08 95       	ret

00000bf8 <strnlen>:
 bf8:	fc 01       	movw	r30, r24
 bfa:	61 50       	subi	r22, 0x01	; 1
 bfc:	70 40       	sbci	r23, 0x00	; 0
 bfe:	01 90       	ld	r0, Z+
 c00:	01 10       	cpse	r0, r1
 c02:	d8 f7       	brcc	.-10     	; 0xbfa <strnlen+0x2>
 c04:	80 95       	com	r24
 c06:	90 95       	com	r25
 c08:	8e 0f       	add	r24, r30
 c0a:	9f 1f       	adc	r25, r31
 c0c:	08 95       	ret

00000c0e <fputc>:
 c0e:	0f 93       	push	r16
 c10:	1f 93       	push	r17
 c12:	cf 93       	push	r28
 c14:	df 93       	push	r29
 c16:	fb 01       	movw	r30, r22
 c18:	23 81       	ldd	r18, Z+3	; 0x03
 c1a:	21 fd       	sbrc	r18, 1
 c1c:	03 c0       	rjmp	.+6      	; 0xc24 <fputc+0x16>
 c1e:	8f ef       	ldi	r24, 0xFF	; 255
 c20:	9f ef       	ldi	r25, 0xFF	; 255
 c22:	28 c0       	rjmp	.+80     	; 0xc74 <fputc+0x66>
 c24:	22 ff       	sbrs	r18, 2
 c26:	16 c0       	rjmp	.+44     	; 0xc54 <fputc+0x46>
 c28:	46 81       	ldd	r20, Z+6	; 0x06
 c2a:	57 81       	ldd	r21, Z+7	; 0x07
 c2c:	24 81       	ldd	r18, Z+4	; 0x04
 c2e:	35 81       	ldd	r19, Z+5	; 0x05
 c30:	42 17       	cp	r20, r18
 c32:	53 07       	cpc	r21, r19
 c34:	44 f4       	brge	.+16     	; 0xc46 <fputc+0x38>
 c36:	a0 81       	ld	r26, Z
 c38:	b1 81       	ldd	r27, Z+1	; 0x01
 c3a:	9d 01       	movw	r18, r26
 c3c:	2f 5f       	subi	r18, 0xFF	; 255
 c3e:	3f 4f       	sbci	r19, 0xFF	; 255
 c40:	31 83       	std	Z+1, r19	; 0x01
 c42:	20 83       	st	Z, r18
 c44:	8c 93       	st	X, r24
 c46:	26 81       	ldd	r18, Z+6	; 0x06
 c48:	37 81       	ldd	r19, Z+7	; 0x07
 c4a:	2f 5f       	subi	r18, 0xFF	; 255
 c4c:	3f 4f       	sbci	r19, 0xFF	; 255
 c4e:	37 83       	std	Z+7, r19	; 0x07
 c50:	26 83       	std	Z+6, r18	; 0x06
 c52:	10 c0       	rjmp	.+32     	; 0xc74 <fputc+0x66>
 c54:	eb 01       	movw	r28, r22
 c56:	09 2f       	mov	r16, r25
 c58:	18 2f       	mov	r17, r24
 c5a:	00 84       	ldd	r0, Z+8	; 0x08
 c5c:	f1 85       	ldd	r31, Z+9	; 0x09
 c5e:	e0 2d       	mov	r30, r0
 c60:	19 95       	eicall
 c62:	89 2b       	or	r24, r25
 c64:	e1 f6       	brne	.-72     	; 0xc1e <fputc+0x10>
 c66:	8e 81       	ldd	r24, Y+6	; 0x06
 c68:	9f 81       	ldd	r25, Y+7	; 0x07
 c6a:	01 96       	adiw	r24, 0x01	; 1
 c6c:	9f 83       	std	Y+7, r25	; 0x07
 c6e:	8e 83       	std	Y+6, r24	; 0x06
 c70:	81 2f       	mov	r24, r17
 c72:	90 2f       	mov	r25, r16
 c74:	df 91       	pop	r29
 c76:	cf 91       	pop	r28
 c78:	1f 91       	pop	r17
 c7a:	0f 91       	pop	r16
 c7c:	08 95       	ret

00000c7e <__ultoa_invert>:
 c7e:	fa 01       	movw	r30, r20
 c80:	aa 27       	eor	r26, r26
 c82:	28 30       	cpi	r18, 0x08	; 8
 c84:	51 f1       	breq	.+84     	; 0xcda <__ultoa_invert+0x5c>
 c86:	20 31       	cpi	r18, 0x10	; 16
 c88:	81 f1       	breq	.+96     	; 0xcea <__ultoa_invert+0x6c>
 c8a:	e8 94       	clt
 c8c:	6f 93       	push	r22
 c8e:	6e 7f       	andi	r22, 0xFE	; 254
 c90:	6e 5f       	subi	r22, 0xFE	; 254
 c92:	7f 4f       	sbci	r23, 0xFF	; 255
 c94:	8f 4f       	sbci	r24, 0xFF	; 255
 c96:	9f 4f       	sbci	r25, 0xFF	; 255
 c98:	af 4f       	sbci	r26, 0xFF	; 255
 c9a:	b1 e0       	ldi	r27, 0x01	; 1
 c9c:	3e d0       	rcall	.+124    	; 0xd1a <__ultoa_invert+0x9c>
 c9e:	b4 e0       	ldi	r27, 0x04	; 4
 ca0:	3c d0       	rcall	.+120    	; 0xd1a <__ultoa_invert+0x9c>
 ca2:	67 0f       	add	r22, r23
 ca4:	78 1f       	adc	r23, r24
 ca6:	89 1f       	adc	r24, r25
 ca8:	9a 1f       	adc	r25, r26
 caa:	a1 1d       	adc	r26, r1
 cac:	68 0f       	add	r22, r24
 cae:	79 1f       	adc	r23, r25
 cb0:	8a 1f       	adc	r24, r26
 cb2:	91 1d       	adc	r25, r1
 cb4:	a1 1d       	adc	r26, r1
 cb6:	6a 0f       	add	r22, r26
 cb8:	71 1d       	adc	r23, r1
 cba:	81 1d       	adc	r24, r1
 cbc:	91 1d       	adc	r25, r1
 cbe:	a1 1d       	adc	r26, r1
 cc0:	20 d0       	rcall	.+64     	; 0xd02 <__ultoa_invert+0x84>
 cc2:	09 f4       	brne	.+2      	; 0xcc6 <__ultoa_invert+0x48>
 cc4:	68 94       	set
 cc6:	3f 91       	pop	r19
 cc8:	2a e0       	ldi	r18, 0x0A	; 10
 cca:	26 9f       	mul	r18, r22
 ccc:	11 24       	eor	r1, r1
 cce:	30 19       	sub	r19, r0
 cd0:	30 5d       	subi	r19, 0xD0	; 208
 cd2:	31 93       	st	Z+, r19
 cd4:	de f6       	brtc	.-74     	; 0xc8c <__ultoa_invert+0xe>
 cd6:	cf 01       	movw	r24, r30
 cd8:	08 95       	ret
 cda:	46 2f       	mov	r20, r22
 cdc:	47 70       	andi	r20, 0x07	; 7
 cde:	40 5d       	subi	r20, 0xD0	; 208
 ce0:	41 93       	st	Z+, r20
 ce2:	b3 e0       	ldi	r27, 0x03	; 3
 ce4:	0f d0       	rcall	.+30     	; 0xd04 <__ultoa_invert+0x86>
 ce6:	c9 f7       	brne	.-14     	; 0xcda <__ultoa_invert+0x5c>
 ce8:	f6 cf       	rjmp	.-20     	; 0xcd6 <__ultoa_invert+0x58>
 cea:	46 2f       	mov	r20, r22
 cec:	4f 70       	andi	r20, 0x0F	; 15
 cee:	40 5d       	subi	r20, 0xD0	; 208
 cf0:	4a 33       	cpi	r20, 0x3A	; 58
 cf2:	18 f0       	brcs	.+6      	; 0xcfa <__ultoa_invert+0x7c>
 cf4:	49 5d       	subi	r20, 0xD9	; 217
 cf6:	31 fd       	sbrc	r19, 1
 cf8:	40 52       	subi	r20, 0x20	; 32
 cfa:	41 93       	st	Z+, r20
 cfc:	02 d0       	rcall	.+4      	; 0xd02 <__ultoa_invert+0x84>
 cfe:	a9 f7       	brne	.-22     	; 0xcea <__ultoa_invert+0x6c>
 d00:	ea cf       	rjmp	.-44     	; 0xcd6 <__ultoa_invert+0x58>
 d02:	b4 e0       	ldi	r27, 0x04	; 4
 d04:	a6 95       	lsr	r26
 d06:	97 95       	ror	r25
 d08:	87 95       	ror	r24
 d0a:	77 95       	ror	r23
 d0c:	67 95       	ror	r22
 d0e:	ba 95       	dec	r27
 d10:	c9 f7       	brne	.-14     	; 0xd04 <__ultoa_invert+0x86>
 d12:	00 97       	sbiw	r24, 0x00	; 0
 d14:	61 05       	cpc	r22, r1
 d16:	71 05       	cpc	r23, r1
 d18:	08 95       	ret
 d1a:	9b 01       	movw	r18, r22
 d1c:	ac 01       	movw	r20, r24
 d1e:	0a 2e       	mov	r0, r26
 d20:	06 94       	lsr	r0
 d22:	57 95       	ror	r21
 d24:	47 95       	ror	r20
 d26:	37 95       	ror	r19
 d28:	27 95       	ror	r18
 d2a:	ba 95       	dec	r27
 d2c:	c9 f7       	brne	.-14     	; 0xd20 <__ultoa_invert+0xa2>
 d2e:	62 0f       	add	r22, r18
 d30:	73 1f       	adc	r23, r19
 d32:	84 1f       	adc	r24, r20
 d34:	95 1f       	adc	r25, r21
 d36:	a0 1d       	adc	r26, r0
 d38:	08 95       	ret

00000d3a <_exit>:
 d3a:	f8 94       	cli

00000d3c <__stop_program>:
 d3c:	ff cf       	rjmp	.-2      	; 0xd3c <__stop_program>
