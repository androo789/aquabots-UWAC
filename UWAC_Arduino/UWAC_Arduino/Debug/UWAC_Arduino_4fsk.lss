
UWAC_Arduino_4fsk.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000170  00800100  00000e1a  00000eae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e1a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800270  00800270  0000101e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000101e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000107c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d67  00000000  00000000  000011a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a8  00000000  00000000  00001f0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000057c  00000000  00000000  000024b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002a30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000372  00000000  00000000  00002d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010f8  00000000  00000000  000030e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000041da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e1       	ldi	r30, 0x1A	; 26
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 37       	cpi	r26, 0x70	; 112
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e7       	ldi	r26, 0x70	; 112
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 37       	cpi	r26, 0x7A	; 122
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 49 03 	call	0x692	; 0x692 <main>
  9e:	0c 94 0b 07 	jmp	0xe16	; 0xe16 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CRC>:
 * @param received Is the data received or not
 *
 * @return The generated checksum
*/
int CRC(uint8_t data[100], int length, uint16_t poly, bool received)
{
  a6:	2f 92       	push	r2
  a8:	3f 92       	push	r3
  aa:	4f 92       	push	r4
  ac:	5f 92       	push	r5
  ae:	6f 92       	push	r6
  b0:	7f 92       	push	r7
  b2:	8f 92       	push	r8
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	60 97       	sbiw	r28, 0x10	; 16
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	3c 01       	movw	r6, r24
  dc:	8b 01       	movw	r16, r22
  de:	2a 01       	movw	r4, r20
  e0:	f2 2e       	mov	r15, r18
    #ifdef DEBUG // Debugging
    printf("Length: %i\n", length);
  e2:	1f 93       	push	r17
  e4:	6f 93       	push	r22
  e6:	84 eb       	ldi	r24, 0xB4	; 180
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	9f 93       	push	r25
  ec:	8f 93       	push	r24
  ee:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	10 16       	cp	r1, r16
  fc:	11 06       	cpc	r1, r17
  fe:	0c f0       	brlt	.+2      	; 0x102 <CRC+0x5c>
 100:	ca c0       	rjmp	.+404    	; 0x296 <CRC+0x1f0>
 102:	43 01       	movw	r8, r6
 104:	60 0e       	add	r6, r16
 106:	71 1e       	adc	r7, r17
 108:	21 2c       	mov	r2, r1
 10a:	31 2c       	mov	r3, r1
    {
        #ifdef DEBUG // Debugging
        printf("Data: %i, ", (uint8_t)data[i]);
 10c:	00 e8       	ldi	r16, 0x80	; 128
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	54 01       	movw	r10, r8
 112:	d4 01       	movw	r26, r8
 114:	8d 91       	ld	r24, X+
 116:	4d 01       	movw	r8, r26
 118:	1f 92       	push	r1
 11a:	8f 93       	push	r24
 11c:	1f 93       	push	r17
 11e:	0f 93       	push	r16
 120:	0e 94 09 04 	call	0x812	; 0x812 <printf>
        #endif // DEBUG

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
 124:	32 2c       	mov	r3, r2
 126:	22 24       	eor	r2, r2
 128:	f5 01       	movw	r30, r10
 12a:	80 81       	ld	r24, Z
 12c:	28 2a       	or	r2, r24
    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	86 14       	cp	r8, r6
 138:	97 04       	cpc	r9, r7
 13a:	51 f7       	brne	.-44     	; 0x110 <CRC+0x6a>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
 13c:	3f 92       	push	r3
 13e:	2f 92       	push	r2
 140:	8b e8       	ldi	r24, 0x8B	; 139
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	f1 10       	cpse	r15, r1
 156:	02 c0       	rjmp	.+4      	; 0x15c <CRC+0xb6>
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
 158:	32 2c       	mov	r3, r2
 15a:	22 24       	eor	r2, r2
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 15c:	92 01       	movw	r18, r4
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	cb 01       	movw	r24, r22
 168:	49 86       	std	Y+9, r4	; 0x09
 16a:	3a 87       	std	Y+10, r19	; 0x0a
 16c:	4b 87       	std	Y+11, r20	; 0x0b
 16e:	5c 87       	std	Y+12, r21	; 0x0c
 170:	6d 87       	std	Y+13, r22	; 0x0d
 172:	7e 87       	std	Y+14, r23	; 0x0e
 174:	8f 87       	std	Y+15, r24	; 0x0f
 176:	98 8b       	std	Y+16, r25	; 0x10
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	23 16       	cp	r2, r19
 17c:	31 04       	cpc	r3, r1
 17e:	08 f4       	brcc	.+2      	; 0x182 <CRC+0xdc>
 180:	9b c0       	rjmp	.+310    	; 0x2b8 <CRC+0x212>
        while (calcPoly < allData)
 182:	a1 01       	movw	r20, r2
 184:	60 e0       	ldi	r22, 0x00	; 0
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	80 e0       	ldi	r24, 0x00	; 0
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	dc 01       	movw	r26, r24
 18e:	29 82       	std	Y+1, r2	; 0x01
 190:	5a 83       	std	Y+2, r21	; 0x02
 192:	6b 83       	std	Y+3, r22	; 0x03
 194:	7c 83       	std	Y+4, r23	; 0x04
 196:	8d 83       	std	Y+5, r24	; 0x05
 198:	9e 83       	std	Y+6, r25	; 0x06
 19a:	af 83       	std	Y+7, r26	; 0x07
 19c:	b8 87       	std	Y+8, r27	; 0x08
 19e:	29 85       	ldd	r18, Y+9	; 0x09
 1a0:	3a 85       	ldd	r19, Y+10	; 0x0a
 1a2:	4b 85       	ldd	r20, Y+11	; 0x0b
 1a4:	5c 85       	ldd	r21, Y+12	; 0x0c
 1a6:	6d 85       	ldd	r22, Y+13	; 0x0d
 1a8:	7e 85       	ldd	r23, Y+14	; 0x0e
 1aa:	8f 85       	ldd	r24, Y+15	; 0x0f
 1ac:	98 89       	ldd	r25, Y+16	; 0x10
 1ae:	a9 80       	ldd	r10, Y+1	; 0x01
 1b0:	ba 80       	ldd	r11, Y+2	; 0x02
 1b2:	c1 2c       	mov	r12, r1
 1b4:	d1 2c       	mov	r13, r1
 1b6:	e1 2c       	mov	r14, r1
 1b8:	f1 2c       	mov	r15, r1
 1ba:	00 e0       	ldi	r16, 0x00	; 0
 1bc:	10 e0       	ldi	r17, 0x00	; 0
 1be:	0e 94 00 04 	call	0x800	; 0x800 <__cmpdi2>
 1c2:	c8 f5       	brcc	.+114    	; 0x236 <CRC+0x190>
 1c4:	82 2e       	mov	r8, r18
 1c6:	93 2e       	mov	r9, r19
 1c8:	44 2e       	mov	r4, r20
 1ca:	75 2e       	mov	r7, r21
 1cc:	66 2e       	mov	r6, r22
 1ce:	57 2e       	mov	r5, r23
 1d0:	f8 2f       	mov	r31, r24
 1d2:	e9 2f       	mov	r30, r25
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
 1d4:	28 2d       	mov	r18, r8
 1d6:	39 2d       	mov	r19, r9
 1d8:	44 2d       	mov	r20, r4
 1da:	57 2d       	mov	r21, r7
 1dc:	66 2d       	mov	r22, r6
 1de:	75 2d       	mov	r23, r5
 1e0:	8f 2f       	mov	r24, r31
 1e2:	9e 2f       	mov	r25, r30
 1e4:	01 e0       	ldi	r16, 0x01	; 1
 1e6:	0e 94 c9 03 	call	0x792	; 0x792 <__ashldi3>
 1ea:	82 2e       	mov	r8, r18
 1ec:	93 2e       	mov	r9, r19
 1ee:	44 2e       	mov	r4, r20
 1f0:	75 2e       	mov	r7, r21
 1f2:	66 2e       	mov	r6, r22
 1f4:	57 2e       	mov	r5, r23
 1f6:	f8 2f       	mov	r31, r24
 1f8:	e9 2f       	mov	r30, r25
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
 1fa:	a9 80       	ldd	r10, Y+1	; 0x01
 1fc:	ba 80       	ldd	r11, Y+2	; 0x02
 1fe:	cb 80       	ldd	r12, Y+3	; 0x03
 200:	dc 80       	ldd	r13, Y+4	; 0x04
 202:	ed 80       	ldd	r14, Y+5	; 0x05
 204:	fe 80       	ldd	r15, Y+6	; 0x06
 206:	0f 81       	ldd	r16, Y+7	; 0x07
 208:	18 85       	ldd	r17, Y+8	; 0x08
 20a:	0e 94 00 04 	call	0x800	; 0x800 <__cmpdi2>
 20e:	10 f3       	brcs	.-60     	; 0x1d4 <CRC+0x12e>
 210:	57 2d       	mov	r21, r7
 212:	8f 2f       	mov	r24, r31
 214:	9e 2f       	mov	r25, r30
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one
 216:	28 2d       	mov	r18, r8
 218:	39 2d       	mov	r19, r9
 21a:	66 2d       	mov	r22, r6
 21c:	75 2d       	mov	r23, r5
 21e:	01 e0       	ldi	r16, 0x01	; 1
 220:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <__lshrdi3>
 224:	42 2e       	mov	r4, r18
 226:	53 2e       	mov	r5, r19
 228:	64 2e       	mov	r6, r20
 22a:	75 2e       	mov	r7, r21
 22c:	86 2e       	mov	r8, r22
 22e:	97 2e       	mov	r9, r23
 230:	a8 2e       	mov	r10, r24
 232:	b9 2e       	mov	r11, r25
 234:	08 c0       	rjmp	.+16     	; 0x246 <CRC+0x1a0>
    if (!received) // Check if the data is received or not
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 236:	49 84       	ldd	r4, Y+9	; 0x09
 238:	5a 84       	ldd	r5, Y+10	; 0x0a
 23a:	6b 84       	ldd	r6, Y+11	; 0x0b
 23c:	7c 84       	ldd	r7, Y+12	; 0x0c
 23e:	8d 84       	ldd	r8, Y+13	; 0x0d
 240:	9e 84       	ldd	r9, Y+14	; 0x0e
 242:	af 84       	ldd	r10, Y+15	; 0x0f
 244:	b8 88       	ldd	r11, Y+16	; 0x10
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one

        #ifdef DEBUG // Debugging
        printf("%i^%i=", allData, calcPoly);
 246:	bf 92       	push	r11
 248:	af 92       	push	r10
 24a:	9f 92       	push	r9
 24c:	8f 92       	push	r8
 24e:	7f 92       	push	r7
 250:	6f 92       	push	r6
 252:	5f 92       	push	r5
 254:	4f 92       	push	r4
 256:	3f 92       	push	r3
 258:	2f 92       	push	r2
 25a:	a9 e9       	ldi	r26, 0x99	; 153
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	bf 93       	push	r27
 260:	af 93       	push	r26
 262:	0e 94 09 04 	call	0x812	; 0x812 <printf>
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR
 266:	24 24       	eor	r2, r4
 268:	35 24       	eor	r3, r5

        #ifdef DEBUG // Debugging
        printf("%i\n", allData);
 26a:	3f 92       	push	r3
 26c:	2f 92       	push	r2
 26e:	ac eb       	ldi	r26, 0xBC	; 188
 270:	b1 e0       	ldi	r27, 0x01	; 1
 272:	bf 93       	push	r27
 274:	af 93       	push	r26
 276:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 27a:	0f b6       	in	r0, 0x3f	; 63
 27c:	f8 94       	cli
 27e:	de bf       	out	0x3e, r29	; 62
 280:	0f be       	out	0x3f, r0	; 63
 282:	cd bf       	out	0x3d, r28	; 61
 284:	3f ef       	ldi	r19, 0xFF	; 255
 286:	23 16       	cp	r2, r19
 288:	31 04       	cpc	r3, r1
 28a:	08 f0       	brcs	.+2      	; 0x28e <CRC+0x1e8>
 28c:	7a cf       	rjmp	.-268    	; 0x182 <CRC+0xdc>
 28e:	14 c0       	rjmp	.+40     	; 0x2b8 <CRC+0x212>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 290:	21 2c       	mov	r2, r1
 292:	31 2c       	mov	r3, r1
 294:	11 c0       	rjmp	.+34     	; 0x2b8 <CRC+0x212>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %u\n", allData);
 296:	1f 92       	push	r1
 298:	1f 92       	push	r1
 29a:	8b e8       	ldi	r24, 0x8B	; 139
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	9f 93       	push	r25
 2a0:	8f 93       	push	r24
 2a2:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 2a6:	0f 90       	pop	r0
 2a8:	0f 90       	pop	r0
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	f1 10       	cpse	r15, r1
 2b0:	ef cf       	rjmp	.-34     	; 0x290 <CRC+0x1ea>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    uint16_t allData = 0;
 2b2:	21 2c       	mov	r2, r1
 2b4:	31 2c       	mov	r3, r1
 2b6:	50 cf       	rjmp	.-352    	; 0x158 <CRC+0xb2>

        calcPoly = poly; // Reset the polynomial to its original value
    }

    return allData;
}
 2b8:	c1 01       	movw	r24, r2
 2ba:	60 96       	adiw	r28, 0x10	; 16
 2bc:	0f b6       	in	r0, 0x3f	; 63
 2be:	f8 94       	cli
 2c0:	de bf       	out	0x3e, r29	; 62
 2c2:	0f be       	out	0x3f, r0	; 63
 2c4:	cd bf       	out	0x3d, r28	; 61
 2c6:	df 91       	pop	r29
 2c8:	cf 91       	pop	r28
 2ca:	1f 91       	pop	r17
 2cc:	0f 91       	pop	r16
 2ce:	ff 90       	pop	r15
 2d0:	ef 90       	pop	r14
 2d2:	df 90       	pop	r13
 2d4:	cf 90       	pop	r12
 2d6:	bf 90       	pop	r11
 2d8:	af 90       	pop	r10
 2da:	9f 90       	pop	r9
 2dc:	8f 90       	pop	r8
 2de:	7f 90       	pop	r7
 2e0:	6f 90       	pop	r6
 2e2:	5f 90       	pop	r5
 2e4:	4f 90       	pop	r4
 2e6:	3f 90       	pop	r3
 2e8:	2f 90       	pop	r2
 2ea:	08 95       	ret

000002ec <fillDataArray>:
 *
 * @return The array of integers which can be send.
 *
*/
uint8_t* fillDataArray(char data[100])
{
 2ec:	3f 92       	push	r3
 2ee:	4f 92       	push	r4
 2f0:	5f 92       	push	r5
 2f2:	6f 92       	push	r6
 2f4:	7f 92       	push	r7
 2f6:	8f 92       	push	r8
 2f8:	9f 92       	push	r9
 2fa:	af 92       	push	r10
 2fc:	bf 92       	push	r11
 2fe:	cf 92       	push	r12
 300:	df 92       	push	r13
 302:	ef 92       	push	r14
 304:	ff 92       	push	r15
 306:	0f 93       	push	r16
 308:	1f 93       	push	r17
 30a:	cf 93       	push	r28
 30c:	df 93       	push	r29
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
 312:	c4 5f       	subi	r28, 0xF4	; 244
 314:	d1 40       	sbci	r29, 0x01	; 1
 316:	0f b6       	in	r0, 0x3f	; 63
 318:	f8 94       	cli
 31a:	de bf       	out	0x3e, r29	; 62
 31c:	0f be       	out	0x3f, r0	; 63
 31e:	cd bf       	out	0x3d, r28	; 61
 320:	8c 01       	movw	r16, r24
    // Reset some stuff and initialize some variables
    dataLength = 0;
 322:	10 92 71 02 	sts	0x0271, r1
 326:	10 92 70 02 	sts	0x0270, r1
 32a:	2c 01       	movw	r4, r24
 32c:	9e 01       	movw	r18, r28
 32e:	2f 56       	subi	r18, 0x6F	; 111
 330:	3e 4f       	sbci	r19, 0xFE	; 254
    int i;
    uint8_t ret[400]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 332:	dc 01       	movw	r26, r24
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	05 c0       	rjmp	.+10     	; 0x344 <fillDataArray+0x58>
    {
        data_num[i] = (uint8_t)data[i];
 33a:	4d 91       	ld	r20, X+
 33c:	f9 01       	movw	r30, r18
 33e:	41 93       	st	Z+, r20
 340:	9f 01       	movw	r18, r30
    int i;
    uint8_t ret[400]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 342:	01 96       	adiw	r24, 0x01	; 1
 344:	f8 01       	movw	r30, r16
 346:	01 90       	ld	r0, Z+
 348:	00 20       	and	r0, r0
 34a:	e9 f7       	brne	.-6      	; 0x346 <fillDataArray+0x5a>
 34c:	31 97       	sbiw	r30, 0x01	; 1
 34e:	bf 01       	movw	r22, r30
 350:	60 1b       	sub	r22, r16
 352:	71 0b       	sbc	r23, r17
 354:	86 17       	cp	r24, r22
 356:	97 07       	cpc	r25, r23
 358:	80 f3       	brcs	.-32     	; 0x33a <fillDataArray+0x4e>
    {
        data_num[i] = (uint8_t)data[i];
    }

    int checksum = CRC(data_num, strlen(data), POLY, false); // Get a checksum for the data
 35a:	20 e0       	ldi	r18, 0x00	; 0
 35c:	47 e6       	ldi	r20, 0x67	; 103
 35e:	51 e0       	ldi	r21, 0x01	; 1
 360:	ce 01       	movw	r24, r28
 362:	8f 56       	subi	r24, 0x6F	; 111
 364:	9e 4f       	sbci	r25, 0xFE	; 254
 366:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 36a:	3c 01       	movw	r6, r24

    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
 36c:	7f 92       	push	r7
 36e:	8f 93       	push	r24
 370:	80 ea       	ldi	r24, 0xA0	; 160
 372:	91 e0       	ldi	r25, 0x01	; 1
 374:	9f 93       	push	r25
 376:	8f 93       	push	r24
 378:	0e 94 09 04 	call	0x812	; 0x812 <printf>
 37c:	ce 01       	movw	r24, r28
 37e:	01 96       	adiw	r24, 0x01	; 1
 380:	7c 01       	movw	r14, r24
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 382:	0f 90       	pop	r0
 384:	0f 90       	pop	r0
 386:	0f 90       	pop	r0
 388:	0f 90       	pop	r0
 38a:	81 2c       	mov	r8, r1
 38c:	91 2c       	mov	r9, r1
            ret[i*4+j] = tmp; // Store the 2 leftmost bits in an array

            dataLength++; // Add one to the total data length

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 38e:	0f 2e       	mov	r0, r31
 390:	ff ec       	ldi	r31, 0xCF	; 207
 392:	cf 2e       	mov	r12, r31
 394:	f1 e0       	ldi	r31, 0x01	; 1
 396:	df 2e       	mov	r13, r31
 398:	f0 2d       	mov	r31, r0
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 39a:	30 c0       	rjmp	.+96     	; 0x3fc <fillDataArray+0x110>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
 39c:	f2 01       	movw	r30, r4
 39e:	31 90       	ld	r3, Z+
 3a0:	2f 01       	movw	r4, r30
 3a2:	57 01       	movw	r10, r14
 3a4:	f4 e0       	ldi	r31, 0x04	; 4
 3a6:	af 0e       	add	r10, r31
 3a8:	b1 1c       	adc	r11, r1
        for (j = 0; j < 4; j++)
        {
            uint8_t tmp = (ascii & 0b11000000) >> 6; // Select the 2 leftmost bits
            ascii = ascii << 2; // Shift the data left by 2

            ret[i*4+j] = tmp; // Store the 2 leftmost bits in an array
 3aa:	83 2d       	mov	r24, r3
 3ac:	82 95       	swap	r24
 3ae:	86 95       	lsr	r24
 3b0:	86 95       	lsr	r24
 3b2:	83 70       	andi	r24, 0x03	; 3
 3b4:	f7 01       	movw	r30, r14
 3b6:	81 93       	st	Z+, r24
 3b8:	7f 01       	movw	r14, r30
 3ba:	33 0c       	add	r3, r3
 3bc:	33 0c       	add	r3, r3

            dataLength++; // Add one to the total data length
 3be:	20 91 70 02 	lds	r18, 0x0270
 3c2:	30 91 71 02 	lds	r19, 0x0271
 3c6:	2f 5f       	subi	r18, 0xFF	; 255
 3c8:	3f 4f       	sbci	r19, 0xFF	; 255
 3ca:	30 93 71 02 	sts	0x0271, r19
 3ce:	20 93 70 02 	sts	0x0270, r18

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 3d2:	1f 92       	push	r1
 3d4:	8f 93       	push	r24
 3d6:	df 92       	push	r13
 3d8:	cf 92       	push	r12
 3da:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes

        // Loop through the bits 2 at a time
        for (j = 0; j < 4; j++)
 3de:	0f 90       	pop	r0
 3e0:	0f 90       	pop	r0
 3e2:	0f 90       	pop	r0
 3e4:	0f 90       	pop	r0
 3e6:	ea 14       	cp	r14, r10
 3e8:	fb 04       	cpc	r15, r11
 3ea:	f9 f6       	brne	.-66     	; 0x3aa <fillDataArray+0xbe>
            #ifdef DEBUG // Debugging
            printf("%i", tmp);
            #endif
        }
        #ifdef DEBUG // Debugging
        printf(" ");
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	90 e0       	ldi	r25, 0x00	; 0
 3f0:	0e 94 1f 04 	call	0x83e	; 0x83e <putchar>
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 3f4:	ff ef       	ldi	r31, 0xFF	; 255
 3f6:	8f 1a       	sub	r8, r31
 3f8:	9f 0a       	sbc	r9, r31
 3fa:	75 01       	movw	r14, r10
 3fc:	f8 01       	movw	r30, r16
 3fe:	01 90       	ld	r0, Z+
 400:	00 20       	and	r0, r0
 402:	e9 f7       	brne	.-6      	; 0x3fe <fillDataArray+0x112>
 404:	31 97       	sbiw	r30, 0x01	; 1
 406:	e0 1b       	sub	r30, r16
 408:	f1 0b       	sbc	r31, r17
 40a:	8e 16       	cp	r8, r30
 40c:	9f 06       	cpc	r9, r31
 40e:	30 f2       	brcs	.-116    	; 0x39c <fillDataArray+0xb0>
 410:	20 91 70 02 	lds	r18, 0x0270
 414:	30 91 71 02 	lds	r19, 0x0271
 418:	e1 e0       	ldi	r30, 0x01	; 1
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ec 0f       	add	r30, r28
 41e:	fd 1f       	adc	r31, r29
 420:	e2 0f       	add	r30, r18
 422:	f3 1f       	adc	r31, r19
 424:	a9 01       	movw	r20, r18
 426:	4c 5f       	subi	r20, 0xFC	; 252
 428:	5f 4f       	sbci	r21, 0xFF	; 255
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	8c 0f       	add	r24, r28
 430:	9d 1f       	adc	r25, r29
 432:	48 0f       	add	r20, r24
 434:	59 1f       	adc	r21, r25
    }

    // Loop 4 more times for the CRC byte
    for (i = 0; i < 4; i++)
    {
        int tmp = (checksum & 0b11000000) >> 6; // Select the 2 leftmost bits
 436:	c3 01       	movw	r24, r6
 438:	80 7c       	andi	r24, 0xC0	; 192
 43a:	99 27       	eor	r25, r25
 43c:	08 2e       	mov	r0, r24
 43e:	89 2f       	mov	r24, r25
 440:	00 0c       	add	r0, r0
 442:	88 1f       	adc	r24, r24
 444:	99 0b       	sbc	r25, r25
 446:	00 0c       	add	r0, r0
 448:	88 1f       	adc	r24, r24
 44a:	99 1f       	adc	r25, r25
        checksum = checksum << 2; // Shift the checksum left by 2
 44c:	66 0c       	add	r6, r6
 44e:	77 1c       	adc	r7, r7
 450:	66 0c       	add	r6, r6
 452:	77 1c       	adc	r7, r7

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
 454:	81 93       	st	Z+, r24
        printf(" ");
        #endif
    }

    // Loop 4 more times for the CRC byte
    for (i = 0; i < 4; i++)
 456:	e4 17       	cp	r30, r20
 458:	f5 07       	cpc	r31, r21
 45a:	69 f7       	brne	.-38     	; 0x436 <fillDataArray+0x14a>
 45c:	c9 01       	movw	r24, r18
 45e:	04 96       	adiw	r24, 0x04	; 4
 460:	90 93 71 02 	sts	0x0271, r25
 464:	80 93 70 02 	sts	0x0270, r24
        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
        dataLength++; // Add one to the total data length
    }

    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
 468:	9f 93       	push	r25
 46a:	8f 93       	push	r24
 46c:	8f ea       	ldi	r24, 0xAF	; 175
 46e:	91 e0       	ldi	r25, 0x01	; 1
 470:	9f 93       	push	r25
 472:	8f 93       	push	r24
 474:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    #endif // DEBUG

    return ret;
 478:	0f 90       	pop	r0
 47a:	0f 90       	pop	r0
 47c:	0f 90       	pop	r0
 47e:	0f 90       	pop	r0
}
 480:	ce 01       	movw	r24, r28
 482:	01 96       	adiw	r24, 0x01	; 1
 484:	cc 50       	subi	r28, 0x0C	; 12
 486:	de 4f       	sbci	r29, 0xFE	; 254
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	cf 90       	pop	r12
 4a2:	bf 90       	pop	r11
 4a4:	af 90       	pop	r10
 4a6:	9f 90       	pop	r9
 4a8:	8f 90       	pop	r8
 4aa:	7f 90       	pop	r7
 4ac:	6f 90       	pop	r6
 4ae:	5f 90       	pop	r5
 4b0:	4f 90       	pop	r4
 4b2:	3f 90       	pop	r3
 4b4:	08 95       	ret

000004b6 <convertToData>:
 * @param length The length of the array
 *
 * @return The readable data
*/
char* convertToData(uint8_t bits[400], int length)
{
 4b6:	2f 92       	push	r2
 4b8:	3f 92       	push	r3
 4ba:	4f 92       	push	r4
 4bc:	5f 92       	push	r5
 4be:	6f 92       	push	r6
 4c0:	7f 92       	push	r7
 4c2:	8f 92       	push	r8
 4c4:	9f 92       	push	r9
 4c6:	af 92       	push	r10
 4c8:	bf 92       	push	r11
 4ca:	cf 92       	push	r12
 4cc:	df 92       	push	r13
 4ce:	ef 92       	push	r14
 4d0:	ff 92       	push	r15
 4d2:	0f 93       	push	r16
 4d4:	1f 93       	push	r17
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	cd b7       	in	r28, 0x3d	; 61
 4dc:	de b7       	in	r29, 0x3e	; 62
 4de:	c8 5c       	subi	r28, 0xC8	; 200
 4e0:	d1 09       	sbc	r29, r1
 4e2:	0f b6       	in	r0, 0x3f	; 63
 4e4:	f8 94       	cli
 4e6:	de bf       	out	0x3e, r29	; 62
 4e8:	0f be       	out	0x3f, r0	; 63
 4ea:	cd bf       	out	0x3d, r28	; 61
 4ec:	e8 2e       	mov	r14, r24
 4ee:	f9 2e       	mov	r15, r25
 4f0:	06 2f       	mov	r16, r22
 4f2:	17 2f       	mov	r17, r23
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
 4f4:	19 82       	std	Y+1, r1	; 0x01
 4f6:	1a 82       	std	Y+2, r1	; 0x02
 4f8:	1b 82       	std	Y+3, r1	; 0x03
 4fa:	1c 82       	std	Y+4, r1	; 0x04
 4fc:	fe 01       	movw	r30, r28
 4fe:	35 96       	adiw	r30, 0x05	; 5
 500:	80 e6       	ldi	r24, 0x60	; 96
 502:	df 01       	movw	r26, r30
 504:	1d 92       	st	X+, r1
 506:	8a 95       	dec	r24
 508:	e9 f7       	brne	.-6      	; 0x504 <convertToData+0x4e>
    char tmp = 0b00000000; // Create a temp char with no data
    uint8_t ascii[100]; // The int representation of the data

    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
 50a:	7f 93       	push	r23
 50c:	6f 93       	push	r22
 50e:	20 ec       	ldi	r18, 0xC0	; 192
 510:	31 e0       	ldi	r19, 0x01	; 1
 512:	3f 93       	push	r19
 514:	2f 93       	push	r18
 516:	0e 94 09 04 	call	0x812	; 0x812 <printf>
 51a:	6e 2c       	mov	r6, r14
 51c:	7f 2c       	mov	r7, r15
 51e:	80 2e       	mov	r8, r16
 520:	91 2e       	mov	r9, r17
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 522:	0f 90       	pop	r0
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
    char ret[100] = ""; // The return value
    char tmp = 0b00000000; // Create a temp char with no data
 52a:	31 2c       	mov	r3, r1
*/
char* convertToData(uint8_t bits[400], int length)
{
    // Reset some stuff and initialize some variables
    uint16_t i;
    int total = 0;
 52c:	a1 2c       	mov	r10, r1
 52e:	b1 2c       	mov	r11, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 530:	00 e0       	ldi	r16, 0x00	; 0
 532:	10 e0       	ldi	r17, 0x00	; 0
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 534:	0f 2e       	mov	r0, r31
 536:	fc ec       	ldi	r31, 0xCC	; 204
 538:	cf 2e       	mov	r12, r31
 53a:	f1 e0       	ldi	r31, 0x01	; 1
 53c:	df 2e       	mov	r13, r31
 53e:	f0 2d       	mov	r31, r0
        #endif

        tmp = tmp << 2 | (bits[i] & 0b11); // Add the bits to the right of the previous ones

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b11), (uint8_t)tmp);
 540:	0f 2e       	mov	r0, r31
 542:	f2 ed       	ldi	r31, 0xD2	; 210
 544:	ef 2e       	mov	r14, r31
 546:	f1 e0       	ldi	r31, 0x01	; 1
 548:	ff 2e       	mov	r15, r31
 54a:	f0 2d       	mov	r31, r0

        // If this is dividable by 4
        if ((i + 1) % 4 == 0)
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 54c:	0f 2e       	mov	r0, r31
 54e:	f1 ee       	ldi	r31, 0xE1	; 225
 550:	4f 2e       	mov	r4, r31
 552:	f1 e0       	ldi	r31, 0x01	; 1
 554:	5f 2e       	mov	r5, r31
 556:	f0 2d       	mov	r31, r0
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
            total++; // Add one to the total
            tmp = 0b00000000; // Reset the temp value
 558:	21 2c       	mov	r2, r1
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 55a:	3a c0       	rjmp	.+116    	; 0x5d0 <convertToData+0x11a>
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 55c:	1f 93       	push	r17
 55e:	0f 93       	push	r16
 560:	df 92       	push	r13
 562:	cf 92       	push	r12
 564:	0e 94 09 04 	call	0x812	; 0x812 <printf>
        #endif

        tmp = tmp << 2 | (bits[i] & 0b11); // Add the bits to the right of the previous ones
 568:	f3 01       	movw	r30, r6
 56a:	81 91       	ld	r24, Z+
 56c:	3f 01       	movw	r6, r30
 56e:	83 70       	andi	r24, 0x03	; 3
 570:	33 0c       	add	r3, r3
 572:	33 0c       	add	r3, r3
 574:	38 2a       	or	r3, r24

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", (bits[i] & 0b11), (uint8_t)tmp);
 576:	1f 92       	push	r1
 578:	3f 92       	push	r3
 57a:	1f 92       	push	r1
 57c:	8f 93       	push	r24
 57e:	ff 92       	push	r15
 580:	ef 92       	push	r14
 582:	0e 94 09 04 	call	0x812	; 0x812 <printf>
        #endif

        // If this is dividable by 4
        if ((i + 1) % 4 == 0)
 586:	0f 5f       	subi	r16, 0xFF	; 255
 588:	1f 4f       	sbci	r17, 0xFF	; 255
 58a:	c8 01       	movw	r24, r16
 58c:	83 70       	andi	r24, 0x03	; 3
 58e:	99 27       	eor	r25, r25
 590:	0f b6       	in	r0, 0x3f	; 63
 592:	f8 94       	cli
 594:	de bf       	out	0x3e, r29	; 62
 596:	0f be       	out	0x3f, r0	; 63
 598:	cd bf       	out	0x3d, r28	; 61
 59a:	89 2b       	or	r24, r25
 59c:	c9 f4       	brne	.+50     	; 0x5d0 <convertToData+0x11a>
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\nTotal %i\n", tmp, total);
 59e:	bf 92       	push	r11
 5a0:	af 92       	push	r10
 5a2:	1f 92       	push	r1
 5a4:	3f 92       	push	r3
 5a6:	5f 92       	push	r5
 5a8:	4f 92       	push	r4
 5aa:	0e 94 09 04 	call	0x812	; 0x812 <printf>
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
 5ae:	e1 e0       	ldi	r30, 0x01	; 1
 5b0:	f0 e0       	ldi	r31, 0x00	; 0
 5b2:	ec 0f       	add	r30, r28
 5b4:	fd 1f       	adc	r31, r29
 5b6:	ea 0d       	add	r30, r10
 5b8:	fb 1d       	adc	r31, r11
 5ba:	30 82       	st	Z, r3
            total++; // Add one to the total
 5bc:	3f ef       	ldi	r19, 0xFF	; 255
 5be:	a3 1a       	sub	r10, r19
 5c0:	b3 0a       	sbc	r11, r19
 5c2:	0f 90       	pop	r0
 5c4:	0f 90       	pop	r0
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
            tmp = 0b00000000; // Reset the temp value
 5ce:	32 2c       	mov	r3, r2
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 5d0:	08 15       	cp	r16, r8
 5d2:	19 05       	cpc	r17, r9
 5d4:	19 f6       	brne	.-122    	; 0x55c <convertToData+0xa6>
 5d6:	ae 01       	movw	r20, r28
 5d8:	4f 5f       	subi	r20, 0xFF	; 255
 5da:	5f 4f       	sbci	r21, 0xFF	; 255
 5dc:	9e 01       	movw	r18, r28
 5de:	2b 59       	subi	r18, 0x9B	; 155
 5e0:	3f 4f       	sbci	r19, 0xFF	; 255
 5e2:	80 e0       	ldi	r24, 0x00	; 0
 5e4:	90 e0       	ldi	r25, 0x00	; 0
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 5e6:	da 01       	movw	r26, r20
 5e8:	07 c0       	rjmp	.+14     	; 0x5f8 <convertToData+0x142>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
 5ea:	fa 01       	movw	r30, r20
 5ec:	61 91       	ld	r22, Z+
 5ee:	af 01       	movw	r20, r30
 5f0:	f9 01       	movw	r30, r18
 5f2:	61 93       	st	Z+, r22
 5f4:	9f 01       	movw	r18, r30
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 5f6:	01 96       	adiw	r24, 0x01	; 1
 5f8:	fd 01       	movw	r30, r26
 5fa:	01 90       	ld	r0, Z+
 5fc:	00 20       	and	r0, r0
 5fe:	e9 f7       	brne	.-6      	; 0x5fa <convertToData+0x144>
 600:	31 97       	sbiw	r30, 0x01	; 1
 602:	bf 01       	movw	r22, r30
 604:	6a 1b       	sub	r22, r26
 606:	7b 0b       	sbc	r23, r27
 608:	86 17       	cp	r24, r22
 60a:	97 07       	cpc	r25, r23
 60c:	70 f3       	brcs	.-36     	; 0x5ea <convertToData+0x134>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
 60e:	21 e0       	ldi	r18, 0x01	; 1
 610:	47 e6       	ldi	r20, 0x67	; 103
 612:	51 e0       	ldi	r21, 0x01	; 1
 614:	ce 01       	movw	r24, r28
 616:	8b 59       	subi	r24, 0x9B	; 155
 618:	9f 4f       	sbci	r25, 0xFF	; 255
 61a:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 61e:	8c 01       	movw	r16, r24

    ret[total - 1] = 0b00000000; // Set the last byte to 0 (this is the checksum)
 620:	fe 01       	movw	r30, r28
 622:	ea 0d       	add	r30, r10
 624:	fb 1d       	adc	r31, r11
 626:	10 82       	st	Z, r1

    #ifdef DEBUG // Debugging
    printf("\n\nChecksum: %i\n\n", checksum);
 628:	1f 93       	push	r17
 62a:	8f 93       	push	r24
 62c:	84 ef       	ldi	r24, 0xF4	; 244
 62e:	91 e0       	ldi	r25, 0x01	; 1
 630:	9f 93       	push	r25
 632:	8f 93       	push	r24
 634:	0e 94 09 04 	call	0x812	; 0x812 <printf>
    #endif // DEBUG

    if (checksum == 0)
 638:	0f 90       	pop	r0
 63a:	0f 90       	pop	r0
 63c:	0f 90       	pop	r0
 63e:	0f 90       	pop	r0
 640:	01 2b       	or	r16, r17
 642:	29 f4       	brne	.+10     	; 0x64e <convertToData+0x198>
    {
        #ifdef DEBUG // Debugging
        printf("No errors.\n");
 644:	85 e0       	ldi	r24, 0x05	; 5
 646:	92 e0       	ldi	r25, 0x02	; 2
 648:	0e 94 26 04 	call	0x84c	; 0x84c <puts>
 64c:	06 c0       	rjmp	.+12     	; 0x65a <convertToData+0x1a4>
        #endif // DEBUG
    }
    else
    {
        ret[0] = -1;
 64e:	8f ef       	ldi	r24, 0xFF	; 255
 650:	89 83       	std	Y+1, r24	; 0x01
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
 652:	80 e1       	ldi	r24, 0x10	; 16
 654:	92 e0       	ldi	r25, 0x02	; 2
 656:	0e 94 26 04 	call	0x84c	; 0x84c <puts>
        #endif // DEBUG
    }

    return ret;
}
 65a:	ce 01       	movw	r24, r28
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	c8 53       	subi	r28, 0x38	; 56
 660:	df 4f       	sbci	r29, 0xFF	; 255
 662:	0f b6       	in	r0, 0x3f	; 63
 664:	f8 94       	cli
 666:	de bf       	out	0x3e, r29	; 62
 668:	0f be       	out	0x3f, r0	; 63
 66a:	cd bf       	out	0x3d, r28	; 61
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	1f 91       	pop	r17
 672:	0f 91       	pop	r16
 674:	ff 90       	pop	r15
 676:	ef 90       	pop	r14
 678:	df 90       	pop	r13
 67a:	cf 90       	pop	r12
 67c:	bf 90       	pop	r11
 67e:	af 90       	pop	r10
 680:	9f 90       	pop	r9
 682:	8f 90       	pop	r8
 684:	7f 90       	pop	r7
 686:	6f 90       	pop	r6
 688:	5f 90       	pop	r5
 68a:	4f 90       	pop	r4
 68c:	3f 90       	pop	r3
 68e:	2f 90       	pop	r2
 690:	08 95       	ret

00000692 <main>:

FILE usart0_output = FDEV_SETUP_STREAM(USART0SendByte, NULL, _FDEV_SETUP_WRITE);	// Output file for USART
FILE usart0_input = FDEV_SETUP_STREAM(NULL, USART0GetByte, _FDEV_SETUP_READ);		// Input file for USART

int main(void)
{
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	cd b7       	in	r28, 0x3d	; 61
 698:	de b7       	in	r29, 0x3e	; 62
 69a:	c4 56       	subi	r28, 0x64	; 100
 69c:	d1 09       	sbc	r29, r1
 69e:	0f b6       	in	r0, 0x3f	; 63
 6a0:	f8 94       	cli
 6a2:	de bf       	out	0x3e, r29	; 62
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	cd bf       	out	0x3d, r28	; 61
	/* USART INIT START */
	USART0Init();
 6a8:	0e 94 9c 03 	call	0x738	; 0x738 <USART0Init>
	stdout =& usart0_output;
 6ac:	e4 e7       	ldi	r30, 0x74	; 116
 6ae:	f2 e0       	ldi	r31, 0x02	; 2
 6b0:	8e e0       	ldi	r24, 0x0E	; 14
 6b2:	91 e0       	ldi	r25, 0x01	; 1
 6b4:	93 83       	std	Z+3, r25	; 0x03
 6b6:	82 83       	std	Z+2, r24	; 0x02
	stdin =& usart0_input;
 6b8:	80 e0       	ldi	r24, 0x00	; 0
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	91 83       	std	Z+1, r25	; 0x01
 6be:	80 83       	st	Z, r24
	/* USART INIT STOP */

	i2c_init(); // Init I2C (TWI)
 6c0:	0e 94 98 03 	call	0x730	; 0x730 <i2c_init>

	//char input[55] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; // MAX STRING LENGTH BEFORE UC DOES WIERD STUFF

	char input[100] = "Now, this is a story all about how My life got flipped-turned upside down";
 6c4:	8a e4       	ldi	r24, 0x4A	; 74
 6c6:	ec e1       	ldi	r30, 0x1C	; 28
 6c8:	f1 e0       	ldi	r31, 0x01	; 1
 6ca:	8e 01       	movw	r16, r28
 6cc:	0f 5f       	subi	r16, 0xFF	; 255
 6ce:	1f 4f       	sbci	r17, 0xFF	; 255
 6d0:	d8 01       	movw	r26, r16
 6d2:	01 90       	ld	r0, Z+
 6d4:	0d 92       	st	X+, r0
 6d6:	8a 95       	dec	r24
 6d8:	e1 f7       	brne	.-8      	; 0x6d2 <main+0x40>
 6da:	fe 01       	movw	r30, r28
 6dc:	e5 5b       	subi	r30, 0xB5	; 181
 6de:	ff 4f       	sbci	r31, 0xFF	; 255
 6e0:	8a e1       	ldi	r24, 0x1A	; 26
 6e2:	df 01       	movw	r26, r30
 6e4:	1d 92       	st	X+, r1
 6e6:	8a 95       	dec	r24
 6e8:	e9 f7       	brne	.-6      	; 0x6e4 <main+0x52>

	#ifdef DEBUG
	printf("\n\n\n\nSTART CODE WITH THIS INPUT: %s\n\n", input); // Print the input string
 6ea:	1f 93       	push	r17
 6ec:	0f 93       	push	r16
 6ee:	80 e2       	ldi	r24, 0x20	; 32
 6f0:	92 e0       	ldi	r25, 0x02	; 2
 6f2:	9f 93       	push	r25
 6f4:	8f 93       	push	r24
 6f6:	0e 94 09 04 	call	0x812	; 0x812 <printf>
	#endif // DEBUG

	int* dataToSend = fillDataArray(input); // Convert data to base4
 6fa:	c8 01       	movw	r24, r16
 6fc:	0e 94 76 01 	call	0x2ec	; 0x2ec <fillDataArray>
	char* received = convertToData(dataToSend, dataLength); // Convert base4 to data
 700:	60 91 70 02 	lds	r22, 0x0270
 704:	70 91 71 02 	lds	r23, 0x0271
 708:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <convertToData>

	#ifdef DEBUG
	printf("\nReceived data: %s\n\n", received); // Print the received data
 70c:	9f 93       	push	r25
 70e:	8f 93       	push	r24
 710:	85 e4       	ldi	r24, 0x45	; 69
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	9f 93       	push	r25
 716:	8f 93       	push	r24
 718:	0e 94 09 04 	call	0x812	; 0x812 <printf>

	printf("Entering loop now....\n");
 71c:	8a e5       	ldi	r24, 0x5A	; 90
 71e:	92 e0       	ldi	r25, 0x02	; 2
 720:	0e 94 26 04 	call	0x84c	; 0x84c <puts>
 724:	0f b6       	in	r0, 0x3f	; 63
 726:	f8 94       	cli
 728:	de bf       	out	0x3e, r29	; 62
 72a:	0f be       	out	0x3f, r0	; 63
 72c:	cd bf       	out	0x3d, r28	; 61
	#endif

    while (1) 
    {
		// Main loop
    }
 72e:	ff cf       	rjmp	.-2      	; 0x72e <main+0x9c>

00000730 <i2c_init>:

#include "i2c.h"

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 730:	88 e4       	ldi	r24, 0x48	; 72
 732:	80 93 b8 00 	sts	0x00B8, r24
 736:	08 95       	ret

00000738 <USART0Init>:

#include "USART.h"

void USART0Init()
{
	receiveDone = 0;
 738:	10 92 73 02 	sts	0x0273, r1
 73c:	10 92 72 02 	sts	0x0272, r1

	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_BAUDRATE >> 8);
 740:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_BAUDRATE;
 744:	10 92 c4 00 	sts	0x00C4, r1

	// Enable transmission and receiving
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 748:	e1 ec       	ldi	r30, 0xC1	; 193
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	80 81       	ld	r24, Z
 74e:	88 61       	ori	r24, 0x18	; 24
 750:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 752:	e2 ec       	ldi	r30, 0xC2	; 194
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	80 81       	ld	r24, Z
 758:	86 60       	ori	r24, 0x06	; 6
 75a:	80 83       	st	Z, r24
 75c:	08 95       	ret

0000075e <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
 75e:	cf 93       	push	r28
 760:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
 762:	8a 30       	cpi	r24, 0x0A	; 10
 764:	19 f4       	brne	.+6      	; 0x76c <USART0SendByte+0xe>
 766:	8d e0       	ldi	r24, 0x0D	; 13
 768:	0e 94 af 03 	call	0x75e	; 0x75e <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 76c:	e0 ec       	ldi	r30, 0xC0	; 192
 76e:	f0 e0       	ldi	r31, 0x00	; 0
 770:	90 81       	ld	r25, Z
 772:	95 ff       	sbrs	r25, 5
 774:	fd cf       	rjmp	.-6      	; 0x770 <USART0SendByte+0x12>

	// Transmit data
	UDR0 = u8Data;
 776:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	cf 91       	pop	r28
 780:	08 95       	ret

00000782 <USART0GetByte>:

char USART0GetByte(FILE *stream)
{
	while (!(UCSR0A & (1 << RXC0)));
 782:	e0 ec       	ldi	r30, 0xC0	; 192
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	88 23       	and	r24, r24
 78a:	ec f7       	brge	.-6      	; 0x786 <USART0GetByte+0x4>
	
	return UDR0;
 78c:	80 91 c6 00 	lds	r24, 0x00C6
 790:	08 95       	ret

00000792 <__ashldi3>:
 792:	0f 93       	push	r16
 794:	08 30       	cpi	r16, 0x08	; 8
 796:	90 f0       	brcs	.+36     	; 0x7bc <__ashldi3+0x2a>
 798:	98 2f       	mov	r25, r24
 79a:	87 2f       	mov	r24, r23
 79c:	76 2f       	mov	r23, r22
 79e:	65 2f       	mov	r22, r21
 7a0:	54 2f       	mov	r21, r20
 7a2:	43 2f       	mov	r20, r19
 7a4:	32 2f       	mov	r19, r18
 7a6:	22 27       	eor	r18, r18
 7a8:	08 50       	subi	r16, 0x08	; 8
 7aa:	f4 cf       	rjmp	.-24     	; 0x794 <__ashldi3+0x2>
 7ac:	22 0f       	add	r18, r18
 7ae:	33 1f       	adc	r19, r19
 7b0:	44 1f       	adc	r20, r20
 7b2:	55 1f       	adc	r21, r21
 7b4:	66 1f       	adc	r22, r22
 7b6:	77 1f       	adc	r23, r23
 7b8:	88 1f       	adc	r24, r24
 7ba:	99 1f       	adc	r25, r25
 7bc:	0a 95       	dec	r16
 7be:	b2 f7       	brpl	.-20     	; 0x7ac <__ashldi3+0x1a>
 7c0:	0f 91       	pop	r16
 7c2:	08 95       	ret

000007c4 <__ashrdi3>:
 7c4:	97 fb       	bst	r25, 7
 7c6:	10 f8       	bld	r1, 0

000007c8 <__lshrdi3>:
 7c8:	16 94       	lsr	r1
 7ca:	00 08       	sbc	r0, r0
 7cc:	0f 93       	push	r16
 7ce:	08 30       	cpi	r16, 0x08	; 8
 7d0:	98 f0       	brcs	.+38     	; 0x7f8 <__lshrdi3+0x30>
 7d2:	08 50       	subi	r16, 0x08	; 8
 7d4:	23 2f       	mov	r18, r19
 7d6:	34 2f       	mov	r19, r20
 7d8:	45 2f       	mov	r20, r21
 7da:	56 2f       	mov	r21, r22
 7dc:	67 2f       	mov	r22, r23
 7de:	78 2f       	mov	r23, r24
 7e0:	89 2f       	mov	r24, r25
 7e2:	90 2d       	mov	r25, r0
 7e4:	f4 cf       	rjmp	.-24     	; 0x7ce <__lshrdi3+0x6>
 7e6:	05 94       	asr	r0
 7e8:	97 95       	ror	r25
 7ea:	87 95       	ror	r24
 7ec:	77 95       	ror	r23
 7ee:	67 95       	ror	r22
 7f0:	57 95       	ror	r21
 7f2:	47 95       	ror	r20
 7f4:	37 95       	ror	r19
 7f6:	27 95       	ror	r18
 7f8:	0a 95       	dec	r16
 7fa:	aa f7       	brpl	.-22     	; 0x7e6 <__lshrdi3+0x1e>
 7fc:	0f 91       	pop	r16
 7fe:	08 95       	ret

00000800 <__cmpdi2>:
 800:	2a 15       	cp	r18, r10
 802:	3b 05       	cpc	r19, r11
 804:	4c 05       	cpc	r20, r12
 806:	5d 05       	cpc	r21, r13
 808:	6e 05       	cpc	r22, r14
 80a:	7f 05       	cpc	r23, r15
 80c:	80 07       	cpc	r24, r16
 80e:	91 07       	cpc	r25, r17
 810:	08 95       	ret

00000812 <printf>:
 812:	a0 e0       	ldi	r26, 0x00	; 0
 814:	b0 e0       	ldi	r27, 0x00	; 0
 816:	ef e0       	ldi	r30, 0x0F	; 15
 818:	f4 e0       	ldi	r31, 0x04	; 4
 81a:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__prologue_saves__+0x20>
 81e:	ae 01       	movw	r20, r28
 820:	4b 5f       	subi	r20, 0xFB	; 251
 822:	5f 4f       	sbci	r21, 0xFF	; 255
 824:	fa 01       	movw	r30, r20
 826:	61 91       	ld	r22, Z+
 828:	71 91       	ld	r23, Z+
 82a:	af 01       	movw	r20, r30
 82c:	80 91 76 02 	lds	r24, 0x0276
 830:	90 91 77 02 	lds	r25, 0x0277
 834:	0e 94 56 04 	call	0x8ac	; 0x8ac <vfprintf>
 838:	e2 e0       	ldi	r30, 0x02	; 2
 83a:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__epilogue_restores__+0x20>

0000083e <putchar>:
 83e:	60 91 76 02 	lds	r22, 0x0276
 842:	70 91 77 02 	lds	r23, 0x0277
 846:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 84a:	08 95       	ret

0000084c <puts>:
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	e0 91 76 02 	lds	r30, 0x0276
 858:	f0 91 77 02 	lds	r31, 0x0277
 85c:	23 81       	ldd	r18, Z+3	; 0x03
 85e:	21 ff       	sbrs	r18, 1
 860:	1b c0       	rjmp	.+54     	; 0x898 <puts+0x4c>
 862:	8c 01       	movw	r16, r24
 864:	d0 e0       	ldi	r29, 0x00	; 0
 866:	c0 e0       	ldi	r28, 0x00	; 0
 868:	f8 01       	movw	r30, r16
 86a:	81 91       	ld	r24, Z+
 86c:	8f 01       	movw	r16, r30
 86e:	60 91 76 02 	lds	r22, 0x0276
 872:	70 91 77 02 	lds	r23, 0x0277
 876:	db 01       	movw	r26, r22
 878:	18 96       	adiw	r26, 0x08	; 8
 87a:	ed 91       	ld	r30, X+
 87c:	fc 91       	ld	r31, X
 87e:	19 97       	sbiw	r26, 0x09	; 9
 880:	88 23       	and	r24, r24
 882:	31 f0       	breq	.+12     	; 0x890 <puts+0x44>
 884:	09 95       	icall
 886:	89 2b       	or	r24, r25
 888:	79 f3       	breq	.-34     	; 0x868 <puts+0x1c>
 88a:	df ef       	ldi	r29, 0xFF	; 255
 88c:	cf ef       	ldi	r28, 0xFF	; 255
 88e:	ec cf       	rjmp	.-40     	; 0x868 <puts+0x1c>
 890:	8a e0       	ldi	r24, 0x0A	; 10
 892:	09 95       	icall
 894:	89 2b       	or	r24, r25
 896:	19 f0       	breq	.+6      	; 0x89e <puts+0x52>
 898:	8f ef       	ldi	r24, 0xFF	; 255
 89a:	9f ef       	ldi	r25, 0xFF	; 255
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <puts+0x56>
 89e:	8d 2f       	mov	r24, r29
 8a0:	9c 2f       	mov	r25, r28
 8a2:	df 91       	pop	r29
 8a4:	cf 91       	pop	r28
 8a6:	1f 91       	pop	r17
 8a8:	0f 91       	pop	r16
 8aa:	08 95       	ret

000008ac <vfprintf>:
 8ac:	ac e0       	ldi	r26, 0x0C	; 12
 8ae:	b0 e0       	ldi	r27, 0x00	; 0
 8b0:	ec e5       	ldi	r30, 0x5C	; 92
 8b2:	f4 e0       	ldi	r31, 0x04	; 4
 8b4:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__prologue_saves__>
 8b8:	7c 01       	movw	r14, r24
 8ba:	6b 01       	movw	r12, r22
 8bc:	8a 01       	movw	r16, r20
 8be:	fc 01       	movw	r30, r24
 8c0:	17 82       	std	Z+7, r1	; 0x07
 8c2:	16 82       	std	Z+6, r1	; 0x06
 8c4:	83 81       	ldd	r24, Z+3	; 0x03
 8c6:	81 ff       	sbrs	r24, 1
 8c8:	bd c1       	rjmp	.+890    	; 0xc44 <__stack+0x345>
 8ca:	ce 01       	movw	r24, r28
 8cc:	01 96       	adiw	r24, 0x01	; 1
 8ce:	4c 01       	movw	r8, r24
 8d0:	f7 01       	movw	r30, r14
 8d2:	93 81       	ldd	r25, Z+3	; 0x03
 8d4:	f6 01       	movw	r30, r12
 8d6:	93 fd       	sbrc	r25, 3
 8d8:	85 91       	lpm	r24, Z+
 8da:	93 ff       	sbrs	r25, 3
 8dc:	81 91       	ld	r24, Z+
 8de:	6f 01       	movw	r12, r30
 8e0:	88 23       	and	r24, r24
 8e2:	09 f4       	brne	.+2      	; 0x8e6 <vfprintf+0x3a>
 8e4:	ab c1       	rjmp	.+854    	; 0xc3c <__stack+0x33d>
 8e6:	85 32       	cpi	r24, 0x25	; 37
 8e8:	39 f4       	brne	.+14     	; 0x8f8 <vfprintf+0x4c>
 8ea:	93 fd       	sbrc	r25, 3
 8ec:	85 91       	lpm	r24, Z+
 8ee:	93 ff       	sbrs	r25, 3
 8f0:	81 91       	ld	r24, Z+
 8f2:	6f 01       	movw	r12, r30
 8f4:	85 32       	cpi	r24, 0x25	; 37
 8f6:	29 f4       	brne	.+10     	; 0x902 <__stack+0x3>
 8f8:	b7 01       	movw	r22, r14
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 900:	e7 cf       	rjmp	.-50     	; 0x8d0 <vfprintf+0x24>
 902:	51 2c       	mov	r5, r1
 904:	31 2c       	mov	r3, r1
 906:	20 e0       	ldi	r18, 0x00	; 0
 908:	20 32       	cpi	r18, 0x20	; 32
 90a:	a0 f4       	brcc	.+40     	; 0x934 <__stack+0x35>
 90c:	8b 32       	cpi	r24, 0x2B	; 43
 90e:	69 f0       	breq	.+26     	; 0x92a <__stack+0x2b>
 910:	30 f4       	brcc	.+12     	; 0x91e <__stack+0x1f>
 912:	80 32       	cpi	r24, 0x20	; 32
 914:	59 f0       	breq	.+22     	; 0x92c <__stack+0x2d>
 916:	83 32       	cpi	r24, 0x23	; 35
 918:	69 f4       	brne	.+26     	; 0x934 <__stack+0x35>
 91a:	20 61       	ori	r18, 0x10	; 16
 91c:	2c c0       	rjmp	.+88     	; 0x976 <__stack+0x77>
 91e:	8d 32       	cpi	r24, 0x2D	; 45
 920:	39 f0       	breq	.+14     	; 0x930 <__stack+0x31>
 922:	80 33       	cpi	r24, 0x30	; 48
 924:	39 f4       	brne	.+14     	; 0x934 <__stack+0x35>
 926:	21 60       	ori	r18, 0x01	; 1
 928:	26 c0       	rjmp	.+76     	; 0x976 <__stack+0x77>
 92a:	22 60       	ori	r18, 0x02	; 2
 92c:	24 60       	ori	r18, 0x04	; 4
 92e:	23 c0       	rjmp	.+70     	; 0x976 <__stack+0x77>
 930:	28 60       	ori	r18, 0x08	; 8
 932:	21 c0       	rjmp	.+66     	; 0x976 <__stack+0x77>
 934:	27 fd       	sbrc	r18, 7
 936:	27 c0       	rjmp	.+78     	; 0x986 <__stack+0x87>
 938:	30 ed       	ldi	r19, 0xD0	; 208
 93a:	38 0f       	add	r19, r24
 93c:	3a 30       	cpi	r19, 0x0A	; 10
 93e:	78 f4       	brcc	.+30     	; 0x95e <__stack+0x5f>
 940:	26 ff       	sbrs	r18, 6
 942:	06 c0       	rjmp	.+12     	; 0x950 <__stack+0x51>
 944:	fa e0       	ldi	r31, 0x0A	; 10
 946:	5f 9e       	mul	r5, r31
 948:	30 0d       	add	r19, r0
 94a:	11 24       	eor	r1, r1
 94c:	53 2e       	mov	r5, r19
 94e:	13 c0       	rjmp	.+38     	; 0x976 <__stack+0x77>
 950:	8a e0       	ldi	r24, 0x0A	; 10
 952:	38 9e       	mul	r3, r24
 954:	30 0d       	add	r19, r0
 956:	11 24       	eor	r1, r1
 958:	33 2e       	mov	r3, r19
 95a:	20 62       	ori	r18, 0x20	; 32
 95c:	0c c0       	rjmp	.+24     	; 0x976 <__stack+0x77>
 95e:	8e 32       	cpi	r24, 0x2E	; 46
 960:	21 f4       	brne	.+8      	; 0x96a <__stack+0x6b>
 962:	26 fd       	sbrc	r18, 6
 964:	6b c1       	rjmp	.+726    	; 0xc3c <__stack+0x33d>
 966:	20 64       	ori	r18, 0x40	; 64
 968:	06 c0       	rjmp	.+12     	; 0x976 <__stack+0x77>
 96a:	8c 36       	cpi	r24, 0x6C	; 108
 96c:	11 f4       	brne	.+4      	; 0x972 <__stack+0x73>
 96e:	20 68       	ori	r18, 0x80	; 128
 970:	02 c0       	rjmp	.+4      	; 0x976 <__stack+0x77>
 972:	88 36       	cpi	r24, 0x68	; 104
 974:	41 f4       	brne	.+16     	; 0x986 <__stack+0x87>
 976:	f6 01       	movw	r30, r12
 978:	93 fd       	sbrc	r25, 3
 97a:	85 91       	lpm	r24, Z+
 97c:	93 ff       	sbrs	r25, 3
 97e:	81 91       	ld	r24, Z+
 980:	6f 01       	movw	r12, r30
 982:	81 11       	cpse	r24, r1
 984:	c1 cf       	rjmp	.-126    	; 0x908 <__stack+0x9>
 986:	98 2f       	mov	r25, r24
 988:	9f 7d       	andi	r25, 0xDF	; 223
 98a:	95 54       	subi	r25, 0x45	; 69
 98c:	93 30       	cpi	r25, 0x03	; 3
 98e:	28 f4       	brcc	.+10     	; 0x99a <__stack+0x9b>
 990:	0c 5f       	subi	r16, 0xFC	; 252
 992:	1f 4f       	sbci	r17, 0xFF	; 255
 994:	ff e3       	ldi	r31, 0x3F	; 63
 996:	f9 83       	std	Y+1, r31	; 0x01
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <__stack+0xb5>
 99a:	83 36       	cpi	r24, 0x63	; 99
 99c:	31 f0       	breq	.+12     	; 0x9aa <__stack+0xab>
 99e:	83 37       	cpi	r24, 0x73	; 115
 9a0:	71 f0       	breq	.+28     	; 0x9be <__stack+0xbf>
 9a2:	83 35       	cpi	r24, 0x53	; 83
 9a4:	09 f0       	breq	.+2      	; 0x9a8 <__stack+0xa9>
 9a6:	5b c0       	rjmp	.+182    	; 0xa5e <__stack+0x15f>
 9a8:	22 c0       	rjmp	.+68     	; 0x9ee <__stack+0xef>
 9aa:	f8 01       	movw	r30, r16
 9ac:	80 81       	ld	r24, Z
 9ae:	89 83       	std	Y+1, r24	; 0x01
 9b0:	0e 5f       	subi	r16, 0xFE	; 254
 9b2:	1f 4f       	sbci	r17, 0xFF	; 255
 9b4:	44 24       	eor	r4, r4
 9b6:	43 94       	inc	r4
 9b8:	51 2c       	mov	r5, r1
 9ba:	54 01       	movw	r10, r8
 9bc:	15 c0       	rjmp	.+42     	; 0x9e8 <__stack+0xe9>
 9be:	38 01       	movw	r6, r16
 9c0:	f2 e0       	ldi	r31, 0x02	; 2
 9c2:	6f 0e       	add	r6, r31
 9c4:	71 1c       	adc	r7, r1
 9c6:	f8 01       	movw	r30, r16
 9c8:	a0 80       	ld	r10, Z
 9ca:	b1 80       	ldd	r11, Z+1	; 0x01
 9cc:	26 ff       	sbrs	r18, 6
 9ce:	03 c0       	rjmp	.+6      	; 0x9d6 <__stack+0xd7>
 9d0:	65 2d       	mov	r22, r5
 9d2:	70 e0       	ldi	r23, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0xdb>
 9d6:	6f ef       	ldi	r22, 0xFF	; 255
 9d8:	7f ef       	ldi	r23, 0xFF	; 255
 9da:	c5 01       	movw	r24, r10
 9dc:	2c 87       	std	Y+12, r18	; 0x0c
 9de:	0e 94 33 06 	call	0xc66	; 0xc66 <strnlen>
 9e2:	2c 01       	movw	r4, r24
 9e4:	83 01       	movw	r16, r6
 9e6:	2c 85       	ldd	r18, Y+12	; 0x0c
 9e8:	2f 77       	andi	r18, 0x7F	; 127
 9ea:	22 2e       	mov	r2, r18
 9ec:	17 c0       	rjmp	.+46     	; 0xa1c <__stack+0x11d>
 9ee:	38 01       	movw	r6, r16
 9f0:	f2 e0       	ldi	r31, 0x02	; 2
 9f2:	6f 0e       	add	r6, r31
 9f4:	71 1c       	adc	r7, r1
 9f6:	f8 01       	movw	r30, r16
 9f8:	a0 80       	ld	r10, Z
 9fa:	b1 80       	ldd	r11, Z+1	; 0x01
 9fc:	26 ff       	sbrs	r18, 6
 9fe:	03 c0       	rjmp	.+6      	; 0xa06 <__stack+0x107>
 a00:	65 2d       	mov	r22, r5
 a02:	70 e0       	ldi	r23, 0x00	; 0
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <__stack+0x10b>
 a06:	6f ef       	ldi	r22, 0xFF	; 255
 a08:	7f ef       	ldi	r23, 0xFF	; 255
 a0a:	c5 01       	movw	r24, r10
 a0c:	2c 87       	std	Y+12, r18	; 0x0c
 a0e:	0e 94 28 06 	call	0xc50	; 0xc50 <strnlen_P>
 a12:	2c 01       	movw	r4, r24
 a14:	2c 85       	ldd	r18, Y+12	; 0x0c
 a16:	20 68       	ori	r18, 0x80	; 128
 a18:	22 2e       	mov	r2, r18
 a1a:	83 01       	movw	r16, r6
 a1c:	23 fc       	sbrc	r2, 3
 a1e:	1b c0       	rjmp	.+54     	; 0xa56 <__stack+0x157>
 a20:	83 2d       	mov	r24, r3
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	48 16       	cp	r4, r24
 a26:	59 06       	cpc	r5, r25
 a28:	b0 f4       	brcc	.+44     	; 0xa56 <__stack+0x157>
 a2a:	b7 01       	movw	r22, r14
 a2c:	80 e2       	ldi	r24, 0x20	; 32
 a2e:	90 e0       	ldi	r25, 0x00	; 0
 a30:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 a34:	3a 94       	dec	r3
 a36:	f4 cf       	rjmp	.-24     	; 0xa20 <__stack+0x121>
 a38:	f5 01       	movw	r30, r10
 a3a:	27 fc       	sbrc	r2, 7
 a3c:	85 91       	lpm	r24, Z+
 a3e:	27 fe       	sbrs	r2, 7
 a40:	81 91       	ld	r24, Z+
 a42:	5f 01       	movw	r10, r30
 a44:	b7 01       	movw	r22, r14
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 a4c:	31 10       	cpse	r3, r1
 a4e:	3a 94       	dec	r3
 a50:	f1 e0       	ldi	r31, 0x01	; 1
 a52:	4f 1a       	sub	r4, r31
 a54:	51 08       	sbc	r5, r1
 a56:	41 14       	cp	r4, r1
 a58:	51 04       	cpc	r5, r1
 a5a:	71 f7       	brne	.-36     	; 0xa38 <__stack+0x139>
 a5c:	e5 c0       	rjmp	.+458    	; 0xc28 <__stack+0x329>
 a5e:	84 36       	cpi	r24, 0x64	; 100
 a60:	11 f0       	breq	.+4      	; 0xa66 <__stack+0x167>
 a62:	89 36       	cpi	r24, 0x69	; 105
 a64:	39 f5       	brne	.+78     	; 0xab4 <__stack+0x1b5>
 a66:	f8 01       	movw	r30, r16
 a68:	27 ff       	sbrs	r18, 7
 a6a:	07 c0       	rjmp	.+14     	; 0xa7a <__stack+0x17b>
 a6c:	60 81       	ld	r22, Z
 a6e:	71 81       	ldd	r23, Z+1	; 0x01
 a70:	82 81       	ldd	r24, Z+2	; 0x02
 a72:	93 81       	ldd	r25, Z+3	; 0x03
 a74:	0c 5f       	subi	r16, 0xFC	; 252
 a76:	1f 4f       	sbci	r17, 0xFF	; 255
 a78:	08 c0       	rjmp	.+16     	; 0xa8a <__stack+0x18b>
 a7a:	60 81       	ld	r22, Z
 a7c:	71 81       	ldd	r23, Z+1	; 0x01
 a7e:	07 2e       	mov	r0, r23
 a80:	00 0c       	add	r0, r0
 a82:	88 0b       	sbc	r24, r24
 a84:	99 0b       	sbc	r25, r25
 a86:	0e 5f       	subi	r16, 0xFE	; 254
 a88:	1f 4f       	sbci	r17, 0xFF	; 255
 a8a:	2f 76       	andi	r18, 0x6F	; 111
 a8c:	72 2e       	mov	r7, r18
 a8e:	97 ff       	sbrs	r25, 7
 a90:	09 c0       	rjmp	.+18     	; 0xaa4 <__stack+0x1a5>
 a92:	90 95       	com	r25
 a94:	80 95       	com	r24
 a96:	70 95       	com	r23
 a98:	61 95       	neg	r22
 a9a:	7f 4f       	sbci	r23, 0xFF	; 255
 a9c:	8f 4f       	sbci	r24, 0xFF	; 255
 a9e:	9f 4f       	sbci	r25, 0xFF	; 255
 aa0:	20 68       	ori	r18, 0x80	; 128
 aa2:	72 2e       	mov	r7, r18
 aa4:	2a e0       	ldi	r18, 0x0A	; 10
 aa6:	30 e0       	ldi	r19, 0x00	; 0
 aa8:	a4 01       	movw	r20, r8
 aaa:	0e 94 76 06 	call	0xcec	; 0xcec <__ultoa_invert>
 aae:	a8 2e       	mov	r10, r24
 ab0:	a8 18       	sub	r10, r8
 ab2:	44 c0       	rjmp	.+136    	; 0xb3c <__stack+0x23d>
 ab4:	85 37       	cpi	r24, 0x75	; 117
 ab6:	29 f4       	brne	.+10     	; 0xac2 <__stack+0x1c3>
 ab8:	2f 7e       	andi	r18, 0xEF	; 239
 aba:	b2 2e       	mov	r11, r18
 abc:	2a e0       	ldi	r18, 0x0A	; 10
 abe:	30 e0       	ldi	r19, 0x00	; 0
 ac0:	25 c0       	rjmp	.+74     	; 0xb0c <__stack+0x20d>
 ac2:	f2 2f       	mov	r31, r18
 ac4:	f9 7f       	andi	r31, 0xF9	; 249
 ac6:	bf 2e       	mov	r11, r31
 ac8:	8f 36       	cpi	r24, 0x6F	; 111
 aca:	c1 f0       	breq	.+48     	; 0xafc <__stack+0x1fd>
 acc:	18 f4       	brcc	.+6      	; 0xad4 <__stack+0x1d5>
 ace:	88 35       	cpi	r24, 0x58	; 88
 ad0:	79 f0       	breq	.+30     	; 0xaf0 <__stack+0x1f1>
 ad2:	b4 c0       	rjmp	.+360    	; 0xc3c <__stack+0x33d>
 ad4:	80 37       	cpi	r24, 0x70	; 112
 ad6:	19 f0       	breq	.+6      	; 0xade <__stack+0x1df>
 ad8:	88 37       	cpi	r24, 0x78	; 120
 ada:	21 f0       	breq	.+8      	; 0xae4 <__stack+0x1e5>
 adc:	af c0       	rjmp	.+350    	; 0xc3c <__stack+0x33d>
 ade:	2f 2f       	mov	r18, r31
 ae0:	20 61       	ori	r18, 0x10	; 16
 ae2:	b2 2e       	mov	r11, r18
 ae4:	b4 fe       	sbrs	r11, 4
 ae6:	0d c0       	rjmp	.+26     	; 0xb02 <__stack+0x203>
 ae8:	8b 2d       	mov	r24, r11
 aea:	84 60       	ori	r24, 0x04	; 4
 aec:	b8 2e       	mov	r11, r24
 aee:	09 c0       	rjmp	.+18     	; 0xb02 <__stack+0x203>
 af0:	24 ff       	sbrs	r18, 4
 af2:	0a c0       	rjmp	.+20     	; 0xb08 <__stack+0x209>
 af4:	9f 2f       	mov	r25, r31
 af6:	96 60       	ori	r25, 0x06	; 6
 af8:	b9 2e       	mov	r11, r25
 afa:	06 c0       	rjmp	.+12     	; 0xb08 <__stack+0x209>
 afc:	28 e0       	ldi	r18, 0x08	; 8
 afe:	30 e0       	ldi	r19, 0x00	; 0
 b00:	05 c0       	rjmp	.+10     	; 0xb0c <__stack+0x20d>
 b02:	20 e1       	ldi	r18, 0x10	; 16
 b04:	30 e0       	ldi	r19, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <__stack+0x20d>
 b08:	20 e1       	ldi	r18, 0x10	; 16
 b0a:	32 e0       	ldi	r19, 0x02	; 2
 b0c:	f8 01       	movw	r30, r16
 b0e:	b7 fe       	sbrs	r11, 7
 b10:	07 c0       	rjmp	.+14     	; 0xb20 <__stack+0x221>
 b12:	60 81       	ld	r22, Z
 b14:	71 81       	ldd	r23, Z+1	; 0x01
 b16:	82 81       	ldd	r24, Z+2	; 0x02
 b18:	93 81       	ldd	r25, Z+3	; 0x03
 b1a:	0c 5f       	subi	r16, 0xFC	; 252
 b1c:	1f 4f       	sbci	r17, 0xFF	; 255
 b1e:	06 c0       	rjmp	.+12     	; 0xb2c <__stack+0x22d>
 b20:	60 81       	ld	r22, Z
 b22:	71 81       	ldd	r23, Z+1	; 0x01
 b24:	80 e0       	ldi	r24, 0x00	; 0
 b26:	90 e0       	ldi	r25, 0x00	; 0
 b28:	0e 5f       	subi	r16, 0xFE	; 254
 b2a:	1f 4f       	sbci	r17, 0xFF	; 255
 b2c:	a4 01       	movw	r20, r8
 b2e:	0e 94 76 06 	call	0xcec	; 0xcec <__ultoa_invert>
 b32:	a8 2e       	mov	r10, r24
 b34:	a8 18       	sub	r10, r8
 b36:	fb 2d       	mov	r31, r11
 b38:	ff 77       	andi	r31, 0x7F	; 127
 b3a:	7f 2e       	mov	r7, r31
 b3c:	76 fe       	sbrs	r7, 6
 b3e:	0b c0       	rjmp	.+22     	; 0xb56 <__stack+0x257>
 b40:	37 2d       	mov	r19, r7
 b42:	3e 7f       	andi	r19, 0xFE	; 254
 b44:	a5 14       	cp	r10, r5
 b46:	50 f4       	brcc	.+20     	; 0xb5c <__stack+0x25d>
 b48:	74 fe       	sbrs	r7, 4
 b4a:	0a c0       	rjmp	.+20     	; 0xb60 <__stack+0x261>
 b4c:	72 fc       	sbrc	r7, 2
 b4e:	08 c0       	rjmp	.+16     	; 0xb60 <__stack+0x261>
 b50:	37 2d       	mov	r19, r7
 b52:	3e 7e       	andi	r19, 0xEE	; 238
 b54:	05 c0       	rjmp	.+10     	; 0xb60 <__stack+0x261>
 b56:	ba 2c       	mov	r11, r10
 b58:	37 2d       	mov	r19, r7
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <__stack+0x263>
 b5c:	ba 2c       	mov	r11, r10
 b5e:	01 c0       	rjmp	.+2      	; 0xb62 <__stack+0x263>
 b60:	b5 2c       	mov	r11, r5
 b62:	34 ff       	sbrs	r19, 4
 b64:	0d c0       	rjmp	.+26     	; 0xb80 <__stack+0x281>
 b66:	fe 01       	movw	r30, r28
 b68:	ea 0d       	add	r30, r10
 b6a:	f1 1d       	adc	r31, r1
 b6c:	80 81       	ld	r24, Z
 b6e:	80 33       	cpi	r24, 0x30	; 48
 b70:	11 f4       	brne	.+4      	; 0xb76 <__stack+0x277>
 b72:	39 7e       	andi	r19, 0xE9	; 233
 b74:	09 c0       	rjmp	.+18     	; 0xb88 <__stack+0x289>
 b76:	32 ff       	sbrs	r19, 2
 b78:	06 c0       	rjmp	.+12     	; 0xb86 <__stack+0x287>
 b7a:	b3 94       	inc	r11
 b7c:	b3 94       	inc	r11
 b7e:	04 c0       	rjmp	.+8      	; 0xb88 <__stack+0x289>
 b80:	83 2f       	mov	r24, r19
 b82:	86 78       	andi	r24, 0x86	; 134
 b84:	09 f0       	breq	.+2      	; 0xb88 <__stack+0x289>
 b86:	b3 94       	inc	r11
 b88:	33 fd       	sbrc	r19, 3
 b8a:	13 c0       	rjmp	.+38     	; 0xbb2 <__stack+0x2b3>
 b8c:	30 ff       	sbrs	r19, 0
 b8e:	06 c0       	rjmp	.+12     	; 0xb9c <__stack+0x29d>
 b90:	5a 2c       	mov	r5, r10
 b92:	b3 14       	cp	r11, r3
 b94:	18 f4       	brcc	.+6      	; 0xb9c <__stack+0x29d>
 b96:	53 0c       	add	r5, r3
 b98:	5b 18       	sub	r5, r11
 b9a:	b3 2c       	mov	r11, r3
 b9c:	b3 14       	cp	r11, r3
 b9e:	68 f4       	brcc	.+26     	; 0xbba <__stack+0x2bb>
 ba0:	b7 01       	movw	r22, r14
 ba2:	80 e2       	ldi	r24, 0x20	; 32
 ba4:	90 e0       	ldi	r25, 0x00	; 0
 ba6:	3c 87       	std	Y+12, r19	; 0x0c
 ba8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 bac:	b3 94       	inc	r11
 bae:	3c 85       	ldd	r19, Y+12	; 0x0c
 bb0:	f5 cf       	rjmp	.-22     	; 0xb9c <__stack+0x29d>
 bb2:	b3 14       	cp	r11, r3
 bb4:	10 f4       	brcc	.+4      	; 0xbba <__stack+0x2bb>
 bb6:	3b 18       	sub	r3, r11
 bb8:	01 c0       	rjmp	.+2      	; 0xbbc <__stack+0x2bd>
 bba:	31 2c       	mov	r3, r1
 bbc:	34 ff       	sbrs	r19, 4
 bbe:	12 c0       	rjmp	.+36     	; 0xbe4 <__stack+0x2e5>
 bc0:	b7 01       	movw	r22, r14
 bc2:	80 e3       	ldi	r24, 0x30	; 48
 bc4:	90 e0       	ldi	r25, 0x00	; 0
 bc6:	3c 87       	std	Y+12, r19	; 0x0c
 bc8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 bcc:	3c 85       	ldd	r19, Y+12	; 0x0c
 bce:	32 ff       	sbrs	r19, 2
 bd0:	17 c0       	rjmp	.+46     	; 0xc00 <__stack+0x301>
 bd2:	31 fd       	sbrc	r19, 1
 bd4:	03 c0       	rjmp	.+6      	; 0xbdc <__stack+0x2dd>
 bd6:	88 e7       	ldi	r24, 0x78	; 120
 bd8:	90 e0       	ldi	r25, 0x00	; 0
 bda:	02 c0       	rjmp	.+4      	; 0xbe0 <__stack+0x2e1>
 bdc:	88 e5       	ldi	r24, 0x58	; 88
 bde:	90 e0       	ldi	r25, 0x00	; 0
 be0:	b7 01       	movw	r22, r14
 be2:	0c c0       	rjmp	.+24     	; 0xbfc <__stack+0x2fd>
 be4:	83 2f       	mov	r24, r19
 be6:	86 78       	andi	r24, 0x86	; 134
 be8:	59 f0       	breq	.+22     	; 0xc00 <__stack+0x301>
 bea:	31 ff       	sbrs	r19, 1
 bec:	02 c0       	rjmp	.+4      	; 0xbf2 <__stack+0x2f3>
 bee:	8b e2       	ldi	r24, 0x2B	; 43
 bf0:	01 c0       	rjmp	.+2      	; 0xbf4 <__stack+0x2f5>
 bf2:	80 e2       	ldi	r24, 0x20	; 32
 bf4:	37 fd       	sbrc	r19, 7
 bf6:	8d e2       	ldi	r24, 0x2D	; 45
 bf8:	b7 01       	movw	r22, r14
 bfa:	90 e0       	ldi	r25, 0x00	; 0
 bfc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 c00:	a5 14       	cp	r10, r5
 c02:	38 f4       	brcc	.+14     	; 0xc12 <__stack+0x313>
 c04:	b7 01       	movw	r22, r14
 c06:	80 e3       	ldi	r24, 0x30	; 48
 c08:	90 e0       	ldi	r25, 0x00	; 0
 c0a:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 c0e:	5a 94       	dec	r5
 c10:	f7 cf       	rjmp	.-18     	; 0xc00 <__stack+0x301>
 c12:	aa 94       	dec	r10
 c14:	f4 01       	movw	r30, r8
 c16:	ea 0d       	add	r30, r10
 c18:	f1 1d       	adc	r31, r1
 c1a:	80 81       	ld	r24, Z
 c1c:	b7 01       	movw	r22, r14
 c1e:	90 e0       	ldi	r25, 0x00	; 0
 c20:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 c24:	a1 10       	cpse	r10, r1
 c26:	f5 cf       	rjmp	.-22     	; 0xc12 <__stack+0x313>
 c28:	33 20       	and	r3, r3
 c2a:	09 f4       	brne	.+2      	; 0xc2e <__stack+0x32f>
 c2c:	51 ce       	rjmp	.-862    	; 0x8d0 <vfprintf+0x24>
 c2e:	b7 01       	movw	r22, r14
 c30:	80 e2       	ldi	r24, 0x20	; 32
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	0e 94 3e 06 	call	0xc7c	; 0xc7c <fputc>
 c38:	3a 94       	dec	r3
 c3a:	f6 cf       	rjmp	.-20     	; 0xc28 <__stack+0x329>
 c3c:	f7 01       	movw	r30, r14
 c3e:	86 81       	ldd	r24, Z+6	; 0x06
 c40:	97 81       	ldd	r25, Z+7	; 0x07
 c42:	02 c0       	rjmp	.+4      	; 0xc48 <__stack+0x349>
 c44:	8f ef       	ldi	r24, 0xFF	; 255
 c46:	9f ef       	ldi	r25, 0xFF	; 255
 c48:	2c 96       	adiw	r28, 0x0c	; 12
 c4a:	e2 e1       	ldi	r30, 0x12	; 18
 c4c:	0c 94 f0 06 	jmp	0xde0	; 0xde0 <__epilogue_restores__>

00000c50 <strnlen_P>:
 c50:	fc 01       	movw	r30, r24
 c52:	05 90       	lpm	r0, Z+
 c54:	61 50       	subi	r22, 0x01	; 1
 c56:	70 40       	sbci	r23, 0x00	; 0
 c58:	01 10       	cpse	r0, r1
 c5a:	d8 f7       	brcc	.-10     	; 0xc52 <strnlen_P+0x2>
 c5c:	80 95       	com	r24
 c5e:	90 95       	com	r25
 c60:	8e 0f       	add	r24, r30
 c62:	9f 1f       	adc	r25, r31
 c64:	08 95       	ret

00000c66 <strnlen>:
 c66:	fc 01       	movw	r30, r24
 c68:	61 50       	subi	r22, 0x01	; 1
 c6a:	70 40       	sbci	r23, 0x00	; 0
 c6c:	01 90       	ld	r0, Z+
 c6e:	01 10       	cpse	r0, r1
 c70:	d8 f7       	brcc	.-10     	; 0xc68 <strnlen+0x2>
 c72:	80 95       	com	r24
 c74:	90 95       	com	r25
 c76:	8e 0f       	add	r24, r30
 c78:	9f 1f       	adc	r25, r31
 c7a:	08 95       	ret

00000c7c <fputc>:
 c7c:	0f 93       	push	r16
 c7e:	1f 93       	push	r17
 c80:	cf 93       	push	r28
 c82:	df 93       	push	r29
 c84:	fb 01       	movw	r30, r22
 c86:	23 81       	ldd	r18, Z+3	; 0x03
 c88:	21 fd       	sbrc	r18, 1
 c8a:	03 c0       	rjmp	.+6      	; 0xc92 <fputc+0x16>
 c8c:	8f ef       	ldi	r24, 0xFF	; 255
 c8e:	9f ef       	ldi	r25, 0xFF	; 255
 c90:	28 c0       	rjmp	.+80     	; 0xce2 <fputc+0x66>
 c92:	22 ff       	sbrs	r18, 2
 c94:	16 c0       	rjmp	.+44     	; 0xcc2 <fputc+0x46>
 c96:	46 81       	ldd	r20, Z+6	; 0x06
 c98:	57 81       	ldd	r21, Z+7	; 0x07
 c9a:	24 81       	ldd	r18, Z+4	; 0x04
 c9c:	35 81       	ldd	r19, Z+5	; 0x05
 c9e:	42 17       	cp	r20, r18
 ca0:	53 07       	cpc	r21, r19
 ca2:	44 f4       	brge	.+16     	; 0xcb4 <fputc+0x38>
 ca4:	a0 81       	ld	r26, Z
 ca6:	b1 81       	ldd	r27, Z+1	; 0x01
 ca8:	9d 01       	movw	r18, r26
 caa:	2f 5f       	subi	r18, 0xFF	; 255
 cac:	3f 4f       	sbci	r19, 0xFF	; 255
 cae:	31 83       	std	Z+1, r19	; 0x01
 cb0:	20 83       	st	Z, r18
 cb2:	8c 93       	st	X, r24
 cb4:	26 81       	ldd	r18, Z+6	; 0x06
 cb6:	37 81       	ldd	r19, Z+7	; 0x07
 cb8:	2f 5f       	subi	r18, 0xFF	; 255
 cba:	3f 4f       	sbci	r19, 0xFF	; 255
 cbc:	37 83       	std	Z+7, r19	; 0x07
 cbe:	26 83       	std	Z+6, r18	; 0x06
 cc0:	10 c0       	rjmp	.+32     	; 0xce2 <fputc+0x66>
 cc2:	eb 01       	movw	r28, r22
 cc4:	09 2f       	mov	r16, r25
 cc6:	18 2f       	mov	r17, r24
 cc8:	00 84       	ldd	r0, Z+8	; 0x08
 cca:	f1 85       	ldd	r31, Z+9	; 0x09
 ccc:	e0 2d       	mov	r30, r0
 cce:	09 95       	icall
 cd0:	89 2b       	or	r24, r25
 cd2:	e1 f6       	brne	.-72     	; 0xc8c <fputc+0x10>
 cd4:	8e 81       	ldd	r24, Y+6	; 0x06
 cd6:	9f 81       	ldd	r25, Y+7	; 0x07
 cd8:	01 96       	adiw	r24, 0x01	; 1
 cda:	9f 83       	std	Y+7, r25	; 0x07
 cdc:	8e 83       	std	Y+6, r24	; 0x06
 cde:	81 2f       	mov	r24, r17
 ce0:	90 2f       	mov	r25, r16
 ce2:	df 91       	pop	r29
 ce4:	cf 91       	pop	r28
 ce6:	1f 91       	pop	r17
 ce8:	0f 91       	pop	r16
 cea:	08 95       	ret

00000cec <__ultoa_invert>:
 cec:	fa 01       	movw	r30, r20
 cee:	aa 27       	eor	r26, r26
 cf0:	28 30       	cpi	r18, 0x08	; 8
 cf2:	51 f1       	breq	.+84     	; 0xd48 <__ultoa_invert+0x5c>
 cf4:	20 31       	cpi	r18, 0x10	; 16
 cf6:	81 f1       	breq	.+96     	; 0xd58 <__ultoa_invert+0x6c>
 cf8:	e8 94       	clt
 cfa:	6f 93       	push	r22
 cfc:	6e 7f       	andi	r22, 0xFE	; 254
 cfe:	6e 5f       	subi	r22, 0xFE	; 254
 d00:	7f 4f       	sbci	r23, 0xFF	; 255
 d02:	8f 4f       	sbci	r24, 0xFF	; 255
 d04:	9f 4f       	sbci	r25, 0xFF	; 255
 d06:	af 4f       	sbci	r26, 0xFF	; 255
 d08:	b1 e0       	ldi	r27, 0x01	; 1
 d0a:	3e d0       	rcall	.+124    	; 0xd88 <__ultoa_invert+0x9c>
 d0c:	b4 e0       	ldi	r27, 0x04	; 4
 d0e:	3c d0       	rcall	.+120    	; 0xd88 <__ultoa_invert+0x9c>
 d10:	67 0f       	add	r22, r23
 d12:	78 1f       	adc	r23, r24
 d14:	89 1f       	adc	r24, r25
 d16:	9a 1f       	adc	r25, r26
 d18:	a1 1d       	adc	r26, r1
 d1a:	68 0f       	add	r22, r24
 d1c:	79 1f       	adc	r23, r25
 d1e:	8a 1f       	adc	r24, r26
 d20:	91 1d       	adc	r25, r1
 d22:	a1 1d       	adc	r26, r1
 d24:	6a 0f       	add	r22, r26
 d26:	71 1d       	adc	r23, r1
 d28:	81 1d       	adc	r24, r1
 d2a:	91 1d       	adc	r25, r1
 d2c:	a1 1d       	adc	r26, r1
 d2e:	20 d0       	rcall	.+64     	; 0xd70 <__ultoa_invert+0x84>
 d30:	09 f4       	brne	.+2      	; 0xd34 <__ultoa_invert+0x48>
 d32:	68 94       	set
 d34:	3f 91       	pop	r19
 d36:	2a e0       	ldi	r18, 0x0A	; 10
 d38:	26 9f       	mul	r18, r22
 d3a:	11 24       	eor	r1, r1
 d3c:	30 19       	sub	r19, r0
 d3e:	30 5d       	subi	r19, 0xD0	; 208
 d40:	31 93       	st	Z+, r19
 d42:	de f6       	brtc	.-74     	; 0xcfa <__ultoa_invert+0xe>
 d44:	cf 01       	movw	r24, r30
 d46:	08 95       	ret
 d48:	46 2f       	mov	r20, r22
 d4a:	47 70       	andi	r20, 0x07	; 7
 d4c:	40 5d       	subi	r20, 0xD0	; 208
 d4e:	41 93       	st	Z+, r20
 d50:	b3 e0       	ldi	r27, 0x03	; 3
 d52:	0f d0       	rcall	.+30     	; 0xd72 <__ultoa_invert+0x86>
 d54:	c9 f7       	brne	.-14     	; 0xd48 <__ultoa_invert+0x5c>
 d56:	f6 cf       	rjmp	.-20     	; 0xd44 <__ultoa_invert+0x58>
 d58:	46 2f       	mov	r20, r22
 d5a:	4f 70       	andi	r20, 0x0F	; 15
 d5c:	40 5d       	subi	r20, 0xD0	; 208
 d5e:	4a 33       	cpi	r20, 0x3A	; 58
 d60:	18 f0       	brcs	.+6      	; 0xd68 <__ultoa_invert+0x7c>
 d62:	49 5d       	subi	r20, 0xD9	; 217
 d64:	31 fd       	sbrc	r19, 1
 d66:	40 52       	subi	r20, 0x20	; 32
 d68:	41 93       	st	Z+, r20
 d6a:	02 d0       	rcall	.+4      	; 0xd70 <__ultoa_invert+0x84>
 d6c:	a9 f7       	brne	.-22     	; 0xd58 <__ultoa_invert+0x6c>
 d6e:	ea cf       	rjmp	.-44     	; 0xd44 <__ultoa_invert+0x58>
 d70:	b4 e0       	ldi	r27, 0x04	; 4
 d72:	a6 95       	lsr	r26
 d74:	97 95       	ror	r25
 d76:	87 95       	ror	r24
 d78:	77 95       	ror	r23
 d7a:	67 95       	ror	r22
 d7c:	ba 95       	dec	r27
 d7e:	c9 f7       	brne	.-14     	; 0xd72 <__ultoa_invert+0x86>
 d80:	00 97       	sbiw	r24, 0x00	; 0
 d82:	61 05       	cpc	r22, r1
 d84:	71 05       	cpc	r23, r1
 d86:	08 95       	ret
 d88:	9b 01       	movw	r18, r22
 d8a:	ac 01       	movw	r20, r24
 d8c:	0a 2e       	mov	r0, r26
 d8e:	06 94       	lsr	r0
 d90:	57 95       	ror	r21
 d92:	47 95       	ror	r20
 d94:	37 95       	ror	r19
 d96:	27 95       	ror	r18
 d98:	ba 95       	dec	r27
 d9a:	c9 f7       	brne	.-14     	; 0xd8e <__ultoa_invert+0xa2>
 d9c:	62 0f       	add	r22, r18
 d9e:	73 1f       	adc	r23, r19
 da0:	84 1f       	adc	r24, r20
 da2:	95 1f       	adc	r25, r21
 da4:	a0 1d       	adc	r26, r0
 da6:	08 95       	ret

00000da8 <__prologue_saves__>:
 da8:	2f 92       	push	r2
 daa:	3f 92       	push	r3
 dac:	4f 92       	push	r4
 dae:	5f 92       	push	r5
 db0:	6f 92       	push	r6
 db2:	7f 92       	push	r7
 db4:	8f 92       	push	r8
 db6:	9f 92       	push	r9
 db8:	af 92       	push	r10
 dba:	bf 92       	push	r11
 dbc:	cf 92       	push	r12
 dbe:	df 92       	push	r13
 dc0:	ef 92       	push	r14
 dc2:	ff 92       	push	r15
 dc4:	0f 93       	push	r16
 dc6:	1f 93       	push	r17
 dc8:	cf 93       	push	r28
 dca:	df 93       	push	r29
 dcc:	cd b7       	in	r28, 0x3d	; 61
 dce:	de b7       	in	r29, 0x3e	; 62
 dd0:	ca 1b       	sub	r28, r26
 dd2:	db 0b       	sbc	r29, r27
 dd4:	0f b6       	in	r0, 0x3f	; 63
 dd6:	f8 94       	cli
 dd8:	de bf       	out	0x3e, r29	; 62
 dda:	0f be       	out	0x3f, r0	; 63
 ddc:	cd bf       	out	0x3d, r28	; 61
 dde:	09 94       	ijmp

00000de0 <__epilogue_restores__>:
 de0:	2a 88       	ldd	r2, Y+18	; 0x12
 de2:	39 88       	ldd	r3, Y+17	; 0x11
 de4:	48 88       	ldd	r4, Y+16	; 0x10
 de6:	5f 84       	ldd	r5, Y+15	; 0x0f
 de8:	6e 84       	ldd	r6, Y+14	; 0x0e
 dea:	7d 84       	ldd	r7, Y+13	; 0x0d
 dec:	8c 84       	ldd	r8, Y+12	; 0x0c
 dee:	9b 84       	ldd	r9, Y+11	; 0x0b
 df0:	aa 84       	ldd	r10, Y+10	; 0x0a
 df2:	b9 84       	ldd	r11, Y+9	; 0x09
 df4:	c8 84       	ldd	r12, Y+8	; 0x08
 df6:	df 80       	ldd	r13, Y+7	; 0x07
 df8:	ee 80       	ldd	r14, Y+6	; 0x06
 dfa:	fd 80       	ldd	r15, Y+5	; 0x05
 dfc:	0c 81       	ldd	r16, Y+4	; 0x04
 dfe:	1b 81       	ldd	r17, Y+3	; 0x03
 e00:	aa 81       	ldd	r26, Y+2	; 0x02
 e02:	b9 81       	ldd	r27, Y+1	; 0x01
 e04:	ce 0f       	add	r28, r30
 e06:	d1 1d       	adc	r29, r1
 e08:	0f b6       	in	r0, 0x3f	; 63
 e0a:	f8 94       	cli
 e0c:	de bf       	out	0x3e, r29	; 62
 e0e:	0f be       	out	0x3f, r0	; 63
 e10:	cd bf       	out	0x3d, r28	; 61
 e12:	ed 01       	movw	r28, r26
 e14:	08 95       	ret

00000e16 <_exit>:
 e16:	f8 94       	cli

00000e18 <__stop_program>:
 e18:	ff cf       	rjmp	.-2      	; 0xe18 <__stop_program>
