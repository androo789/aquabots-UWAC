
UWAC_Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  00000e0e  00000ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800242  00800242  00000fe4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001080  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d86  00000000  00000000  00001168  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c4  00000000  00000000  00001eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000585  00000000  00000000  000024b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00002a38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  00002d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010c6  00000000  00000000  000030f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000041ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e0       	ldi	r30, 0x0E	; 14
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 4d 03 	call	0x69a	; 0x69a <main>
  9e:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <CRC>:
 * @param received Is the data received or not
 *
 * @return The generated checksum
*/
int CRC(uint8_t data[100], int length, uint16_t poly, bool received)
{
  a6:	2f 92       	push	r2
  a8:	3f 92       	push	r3
  aa:	4f 92       	push	r4
  ac:	5f 92       	push	r5
  ae:	6f 92       	push	r6
  b0:	7f 92       	push	r7
  b2:	8f 92       	push	r8
  b4:	9f 92       	push	r9
  b6:	af 92       	push	r10
  b8:	bf 92       	push	r11
  ba:	cf 92       	push	r12
  bc:	df 92       	push	r13
  be:	ef 92       	push	r14
  c0:	ff 92       	push	r15
  c2:	0f 93       	push	r16
  c4:	1f 93       	push	r17
  c6:	cf 93       	push	r28
  c8:	df 93       	push	r29
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
  ce:	60 97       	sbiw	r28, 0x10	; 16
  d0:	0f b6       	in	r0, 0x3f	; 63
  d2:	f8 94       	cli
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	0f be       	out	0x3f, r0	; 63
  d8:	cd bf       	out	0x3d, r28	; 61
  da:	3c 01       	movw	r6, r24
  dc:	8b 01       	movw	r16, r22
  de:	7a 01       	movw	r14, r20
  e0:	32 2e       	mov	r3, r18
    #ifdef DEBUG // Debugging
    printf("Length: %i\n", length);
  e2:	1f 93       	push	r17
  e4:	6f 93       	push	r22
  e6:	84 eb       	ldi	r24, 0xB4	; 180
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	9f 93       	push	r25
  ec:	8f 93       	push	r24
  ee:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    // Reset some stuff and initialize some variables
    int i;
    int allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	0f 90       	pop	r0
  fa:	10 16       	cp	r1, r16
  fc:	11 06       	cpc	r1, r17
  fe:	0c f0       	brlt	.+2      	; 0x102 <CRC+0x5c>
 100:	d0 c0       	rjmp	.+416    	; 0x2a2 <CRC+0x1fc>
 102:	63 01       	movw	r12, r6
 104:	60 0e       	add	r6, r16
 106:	71 1e       	adc	r7, r17
 108:	41 2c       	mov	r4, r1
 10a:	51 2c       	mov	r5, r1
    {
        #ifdef DEBUG // Debugging
        printf("Data: %i, ", (uint8_t)data[i]);
 10c:	00 e8       	ldi	r16, 0x80	; 128
 10e:	11 e0       	ldi	r17, 0x01	; 1
 110:	46 01       	movw	r8, r12
 112:	d6 01       	movw	r26, r12
 114:	8d 91       	ld	r24, X+
 116:	6d 01       	movw	r12, r26
 118:	1f 92       	push	r1
 11a:	8f 93       	push	r24
 11c:	1f 93       	push	r17
 11e:	0f 93       	push	r16
 120:	0e 94 03 04 	call	0x806	; 0x806 <printf>
        #endif // DEBUG

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
 124:	54 2c       	mov	r5, r4
 126:	44 24       	eor	r4, r4
 128:	f4 01       	movw	r30, r8
 12a:	80 81       	ld	r24, Z
 12c:	48 2a       	or	r4, r24
    // Reset some stuff and initialize some variables
    int i;
    int allData = 0;

    // Loop through all the bits
    for (i = 0; i < length; i++)
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	c6 14       	cp	r12, r6
 138:	d7 04       	cpc	r13, r7
 13a:	51 f7       	brne	.-44     	; 0x110 <CRC+0x6a>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %i\n", allData);
 13c:	5f 92       	push	r5
 13e:	4f 92       	push	r4
 140:	8b e8       	ldi	r24, 0x8B	; 139
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	9f 93       	push	r25
 146:	8f 93       	push	r24
 148:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	31 10       	cpse	r3, r1
 156:	02 c0       	rjmp	.+4      	; 0x15c <CRC+0xb6>
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
 158:	54 2c       	mov	r5, r4
 15a:	44 24       	eor	r4, r4
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 15c:	97 01       	movw	r18, r14
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	cb 01       	movw	r24, r22
 168:	e9 82       	std	Y+1, r14	; 0x01
 16a:	3a 83       	std	Y+2, r19	; 0x02
 16c:	4b 83       	std	Y+3, r20	; 0x03
 16e:	5c 83       	std	Y+4, r21	; 0x04
 170:	6d 83       	std	Y+5, r22	; 0x05
 172:	7e 83       	std	Y+6, r23	; 0x06
 174:	8f 83       	std	Y+7, r24	; 0x07
 176:	98 87       	std	Y+8, r25	; 0x08
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 178:	3f ef       	ldi	r19, 0xFF	; 255
 17a:	43 16       	cp	r4, r19
 17c:	51 04       	cpc	r5, r1
 17e:	0c f4       	brge	.+2      	; 0x182 <CRC+0xdc>
 180:	a1 c0       	rjmp	.+322    	; 0x2c4 <CRC+0x21e>
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR

        #ifdef DEBUG // Debugging
        printf("%i\n", allData);
 182:	5c 86       	std	Y+12, r5	; 0x0c
 184:	4b 86       	std	Y+11, r4	; 0x0b
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
 186:	ab 85       	ldd	r26, Y+11	; 0x0b
 188:	a9 87       	std	Y+9, r26	; 0x09
 18a:	bc 85       	ldd	r27, Y+12	; 0x0c
 18c:	ba 87       	std	Y+10, r27	; 0x0a
 18e:	eb 2f       	mov	r30, r27
 190:	ee 0f       	add	r30, r30
 192:	ee 0b       	sbc	r30, r30
 194:	6e 2e       	mov	r6, r30
 196:	5e 2e       	mov	r5, r30
 198:	4e 2e       	mov	r4, r30
 19a:	3e 2e       	mov	r3, r30
 19c:	2e 2e       	mov	r2, r30
 19e:	29 81       	ldd	r18, Y+1	; 0x01
 1a0:	3a 81       	ldd	r19, Y+2	; 0x02
 1a2:	4b 81       	ldd	r20, Y+3	; 0x03
 1a4:	5c 81       	ldd	r21, Y+4	; 0x04
 1a6:	6d 81       	ldd	r22, Y+5	; 0x05
 1a8:	7e 81       	ldd	r23, Y+6	; 0x06
 1aa:	8f 81       	ldd	r24, Y+7	; 0x07
 1ac:	98 85       	ldd	r25, Y+8	; 0x08
 1ae:	aa 2e       	mov	r10, r26
 1b0:	bb 2e       	mov	r11, r27
 1b2:	ce 2e       	mov	r12, r30
 1b4:	de 2e       	mov	r13, r30
 1b6:	ee 2e       	mov	r14, r30
 1b8:	fe 2e       	mov	r15, r30
 1ba:	0e 2f       	mov	r16, r30
 1bc:	1e 2f       	mov	r17, r30
 1be:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__cmpdi2>
 1c2:	b8 f5       	brcc	.+110    	; 0x232 <CRC+0x18c>
 1c4:	72 2e       	mov	r7, r18
 1c6:	83 2e       	mov	r8, r19
 1c8:	94 2e       	mov	r9, r20
 1ca:	58 8b       	std	Y+16, r21	; 0x10
 1cc:	6d 87       	std	Y+13, r22	; 0x0d
 1ce:	b7 2f       	mov	r27, r23
 1d0:	a8 2f       	mov	r26, r24
 1d2:	9e 87       	std	Y+14, r25	; 0x0e
 1d4:	fe 2f       	mov	r31, r30
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
 1d6:	27 2d       	mov	r18, r7
 1d8:	38 2d       	mov	r19, r8
 1da:	49 2d       	mov	r20, r9
 1dc:	58 89       	ldd	r21, Y+16	; 0x10
 1de:	6d 85       	ldd	r22, Y+13	; 0x0d
 1e0:	7b 2f       	mov	r23, r27
 1e2:	8a 2f       	mov	r24, r26
 1e4:	9e 85       	ldd	r25, Y+14	; 0x0e
 1e6:	01 e0       	ldi	r16, 0x01	; 1
 1e8:	0e 94 c3 03 	call	0x786	; 0x786 <__ashldi3>
 1ec:	72 2e       	mov	r7, r18
 1ee:	83 2e       	mov	r8, r19
 1f0:	94 2e       	mov	r9, r20
 1f2:	58 8b       	std	Y+16, r21	; 0x10
 1f4:	6d 87       	std	Y+13, r22	; 0x0d
 1f6:	b7 2f       	mov	r27, r23
 1f8:	a8 2f       	mov	r26, r24
 1fa:	9e 87       	std	Y+14, r25	; 0x0e
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
        while (calcPoly < allData)
 1fc:	a9 84       	ldd	r10, Y+9	; 0x09
 1fe:	ba 84       	ldd	r11, Y+10	; 0x0a
 200:	cf 2e       	mov	r12, r31
 202:	d6 2c       	mov	r13, r6
 204:	e5 2c       	mov	r14, r5
 206:	f4 2c       	mov	r15, r4
 208:	03 2d       	mov	r16, r3
 20a:	12 2d       	mov	r17, r2
 20c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__cmpdi2>
 210:	10 f3       	brcs	.-60     	; 0x1d6 <CRC+0x130>
 212:	8a 2f       	mov	r24, r26
        {
            calcPoly = calcPoly << 1; // Shift the polynomial left by one
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one
 214:	27 2d       	mov	r18, r7
 216:	38 2d       	mov	r19, r8
 218:	49 2d       	mov	r20, r9
 21a:	01 e0       	ldi	r16, 0x01	; 1
 21c:	0e 94 de 03 	call	0x7bc	; 0x7bc <__lshrdi3>
 220:	22 2e       	mov	r2, r18
 222:	33 2e       	mov	r3, r19
 224:	44 2e       	mov	r4, r20
 226:	55 2e       	mov	r5, r21
 228:	66 2e       	mov	r6, r22
 22a:	77 2e       	mov	r7, r23
 22c:	88 2e       	mov	r8, r24
 22e:	99 2e       	mov	r9, r25
 230:	08 c0       	rjmp	.+16     	; 0x242 <CRC+0x19c>
    if (!received) // Check if the data is received or not
    {
        allData = allData << 8; // Add one byte of empty data at the right of the data
    }

    uint64_t calcPoly = poly; // Store the polynomial in a variable so we can modify it
 232:	29 80       	ldd	r2, Y+1	; 0x01
 234:	3a 80       	ldd	r3, Y+2	; 0x02
 236:	4b 80       	ldd	r4, Y+3	; 0x03
 238:	5c 80       	ldd	r5, Y+4	; 0x04
 23a:	6d 80       	ldd	r6, Y+5	; 0x05
 23c:	7e 80       	ldd	r7, Y+6	; 0x06
 23e:	8f 80       	ldd	r8, Y+7	; 0x07
 240:	98 84       	ldd	r9, Y+8	; 0x08
            shiftBack = true;
        }
        if (shiftBack) calcPoly = calcPoly >> 1; // Shift the polynomial back one

        #ifdef DEBUG // Debugging
        printf("%i^%i=", allData, calcPoly);
 242:	9f 92       	push	r9
 244:	8f 92       	push	r8
 246:	7f 92       	push	r7
 248:	6f 92       	push	r6
 24a:	5f 92       	push	r5
 24c:	4f 92       	push	r4
 24e:	3f 92       	push	r3
 250:	2f 92       	push	r2
 252:	ec 85       	ldd	r30, Y+12	; 0x0c
 254:	ef 93       	push	r30
 256:	fb 85       	ldd	r31, Y+11	; 0x0b
 258:	ff 93       	push	r31
 25a:	a9 e9       	ldi	r26, 0x99	; 153
 25c:	b1 e0       	ldi	r27, 0x01	; 1
 25e:	bf 93       	push	r27
 260:	af 93       	push	r26
 262:	0e 94 03 04 	call	0x806	; 0x806 <printf>
        #endif // DEBUG

        allData = allData ^ calcPoly; // Do the actual XOR
 266:	2b 85       	ldd	r18, Y+11	; 0x0b
 268:	3c 85       	ldd	r19, Y+12	; 0x0c
 26a:	22 26       	eor	r2, r18
 26c:	33 26       	eor	r3, r19
 26e:	3c 86       	std	Y+12, r3	; 0x0c
 270:	2b 86       	std	Y+11, r2	; 0x0b

        #ifdef DEBUG // Debugging
        printf("%i\n", allData);
 272:	3f 92       	push	r3
 274:	2f 92       	push	r2
 276:	a5 e9       	ldi	r26, 0x95	; 149
 278:	b1 e0       	ldi	r27, 0x01	; 1
 27a:	bf 93       	push	r27
 27c:	af 93       	push	r26
 27e:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    // Loop endlessly
    while (1)
    {
        bool shiftBack = false; // To see if we need to shift back later

        if (allData < 0xFF) break; // If the data is smaller then 255 (0xFF)
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	4b 85       	ldd	r20, Y+11	; 0x0b
 28e:	5c 85       	ldd	r21, Y+12	; 0x0c
 290:	4f 3f       	cpi	r20, 0xFF	; 255
 292:	51 05       	cpc	r21, r1
 294:	0c f0       	brlt	.+2      	; 0x298 <CRC+0x1f2>
 296:	77 cf       	rjmp	.-274    	; 0x186 <CRC+0xe0>
 298:	2a 01       	movw	r4, r20
 29a:	14 c0       	rjmp	.+40     	; 0x2c4 <CRC+0x21e>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    int allData = 0;
 29c:	41 2c       	mov	r4, r1
 29e:	51 2c       	mov	r5, r1
 2a0:	11 c0       	rjmp	.+34     	; 0x2c4 <CRC+0x21e>

        allData = allData << 8 | (uint8_t)data[i]; // Add the last byte to the right of the previous ones
    }

    #ifdef DEBUG // Debugging
    printf("\nallData: %i\n", allData);
 2a2:	1f 92       	push	r1
 2a4:	1f 92       	push	r1
 2a6:	8b e8       	ldi	r24, 0x8B	; 139
 2a8:	91 e0       	ldi	r25, 0x01	; 1
 2aa:	9f 93       	push	r25
 2ac:	8f 93       	push	r24
 2ae:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    #endif // DEBUG

    if (!received) // Check if the data is received or not
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	31 10       	cpse	r3, r1
 2bc:	ef cf       	rjmp	.-34     	; 0x29c <CRC+0x1f6>
    printf("Length: %i\n", length);
    #endif // DEBUG

    // Reset some stuff and initialize some variables
    int i;
    int allData = 0;
 2be:	41 2c       	mov	r4, r1
 2c0:	51 2c       	mov	r5, r1
 2c2:	4a cf       	rjmp	.-364    	; 0x158 <CRC+0xb2>

        calcPoly = poly; // Reset the polynomial to its original value
    }

    return allData;
}
 2c4:	c2 01       	movw	r24, r4
 2c6:	60 96       	adiw	r28, 0x10	; 16
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	df 91       	pop	r29
 2d4:	cf 91       	pop	r28
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	ff 90       	pop	r15
 2dc:	ef 90       	pop	r14
 2de:	df 90       	pop	r13
 2e0:	cf 90       	pop	r12
 2e2:	bf 90       	pop	r11
 2e4:	af 90       	pop	r10
 2e6:	9f 90       	pop	r9
 2e8:	8f 90       	pop	r8
 2ea:	7f 90       	pop	r7
 2ec:	6f 90       	pop	r6
 2ee:	5f 90       	pop	r5
 2f0:	4f 90       	pop	r4
 2f2:	3f 90       	pop	r3
 2f4:	2f 90       	pop	r2
 2f6:	08 95       	ret

000002f8 <fillDataArray>:
 *
 * @return The array of integers which can be send.
 *
*/
uint8_t* fillDataArray(char data[100])
{
 2f8:	3f 92       	push	r3
 2fa:	4f 92       	push	r4
 2fc:	5f 92       	push	r5
 2fe:	6f 92       	push	r6
 300:	7f 92       	push	r7
 302:	8f 92       	push	r8
 304:	9f 92       	push	r9
 306:	af 92       	push	r10
 308:	bf 92       	push	r11
 30a:	cf 92       	push	r12
 30c:	df 92       	push	r13
 30e:	ef 92       	push	r14
 310:	ff 92       	push	r15
 312:	0f 93       	push	r16
 314:	1f 93       	push	r17
 316:	cf 93       	push	r28
 318:	df 93       	push	r29
 31a:	cd b7       	in	r28, 0x3d	; 61
 31c:	de b7       	in	r29, 0x3e	; 62
 31e:	c4 5f       	subi	r28, 0xF4	; 244
 320:	d1 40       	sbci	r29, 0x01	; 1
 322:	0f b6       	in	r0, 0x3f	; 63
 324:	f8 94       	cli
 326:	de bf       	out	0x3e, r29	; 62
 328:	0f be       	out	0x3f, r0	; 63
 32a:	cd bf       	out	0x3d, r28	; 61
 32c:	8c 01       	movw	r16, r24
    // Reset some stuff and initialize some variables
    dataLength = 0;
 32e:	10 92 43 02 	sts	0x0243, r1
 332:	10 92 42 02 	sts	0x0242, r1
 336:	2c 01       	movw	r4, r24
 338:	9e 01       	movw	r18, r28
 33a:	2f 56       	subi	r18, 0x6F	; 111
 33c:	3e 4f       	sbci	r19, 0xFE	; 254
    int i;
    uint8_t ret[400]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 33e:	dc 01       	movw	r26, r24
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	05 c0       	rjmp	.+10     	; 0x350 <fillDataArray+0x58>
    {
        data_num[i] = (uint8_t)data[i];
 346:	4d 91       	ld	r20, X+
 348:	f9 01       	movw	r30, r18
 34a:	41 93       	st	Z+, r20
 34c:	9f 01       	movw	r18, r30
    int i;
    uint8_t ret[400]; // The return variable
    uint8_t data_num[100]; // The int representation of the data

    // Convert the chars to ints
    for (i = 0; i < strlen(data); i++)
 34e:	01 96       	adiw	r24, 0x01	; 1
 350:	f8 01       	movw	r30, r16
 352:	01 90       	ld	r0, Z+
 354:	00 20       	and	r0, r0
 356:	e9 f7       	brne	.-6      	; 0x352 <fillDataArray+0x5a>
 358:	31 97       	sbiw	r30, 0x01	; 1
 35a:	bf 01       	movw	r22, r30
 35c:	60 1b       	sub	r22, r16
 35e:	71 0b       	sbc	r23, r17
 360:	86 17       	cp	r24, r22
 362:	97 07       	cpc	r25, r23
 364:	80 f3       	brcs	.-32     	; 0x346 <fillDataArray+0x4e>
    {
        data_num[i] = (uint8_t)data[i];
    }

    int checksum = CRC(data_num, strlen(data), POLY, false); // Get a checksum for the data
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	47 e6       	ldi	r20, 0x67	; 103
 36a:	51 e0       	ldi	r21, 0x01	; 1
 36c:	ce 01       	movw	r24, r28
 36e:	8f 56       	subi	r24, 0x6F	; 111
 370:	9e 4f       	sbci	r25, 0xFE	; 254
 372:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 376:	3c 01       	movw	r6, r24

    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
 378:	7f 92       	push	r7
 37a:	8f 93       	push	r24
 37c:	80 ea       	ldi	r24, 0xA0	; 160
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	9f 93       	push	r25
 382:	8f 93       	push	r24
 384:	0e 94 03 04 	call	0x806	; 0x806 <printf>
 388:	ce 01       	movw	r24, r28
 38a:	01 96       	adiw	r24, 0x01	; 1
 38c:	7c 01       	movw	r14, r24
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 38e:	0f 90       	pop	r0
 390:	0f 90       	pop	r0
 392:	0f 90       	pop	r0
 394:	0f 90       	pop	r0
 396:	81 2c       	mov	r8, r1
 398:	91 2c       	mov	r9, r1
            ret[i*4+j] = tmp; // Store the 2 leftmost bits in an array

            dataLength++; // Add one to the total data length

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 39a:	0f 2e       	mov	r0, r31
 39c:	ff ec       	ldi	r31, 0xCF	; 207
 39e:	cf 2e       	mov	r12, r31
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	df 2e       	mov	r13, r31
 3a4:	f0 2d       	mov	r31, r0
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 3a6:	30 c0       	rjmp	.+96     	; 0x408 <fillDataArray+0x110>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes
 3a8:	f2 01       	movw	r30, r4
 3aa:	31 90       	ld	r3, Z+
 3ac:	2f 01       	movw	r4, r30
 3ae:	57 01       	movw	r10, r14
 3b0:	f4 e0       	ldi	r31, 0x04	; 4
 3b2:	af 0e       	add	r10, r31
 3b4:	b1 1c       	adc	r11, r1
        for (j = 0; j < 4; j++)
        {
            uint8_t tmp = (ascii & 0b11000000) >> 6; // Select the 2 leftmost bits
            ascii = ascii << 2; // Shift the data left by 2

            ret[i*4+j] = tmp; // Store the 2 leftmost bits in an array
 3b6:	83 2d       	mov	r24, r3
 3b8:	82 95       	swap	r24
 3ba:	86 95       	lsr	r24
 3bc:	86 95       	lsr	r24
 3be:	83 70       	andi	r24, 0x03	; 3
 3c0:	f7 01       	movw	r30, r14
 3c2:	81 93       	st	Z+, r24
 3c4:	7f 01       	movw	r14, r30
 3c6:	33 0c       	add	r3, r3
 3c8:	33 0c       	add	r3, r3

            dataLength++; // Add one to the total data length
 3ca:	20 91 42 02 	lds	r18, 0x0242
 3ce:	30 91 43 02 	lds	r19, 0x0243
 3d2:	2f 5f       	subi	r18, 0xFF	; 255
 3d4:	3f 4f       	sbci	r19, 0xFF	; 255
 3d6:	30 93 43 02 	sts	0x0243, r19
 3da:	20 93 42 02 	sts	0x0242, r18

            #ifdef DEBUG // Debugging
            printf("%i", tmp);
 3de:	1f 92       	push	r1
 3e0:	8f 93       	push	r24
 3e2:	df 92       	push	r13
 3e4:	cf 92       	push	r12
 3e6:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    {
        uint8_t j;
        uint8_t ascii = (uint8_t)data[i]; // Take one of the data bytes

        // Loop through the bits 2 at a time
        for (j = 0; j < 4; j++)
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
 3f2:	ea 14       	cp	r14, r10
 3f4:	fb 04       	cpc	r15, r11
 3f6:	f9 f6       	brne	.-66     	; 0x3b6 <fillDataArray+0xbe>
            #ifdef DEBUG // Debugging
            printf("%i", tmp);
            #endif
        }
        #ifdef DEBUG // Debugging
        printf(" ");
 3f8:	80 e2       	ldi	r24, 0x20	; 32
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	0e 94 19 04 	call	0x832	; 0x832 <putchar>
    #ifdef DEBUG // Debugging
    printf("\nChecksum: %i\n", checksum);
    #endif // DEBUG

    // Loop through all the data
    for (i = 0; i < strlen(data); i++)
 400:	ff ef       	ldi	r31, 0xFF	; 255
 402:	8f 1a       	sub	r8, r31
 404:	9f 0a       	sbc	r9, r31
 406:	75 01       	movw	r14, r10
 408:	f8 01       	movw	r30, r16
 40a:	01 90       	ld	r0, Z+
 40c:	00 20       	and	r0, r0
 40e:	e9 f7       	brne	.-6      	; 0x40a <fillDataArray+0x112>
 410:	31 97       	sbiw	r30, 0x01	; 1
 412:	e0 1b       	sub	r30, r16
 414:	f1 0b       	sbc	r31, r17
 416:	8e 16       	cp	r8, r30
 418:	9f 06       	cpc	r9, r31
 41a:	30 f2       	brcs	.-116    	; 0x3a8 <fillDataArray+0xb0>
 41c:	20 91 42 02 	lds	r18, 0x0242
 420:	30 91 43 02 	lds	r19, 0x0243
 424:	e1 e0       	ldi	r30, 0x01	; 1
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ec 0f       	add	r30, r28
 42a:	fd 1f       	adc	r31, r29
 42c:	e2 0f       	add	r30, r18
 42e:	f3 1f       	adc	r31, r19
 430:	a9 01       	movw	r20, r18
 432:	4c 5f       	subi	r20, 0xFC	; 252
 434:	5f 4f       	sbci	r21, 0xFF	; 255
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	8c 0f       	add	r24, r28
 43c:	9d 1f       	adc	r25, r29
 43e:	48 0f       	add	r20, r24
 440:	59 1f       	adc	r21, r25
    }

    // Loop 4 more times for the CRC byte
    for (i = 0; i < 4; i++)
    {
        int tmp = (checksum & 0b11000000) >> 6; // Select the 2 leftmost bits
 442:	c3 01       	movw	r24, r6
 444:	80 7c       	andi	r24, 0xC0	; 192
 446:	99 27       	eor	r25, r25
 448:	08 2e       	mov	r0, r24
 44a:	89 2f       	mov	r24, r25
 44c:	00 0c       	add	r0, r0
 44e:	88 1f       	adc	r24, r24
 450:	99 0b       	sbc	r25, r25
 452:	00 0c       	add	r0, r0
 454:	88 1f       	adc	r24, r24
 456:	99 1f       	adc	r25, r25
        checksum = checksum << 2; // Shift the checksum left by 2
 458:	66 0c       	add	r6, r6
 45a:	77 1c       	adc	r7, r7
 45c:	66 0c       	add	r6, r6
 45e:	77 1c       	adc	r7, r7

        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
 460:	81 93       	st	Z+, r24
        printf(" ");
        #endif
    }

    // Loop 4 more times for the CRC byte
    for (i = 0; i < 4; i++)
 462:	e4 17       	cp	r30, r20
 464:	f5 07       	cpc	r31, r21
 466:	69 f7       	brne	.-38     	; 0x442 <fillDataArray+0x14a>
 468:	c9 01       	movw	r24, r18
 46a:	04 96       	adiw	r24, 0x04	; 4
 46c:	90 93 43 02 	sts	0x0243, r25
 470:	80 93 42 02 	sts	0x0242, r24
        ret[dataLength] = tmp; // Store the 2 leftmost bits in an array
        dataLength++; // Add one to the total data length
    }

    #ifdef DEBUG // Debugging
    printf("\ndataLength: %i\n", dataLength);
 474:	9f 93       	push	r25
 476:	8f 93       	push	r24
 478:	8f ea       	ldi	r24, 0xAF	; 175
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	9f 93       	push	r25
 47e:	8f 93       	push	r24
 480:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    #endif // DEBUG

    return ret;
 484:	0f 90       	pop	r0
 486:	0f 90       	pop	r0
 488:	0f 90       	pop	r0
 48a:	0f 90       	pop	r0
}
 48c:	ce 01       	movw	r24, r28
 48e:	01 96       	adiw	r24, 0x01	; 1
 490:	cc 50       	subi	r28, 0x0C	; 12
 492:	de 4f       	sbci	r29, 0xFE	; 254
 494:	0f b6       	in	r0, 0x3f	; 63
 496:	f8 94       	cli
 498:	de bf       	out	0x3e, r29	; 62
 49a:	0f be       	out	0x3f, r0	; 63
 49c:	cd bf       	out	0x3d, r28	; 61
 49e:	df 91       	pop	r29
 4a0:	cf 91       	pop	r28
 4a2:	1f 91       	pop	r17
 4a4:	0f 91       	pop	r16
 4a6:	ff 90       	pop	r15
 4a8:	ef 90       	pop	r14
 4aa:	df 90       	pop	r13
 4ac:	cf 90       	pop	r12
 4ae:	bf 90       	pop	r11
 4b0:	af 90       	pop	r10
 4b2:	9f 90       	pop	r9
 4b4:	8f 90       	pop	r8
 4b6:	7f 90       	pop	r7
 4b8:	6f 90       	pop	r6
 4ba:	5f 90       	pop	r5
 4bc:	4f 90       	pop	r4
 4be:	3f 90       	pop	r3
 4c0:	08 95       	ret

000004c2 <convertToData>:
 * @param length The length of the array
 *
 * @return The readable data
*/
char* convertToData(uint8_t bits[400], int length)
{
 4c2:	2f 92       	push	r2
 4c4:	3f 92       	push	r3
 4c6:	4f 92       	push	r4
 4c8:	5f 92       	push	r5
 4ca:	6f 92       	push	r6
 4cc:	7f 92       	push	r7
 4ce:	8f 92       	push	r8
 4d0:	9f 92       	push	r9
 4d2:	af 92       	push	r10
 4d4:	bf 92       	push	r11
 4d6:	cf 92       	push	r12
 4d8:	df 92       	push	r13
 4da:	ef 92       	push	r14
 4dc:	ff 92       	push	r15
 4de:	0f 93       	push	r16
 4e0:	1f 93       	push	r17
 4e2:	cf 93       	push	r28
 4e4:	df 93       	push	r29
 4e6:	cd b7       	in	r28, 0x3d	; 61
 4e8:	de b7       	in	r29, 0x3e	; 62
 4ea:	c8 5c       	subi	r28, 0xC8	; 200
 4ec:	d1 09       	sbc	r29, r1
 4ee:	0f b6       	in	r0, 0x3f	; 63
 4f0:	f8 94       	cli
 4f2:	de bf       	out	0x3e, r29	; 62
 4f4:	0f be       	out	0x3f, r0	; 63
 4f6:	cd bf       	out	0x3d, r28	; 61
 4f8:	08 2f       	mov	r16, r24
 4fa:	19 2f       	mov	r17, r25
 4fc:	4b 01       	movw	r8, r22
    // Reset some stuff and initialize some variables
    int i;
    int total = 0;
    char ret[100] = ""; // The return value
 4fe:	19 82       	std	Y+1, r1	; 0x01
 500:	1a 82       	std	Y+2, r1	; 0x02
 502:	1b 82       	std	Y+3, r1	; 0x03
 504:	1c 82       	std	Y+4, r1	; 0x04
 506:	fe 01       	movw	r30, r28
 508:	35 96       	adiw	r30, 0x05	; 5
 50a:	20 e6       	ldi	r18, 0x60	; 96
 50c:	df 01       	movw	r26, r30
 50e:	1d 92       	st	X+, r1
 510:	2a 95       	dec	r18
 512:	e9 f7       	brne	.-6      	; 0x50e <convertToData+0x4c>
    char tmp = 0b00000000; // Create a temp char with no data
    uint8_t ascii[100]; // The int representation of the data

    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
 514:	9f 92       	push	r9
 516:	6f 93       	push	r22
 518:	20 ec       	ldi	r18, 0xC0	; 192
 51a:	31 e0       	ldi	r19, 0x01	; 1
 51c:	3f 93       	push	r19
 51e:	2f 93       	push	r18
 520:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	18 14       	cp	r1, r8
 52e:	19 04       	cpc	r1, r9
 530:	0c f0       	brlt	.+2      	; 0x534 <convertToData+0x72>
 532:	53 c0       	rjmp	.+166    	; 0x5da <convertToData+0x118>
 534:	e0 2e       	mov	r14, r16
 536:	f1 2e       	mov	r15, r17
 538:	31 2c       	mov	r3, r1
 53a:	61 2c       	mov	r6, r1
 53c:	71 2c       	mov	r7, r1
 53e:	00 e0       	ldi	r16, 0x00	; 0
 540:	10 e0       	ldi	r17, 0x00	; 0
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 542:	0f 2e       	mov	r0, r31
 544:	fc ec       	ldi	r31, 0xCC	; 204
 546:	af 2e       	mov	r10, r31
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	bf 2e       	mov	r11, r31
 54c:	f0 2d       	mov	r31, r0
        #endif

        tmp = tmp << 2 | bits[i]; // Add the bits to the right of the previous ones

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", bits[i], (uint8_t)tmp);
 54e:	0f 2e       	mov	r0, r31
 550:	f2 ed       	ldi	r31, 0xD2	; 210
 552:	cf 2e       	mov	r12, r31
 554:	f1 e0       	ldi	r31, 0x01	; 1
 556:	df 2e       	mov	r13, r31
 558:	f0 2d       	mov	r31, r0

        // If this is dividable by 4
        if ((i + 1) % 4 == 0)
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\n", tmp);
 55a:	0f 2e       	mov	r0, r31
 55c:	f1 ee       	ldi	r31, 0xE1	; 225
 55e:	4f 2e       	mov	r4, r31
 560:	f1 e0       	ldi	r31, 0x01	; 1
 562:	5f 2e       	mov	r5, r31
 564:	f0 2d       	mov	r31, r0
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
            total++; // Add one to the total
            tmp = 0b00000000; // Reset the temp value
 566:	21 2c       	mov	r2, r1

    // Loop through all the bits
    for (i = 0; i < length; i++)
    {
        #ifdef DEBUG // Debugging
        printf("\ni:%i", i);
 568:	1f 93       	push	r17
 56a:	0f 93       	push	r16
 56c:	bf 92       	push	r11
 56e:	af 92       	push	r10
 570:	0e 94 03 04 	call	0x806	; 0x806 <printf>
        #endif

        tmp = tmp << 2 | bits[i]; // Add the bits to the right of the previous ones
 574:	f7 01       	movw	r30, r14
 576:	81 91       	ld	r24, Z+
 578:	7f 01       	movw	r14, r30
 57a:	33 0c       	add	r3, r3
 57c:	33 0c       	add	r3, r3
 57e:	38 2a       	or	r3, r24

        #ifdef DEBUG // Debugging
        printf(" bits%i tmp%i,", bits[i], (uint8_t)tmp);
 580:	1f 92       	push	r1
 582:	3f 92       	push	r3
 584:	1f 92       	push	r1
 586:	8f 93       	push	r24
 588:	df 92       	push	r13
 58a:	cf 92       	push	r12
 58c:	0e 94 03 04 	call	0x806	; 0x806 <printf>
        #endif

        // If this is dividable by 4
        if ((i + 1) % 4 == 0)
 590:	0f 5f       	subi	r16, 0xFF	; 255
 592:	1f 4f       	sbci	r17, 0xFF	; 255
 594:	c8 01       	movw	r24, r16
 596:	83 70       	andi	r24, 0x03	; 3
 598:	99 27       	eor	r25, r25
 59a:	0f b6       	in	r0, 0x3f	; 63
 59c:	f8 94       	cli
 59e:	de bf       	out	0x3e, r29	; 62
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	cd bf       	out	0x3d, r28	; 61
 5a4:	89 2b       	or	r24, r25
 5a6:	a9 f4       	brne	.+42     	; 0x5d2 <convertToData+0x110>
        {
            #ifdef DEBUG // Debugging
            printf("\nchar %c\n", tmp);
 5a8:	1f 92       	push	r1
 5aa:	3f 92       	push	r3
 5ac:	5f 92       	push	r5
 5ae:	4f 92       	push	r4
 5b0:	0e 94 03 04 	call	0x806	; 0x806 <printf>
            #endif // DEBUG

            ret[total] = tmp; // Store the temp value in the return value
 5b4:	e1 e0       	ldi	r30, 0x01	; 1
 5b6:	f0 e0       	ldi	r31, 0x00	; 0
 5b8:	ec 0f       	add	r30, r28
 5ba:	fd 1f       	adc	r31, r29
 5bc:	e6 0d       	add	r30, r6
 5be:	f7 1d       	adc	r31, r7
 5c0:	30 82       	st	Z, r3
            total++; // Add one to the total
 5c2:	3f ef       	ldi	r19, 0xFF	; 255
 5c4:	63 1a       	sub	r6, r19
 5c6:	73 0a       	sbc	r7, r19
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	0f 90       	pop	r0
            tmp = 0b00000000; // Reset the temp value
 5d0:	32 2c       	mov	r3, r2
    #ifdef DEBUG // Debugging
    printf("length: %i\n", length);
    #endif // DEBUG

    // Loop through all the bits
    for (i = 0; i < length; i++)
 5d2:	08 15       	cp	r16, r8
 5d4:	19 05       	cpc	r17, r9
 5d6:	41 f6       	brne	.-112    	; 0x568 <convertToData+0xa6>
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <convertToData+0x11c>
*/
char* convertToData(uint8_t bits[400], int length)
{
    // Reset some stuff and initialize some variables
    int i;
    int total = 0;
 5da:	61 2c       	mov	r6, r1
 5dc:	71 2c       	mov	r7, r1
 5de:	ae 01       	movw	r20, r28
 5e0:	4f 5f       	subi	r20, 0xFF	; 255
 5e2:	5f 4f       	sbci	r21, 0xFF	; 255
 5e4:	9e 01       	movw	r18, r28
 5e6:	2b 59       	subi	r18, 0x9B	; 155
 5e8:	3f 4f       	sbci	r19, 0xFF	; 255
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	90 e0       	ldi	r25, 0x00	; 0
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 5ee:	da 01       	movw	r26, r20
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <convertToData+0x13e>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
 5f2:	fa 01       	movw	r30, r20
 5f4:	61 91       	ld	r22, Z+
 5f6:	af 01       	movw	r20, r30
 5f8:	f9 01       	movw	r30, r18
 5fa:	61 93       	st	Z+, r22
 5fc:	9f 01       	movw	r18, r30
            tmp = 0b00000000; // Reset the temp value
        }
    }

    // Loop through all the chars
    for (i = 0; i < strlen(ret); i++)
 5fe:	01 96       	adiw	r24, 0x01	; 1
 600:	fd 01       	movw	r30, r26
 602:	01 90       	ld	r0, Z+
 604:	00 20       	and	r0, r0
 606:	e9 f7       	brne	.-6      	; 0x602 <convertToData+0x140>
 608:	31 97       	sbiw	r30, 0x01	; 1
 60a:	bf 01       	movw	r22, r30
 60c:	6a 1b       	sub	r22, r26
 60e:	7b 0b       	sbc	r23, r27
 610:	86 17       	cp	r24, r22
 612:	97 07       	cpc	r25, r23
 614:	70 f3       	brcs	.-36     	; 0x5f2 <convertToData+0x130>
    {
        ascii[i] = (uint8_t)ret[i]; // Convert them to ints
    }

    int checksum = CRC(ascii, strlen(ret), POLY, true); // Do the checksum
 616:	21 e0       	ldi	r18, 0x01	; 1
 618:	47 e6       	ldi	r20, 0x67	; 103
 61a:	51 e0       	ldi	r21, 0x01	; 1
 61c:	ce 01       	movw	r24, r28
 61e:	8b 59       	subi	r24, 0x9B	; 155
 620:	9f 4f       	sbci	r25, 0xFF	; 255
 622:	0e 94 53 00 	call	0xa6	; 0xa6 <CRC>
 626:	8c 01       	movw	r16, r24

    ret[total - 1] = 0b00000000; // Set the last byte to 0 (this is the checksum)
 628:	fe 01       	movw	r30, r28
 62a:	e6 0d       	add	r30, r6
 62c:	f7 1d       	adc	r31, r7
 62e:	10 82       	st	Z, r1

    #ifdef DEBUG // Debugging
    printf("\n\nChecksum: %i\n\n", checksum);
 630:	1f 93       	push	r17
 632:	8f 93       	push	r24
 634:	8b ee       	ldi	r24, 0xEB	; 235
 636:	91 e0       	ldi	r25, 0x01	; 1
 638:	9f 93       	push	r25
 63a:	8f 93       	push	r24
 63c:	0e 94 03 04 	call	0x806	; 0x806 <printf>
    #endif // DEBUG

    if (checksum == 0)
 640:	0f 90       	pop	r0
 642:	0f 90       	pop	r0
 644:	0f 90       	pop	r0
 646:	0f 90       	pop	r0
 648:	01 2b       	or	r16, r17
 64a:	29 f4       	brne	.+10     	; 0x656 <convertToData+0x194>
    {
        #ifdef DEBUG // Debugging
        printf("No errors.\n");
 64c:	8c ef       	ldi	r24, 0xFC	; 252
 64e:	91 e0       	ldi	r25, 0x01	; 1
 650:	0e 94 20 04 	call	0x840	; 0x840 <puts>
 654:	06 c0       	rjmp	.+12     	; 0x662 <convertToData+0x1a0>
        #endif // DEBUG
    }
    else
    {
        ret[0] = -1;
 656:	8f ef       	ldi	r24, 0xFF	; 255
 658:	89 83       	std	Y+1, r24	; 0x01
        #ifdef DEBUG // Debugging
        printf("Error detected.\n");
 65a:	87 e0       	ldi	r24, 0x07	; 7
 65c:	92 e0       	ldi	r25, 0x02	; 2
 65e:	0e 94 20 04 	call	0x840	; 0x840 <puts>
        #endif // DEBUG
    }

    return ret;
}
 662:	ce 01       	movw	r24, r28
 664:	01 96       	adiw	r24, 0x01	; 1
 666:	c8 53       	subi	r28, 0x38	; 56
 668:	df 4f       	sbci	r29, 0xFF	; 255
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	f8 94       	cli
 66e:	de bf       	out	0x3e, r29	; 62
 670:	0f be       	out	0x3f, r0	; 63
 672:	cd bf       	out	0x3d, r28	; 61
 674:	df 91       	pop	r29
 676:	cf 91       	pop	r28
 678:	1f 91       	pop	r17
 67a:	0f 91       	pop	r16
 67c:	ff 90       	pop	r15
 67e:	ef 90       	pop	r14
 680:	df 90       	pop	r13
 682:	cf 90       	pop	r12
 684:	bf 90       	pop	r11
 686:	af 90       	pop	r10
 688:	9f 90       	pop	r9
 68a:	8f 90       	pop	r8
 68c:	7f 90       	pop	r7
 68e:	6f 90       	pop	r6
 690:	5f 90       	pop	r5
 692:	4f 90       	pop	r4
 694:	3f 90       	pop	r3
 696:	2f 90       	pop	r2
 698:	08 95       	ret

0000069a <main>:
FILE usart0_output = FDEV_SETUP_STREAM(USART0SendByte, NULL, _FDEV_SETUP_WRITE);
FILE usart0_input = FDEV_SETUP_STREAM(NULL, USART0GetByte, _FDEV_SETUP_READ);
FILE usart0_io = FDEV_SETUP_STREAM(USART0SendByte, USART0GetByte, _FDEV_SETUP_RW);

int main(void)
{
 69a:	cf 93       	push	r28
 69c:	df 93       	push	r29
 69e:	cd b7       	in	r28, 0x3d	; 61
 6a0:	de b7       	in	r29, 0x3e	; 62
 6a2:	c4 56       	subi	r28, 0x64	; 100
 6a4:	d1 09       	sbc	r29, r1
 6a6:	0f b6       	in	r0, 0x3f	; 63
 6a8:	f8 94       	cli
 6aa:	de bf       	out	0x3e, r29	; 62
 6ac:	0f be       	out	0x3f, r0	; 63
 6ae:	cd bf       	out	0x3d, r28	; 61
	USART0Init();
 6b0:	0e 94 95 03 	call	0x72a	; 0x72a <USART0Init>
	stdout =& usart0_output;
 6b4:	e6 e4       	ldi	r30, 0x46	; 70
 6b6:	f2 e0       	ldi	r31, 0x02	; 2
 6b8:	8e e0       	ldi	r24, 0x0E	; 14
 6ba:	91 e0       	ldi	r25, 0x01	; 1
 6bc:	93 83       	std	Z+3, r25	; 0x03
 6be:	82 83       	std	Z+2, r24	; 0x02
	stdin =& usart0_input;
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	91 83       	std	Z+1, r25	; 0x01
 6c6:	80 83       	st	Z, r24

	i2c_init();
 6c8:	0e 94 91 03 	call	0x722	; 0x722 <i2c_init>

	char tmp;
	char input[100] = "test";
 6cc:	85 e0       	ldi	r24, 0x05	; 5
 6ce:	ec e1       	ldi	r30, 0x1C	; 28
 6d0:	f1 e0       	ldi	r31, 0x01	; 1
 6d2:	de 01       	movw	r26, r28
 6d4:	11 96       	adiw	r26, 0x01	; 1
 6d6:	01 90       	ld	r0, Z+
 6d8:	0d 92       	st	X+, r0
 6da:	8a 95       	dec	r24
 6dc:	e1 f7       	brne	.-8      	; 0x6d6 <main+0x3c>
 6de:	fe 01       	movw	r30, r28
 6e0:	36 96       	adiw	r30, 0x06	; 6
 6e2:	8f e5       	ldi	r24, 0x5F	; 95
 6e4:	df 01       	movw	r26, r30
 6e6:	1d 92       	st	X+, r1
 6e8:	8a 95       	dec	r24
 6ea:	e9 f7       	brne	.-6      	; 0x6e6 <main+0x4c>
		scanf("%c", &tmp);
		input[i++] = tmp;
		printf("%s\n", input);
	}*/

	int* dataToSend = fillDataArray(input);
 6ec:	ce 01       	movw	r24, r28
 6ee:	01 96       	adiw	r24, 0x01	; 1
 6f0:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <fillDataArray>
	char* received = convertToData(dataToSend, dataLength);
 6f4:	60 91 42 02 	lds	r22, 0x0242
 6f8:	70 91 43 02 	lds	r23, 0x0243
 6fc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <convertToData>

	printf("\nReceived data: %s\n\n", received);
 700:	9f 93       	push	r25
 702:	8f 93       	push	r24
 704:	87 e1       	ldi	r24, 0x17	; 23
 706:	92 e0       	ldi	r25, 0x02	; 2
 708:	9f 93       	push	r25
 70a:	8f 93       	push	r24
 70c:	0e 94 03 04 	call	0x806	; 0x806 <printf>

	printf("Entering loop now....\n");
 710:	8c e2       	ldi	r24, 0x2C	; 44
 712:	92 e0       	ldi	r25, 0x02	; 2
 714:	0e 94 20 04 	call	0x840	; 0x840 <puts>
 718:	0f 90       	pop	r0
 71a:	0f 90       	pop	r0
 71c:	0f 90       	pop	r0
 71e:	0f 90       	pop	r0
    while (1) 
    {
		//printf("Send debug data to PC\n");
		/*scanf("%c", &input);
		printf("You wrote: %c\n", input);*/
    }
 720:	ff cf       	rjmp	.-2      	; 0x720 <main+0x86>

00000722 <i2c_init>:

#include "i2c.h"

void i2c_init(void)
{
	TWBR = (uint8_t)TWBR_val;
 722:	88 e4       	ldi	r24, 0x48	; 72
 724:	80 93 b8 00 	sts	0x00B8, r24
 728:	08 95       	ret

0000072a <USART0Init>:

#include "USART.h"

void USART0Init()
{
	receiveDone = 0;
 72a:	10 92 45 02 	sts	0x0245, r1
 72e:	10 92 44 02 	sts	0x0244, r1

	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_BAUDRATE >> 8);
 732:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_BAUDRATE;
 736:	87 e6       	ldi	r24, 0x67	; 103
 738:	80 93 c4 00 	sts	0x00C4, r24

	// Enable transmission and receiving
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0);
 73c:	e1 ec       	ldi	r30, 0xC1	; 193
 73e:	f0 e0       	ldi	r31, 0x00	; 0
 740:	80 81       	ld	r24, Z
 742:	88 61       	ori	r24, 0x18	; 24
 744:	80 83       	st	Z, r24

	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
 746:	e2 ec       	ldi	r30, 0xC2	; 194
 748:	f0 e0       	ldi	r31, 0x00	; 0
 74a:	80 81       	ld	r24, Z
 74c:	86 60       	ori	r24, 0x06	; 6
 74e:	80 83       	st	Z, r24
 750:	08 95       	ret

00000752 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
 752:	cf 93       	push	r28
 754:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
 756:	8a 30       	cpi	r24, 0x0A	; 10
 758:	19 f4       	brne	.+6      	; 0x760 <USART0SendByte+0xe>
 75a:	8d e0       	ldi	r24, 0x0D	; 13
 75c:	0e 94 a9 03 	call	0x752	; 0x752 <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 760:	e0 ec       	ldi	r30, 0xC0	; 192
 762:	f0 e0       	ldi	r31, 0x00	; 0
 764:	90 81       	ld	r25, Z
 766:	95 ff       	sbrs	r25, 5
 768:	fd cf       	rjmp	.-6      	; 0x764 <USART0SendByte+0x12>

	// Transmit data
	UDR0 = u8Data;
 76a:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
}
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	90 e0       	ldi	r25, 0x00	; 0
 772:	cf 91       	pop	r28
 774:	08 95       	ret

00000776 <USART0GetByte>:

char USART0GetByte(FILE *stream)
{
	while (!(UCSR0A & (1 << RXC0)));
 776:	e0 ec       	ldi	r30, 0xC0	; 192
 778:	f0 e0       	ldi	r31, 0x00	; 0
 77a:	80 81       	ld	r24, Z
 77c:	88 23       	and	r24, r24
 77e:	ec f7       	brge	.-6      	; 0x77a <USART0GetByte+0x4>
	
	return UDR0;
 780:	80 91 c6 00 	lds	r24, 0x00C6
 784:	08 95       	ret

00000786 <__ashldi3>:
 786:	0f 93       	push	r16
 788:	08 30       	cpi	r16, 0x08	; 8
 78a:	90 f0       	brcs	.+36     	; 0x7b0 <__ashldi3+0x2a>
 78c:	98 2f       	mov	r25, r24
 78e:	87 2f       	mov	r24, r23
 790:	76 2f       	mov	r23, r22
 792:	65 2f       	mov	r22, r21
 794:	54 2f       	mov	r21, r20
 796:	43 2f       	mov	r20, r19
 798:	32 2f       	mov	r19, r18
 79a:	22 27       	eor	r18, r18
 79c:	08 50       	subi	r16, 0x08	; 8
 79e:	f4 cf       	rjmp	.-24     	; 0x788 <__ashldi3+0x2>
 7a0:	22 0f       	add	r18, r18
 7a2:	33 1f       	adc	r19, r19
 7a4:	44 1f       	adc	r20, r20
 7a6:	55 1f       	adc	r21, r21
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	88 1f       	adc	r24, r24
 7ae:	99 1f       	adc	r25, r25
 7b0:	0a 95       	dec	r16
 7b2:	b2 f7       	brpl	.-20     	; 0x7a0 <__ashldi3+0x1a>
 7b4:	0f 91       	pop	r16
 7b6:	08 95       	ret

000007b8 <__ashrdi3>:
 7b8:	97 fb       	bst	r25, 7
 7ba:	10 f8       	bld	r1, 0

000007bc <__lshrdi3>:
 7bc:	16 94       	lsr	r1
 7be:	00 08       	sbc	r0, r0
 7c0:	0f 93       	push	r16
 7c2:	08 30       	cpi	r16, 0x08	; 8
 7c4:	98 f0       	brcs	.+38     	; 0x7ec <__lshrdi3+0x30>
 7c6:	08 50       	subi	r16, 0x08	; 8
 7c8:	23 2f       	mov	r18, r19
 7ca:	34 2f       	mov	r19, r20
 7cc:	45 2f       	mov	r20, r21
 7ce:	56 2f       	mov	r21, r22
 7d0:	67 2f       	mov	r22, r23
 7d2:	78 2f       	mov	r23, r24
 7d4:	89 2f       	mov	r24, r25
 7d6:	90 2d       	mov	r25, r0
 7d8:	f4 cf       	rjmp	.-24     	; 0x7c2 <__lshrdi3+0x6>
 7da:	05 94       	asr	r0
 7dc:	97 95       	ror	r25
 7de:	87 95       	ror	r24
 7e0:	77 95       	ror	r23
 7e2:	67 95       	ror	r22
 7e4:	57 95       	ror	r21
 7e6:	47 95       	ror	r20
 7e8:	37 95       	ror	r19
 7ea:	27 95       	ror	r18
 7ec:	0a 95       	dec	r16
 7ee:	aa f7       	brpl	.-22     	; 0x7da <__lshrdi3+0x1e>
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

000007f4 <__cmpdi2>:
 7f4:	2a 15       	cp	r18, r10
 7f6:	3b 05       	cpc	r19, r11
 7f8:	4c 05       	cpc	r20, r12
 7fa:	5d 05       	cpc	r21, r13
 7fc:	6e 05       	cpc	r22, r14
 7fe:	7f 05       	cpc	r23, r15
 800:	80 07       	cpc	r24, r16
 802:	91 07       	cpc	r25, r17
 804:	08 95       	ret

00000806 <printf>:
 806:	a0 e0       	ldi	r26, 0x00	; 0
 808:	b0 e0       	ldi	r27, 0x00	; 0
 80a:	e9 e0       	ldi	r30, 0x09	; 9
 80c:	f4 e0       	ldi	r31, 0x04	; 4
 80e:	0c 94 de 06 	jmp	0xdbc	; 0xdbc <__prologue_saves__+0x20>
 812:	ae 01       	movw	r20, r28
 814:	4b 5f       	subi	r20, 0xFB	; 251
 816:	5f 4f       	sbci	r21, 0xFF	; 255
 818:	fa 01       	movw	r30, r20
 81a:	61 91       	ld	r22, Z+
 81c:	71 91       	ld	r23, Z+
 81e:	af 01       	movw	r20, r30
 820:	80 91 48 02 	lds	r24, 0x0248
 824:	90 91 49 02 	lds	r25, 0x0249
 828:	0e 94 50 04 	call	0x8a0	; 0x8a0 <vfprintf>
 82c:	e2 e0       	ldi	r30, 0x02	; 2
 82e:	0c 94 fa 06 	jmp	0xdf4	; 0xdf4 <__epilogue_restores__+0x20>

00000832 <putchar>:
 832:	60 91 48 02 	lds	r22, 0x0248
 836:	70 91 49 02 	lds	r23, 0x0249
 83a:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 83e:	08 95       	ret

00000840 <puts>:
 840:	0f 93       	push	r16
 842:	1f 93       	push	r17
 844:	cf 93       	push	r28
 846:	df 93       	push	r29
 848:	e0 91 48 02 	lds	r30, 0x0248
 84c:	f0 91 49 02 	lds	r31, 0x0249
 850:	23 81       	ldd	r18, Z+3	; 0x03
 852:	21 ff       	sbrs	r18, 1
 854:	1b c0       	rjmp	.+54     	; 0x88c <puts+0x4c>
 856:	8c 01       	movw	r16, r24
 858:	d0 e0       	ldi	r29, 0x00	; 0
 85a:	c0 e0       	ldi	r28, 0x00	; 0
 85c:	f8 01       	movw	r30, r16
 85e:	81 91       	ld	r24, Z+
 860:	8f 01       	movw	r16, r30
 862:	60 91 48 02 	lds	r22, 0x0248
 866:	70 91 49 02 	lds	r23, 0x0249
 86a:	db 01       	movw	r26, r22
 86c:	18 96       	adiw	r26, 0x08	; 8
 86e:	ed 91       	ld	r30, X+
 870:	fc 91       	ld	r31, X
 872:	19 97       	sbiw	r26, 0x09	; 9
 874:	88 23       	and	r24, r24
 876:	31 f0       	breq	.+12     	; 0x884 <puts+0x44>
 878:	09 95       	icall
 87a:	89 2b       	or	r24, r25
 87c:	79 f3       	breq	.-34     	; 0x85c <puts+0x1c>
 87e:	df ef       	ldi	r29, 0xFF	; 255
 880:	cf ef       	ldi	r28, 0xFF	; 255
 882:	ec cf       	rjmp	.-40     	; 0x85c <puts+0x1c>
 884:	8a e0       	ldi	r24, 0x0A	; 10
 886:	09 95       	icall
 888:	89 2b       	or	r24, r25
 88a:	19 f0       	breq	.+6      	; 0x892 <puts+0x52>
 88c:	8f ef       	ldi	r24, 0xFF	; 255
 88e:	9f ef       	ldi	r25, 0xFF	; 255
 890:	02 c0       	rjmp	.+4      	; 0x896 <puts+0x56>
 892:	8d 2f       	mov	r24, r29
 894:	9c 2f       	mov	r25, r28
 896:	df 91       	pop	r29
 898:	cf 91       	pop	r28
 89a:	1f 91       	pop	r17
 89c:	0f 91       	pop	r16
 89e:	08 95       	ret

000008a0 <vfprintf>:
 8a0:	ac e0       	ldi	r26, 0x0C	; 12
 8a2:	b0 e0       	ldi	r27, 0x00	; 0
 8a4:	e6 e5       	ldi	r30, 0x56	; 86
 8a6:	f4 e0       	ldi	r31, 0x04	; 4
 8a8:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__prologue_saves__>
 8ac:	7c 01       	movw	r14, r24
 8ae:	6b 01       	movw	r12, r22
 8b0:	8a 01       	movw	r16, r20
 8b2:	fc 01       	movw	r30, r24
 8b4:	17 82       	std	Z+7, r1	; 0x07
 8b6:	16 82       	std	Z+6, r1	; 0x06
 8b8:	83 81       	ldd	r24, Z+3	; 0x03
 8ba:	81 ff       	sbrs	r24, 1
 8bc:	bd c1       	rjmp	.+890    	; 0xc38 <__stack+0x339>
 8be:	ce 01       	movw	r24, r28
 8c0:	01 96       	adiw	r24, 0x01	; 1
 8c2:	4c 01       	movw	r8, r24
 8c4:	f7 01       	movw	r30, r14
 8c6:	93 81       	ldd	r25, Z+3	; 0x03
 8c8:	f6 01       	movw	r30, r12
 8ca:	93 fd       	sbrc	r25, 3
 8cc:	85 91       	lpm	r24, Z+
 8ce:	93 ff       	sbrs	r25, 3
 8d0:	81 91       	ld	r24, Z+
 8d2:	6f 01       	movw	r12, r30
 8d4:	88 23       	and	r24, r24
 8d6:	09 f4       	brne	.+2      	; 0x8da <vfprintf+0x3a>
 8d8:	ab c1       	rjmp	.+854    	; 0xc30 <__stack+0x331>
 8da:	85 32       	cpi	r24, 0x25	; 37
 8dc:	39 f4       	brne	.+14     	; 0x8ec <vfprintf+0x4c>
 8de:	93 fd       	sbrc	r25, 3
 8e0:	85 91       	lpm	r24, Z+
 8e2:	93 ff       	sbrs	r25, 3
 8e4:	81 91       	ld	r24, Z+
 8e6:	6f 01       	movw	r12, r30
 8e8:	85 32       	cpi	r24, 0x25	; 37
 8ea:	29 f4       	brne	.+10     	; 0x8f6 <vfprintf+0x56>
 8ec:	b7 01       	movw	r22, r14
 8ee:	90 e0       	ldi	r25, 0x00	; 0
 8f0:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 8f4:	e7 cf       	rjmp	.-50     	; 0x8c4 <vfprintf+0x24>
 8f6:	51 2c       	mov	r5, r1
 8f8:	31 2c       	mov	r3, r1
 8fa:	20 e0       	ldi	r18, 0x00	; 0
 8fc:	20 32       	cpi	r18, 0x20	; 32
 8fe:	a0 f4       	brcc	.+40     	; 0x928 <__stack+0x29>
 900:	8b 32       	cpi	r24, 0x2B	; 43
 902:	69 f0       	breq	.+26     	; 0x91e <__stack+0x1f>
 904:	30 f4       	brcc	.+12     	; 0x912 <__stack+0x13>
 906:	80 32       	cpi	r24, 0x20	; 32
 908:	59 f0       	breq	.+22     	; 0x920 <__stack+0x21>
 90a:	83 32       	cpi	r24, 0x23	; 35
 90c:	69 f4       	brne	.+26     	; 0x928 <__stack+0x29>
 90e:	20 61       	ori	r18, 0x10	; 16
 910:	2c c0       	rjmp	.+88     	; 0x96a <__stack+0x6b>
 912:	8d 32       	cpi	r24, 0x2D	; 45
 914:	39 f0       	breq	.+14     	; 0x924 <__stack+0x25>
 916:	80 33       	cpi	r24, 0x30	; 48
 918:	39 f4       	brne	.+14     	; 0x928 <__stack+0x29>
 91a:	21 60       	ori	r18, 0x01	; 1
 91c:	26 c0       	rjmp	.+76     	; 0x96a <__stack+0x6b>
 91e:	22 60       	ori	r18, 0x02	; 2
 920:	24 60       	ori	r18, 0x04	; 4
 922:	23 c0       	rjmp	.+70     	; 0x96a <__stack+0x6b>
 924:	28 60       	ori	r18, 0x08	; 8
 926:	21 c0       	rjmp	.+66     	; 0x96a <__stack+0x6b>
 928:	27 fd       	sbrc	r18, 7
 92a:	27 c0       	rjmp	.+78     	; 0x97a <__stack+0x7b>
 92c:	30 ed       	ldi	r19, 0xD0	; 208
 92e:	38 0f       	add	r19, r24
 930:	3a 30       	cpi	r19, 0x0A	; 10
 932:	78 f4       	brcc	.+30     	; 0x952 <__stack+0x53>
 934:	26 ff       	sbrs	r18, 6
 936:	06 c0       	rjmp	.+12     	; 0x944 <__stack+0x45>
 938:	fa e0       	ldi	r31, 0x0A	; 10
 93a:	5f 9e       	mul	r5, r31
 93c:	30 0d       	add	r19, r0
 93e:	11 24       	eor	r1, r1
 940:	53 2e       	mov	r5, r19
 942:	13 c0       	rjmp	.+38     	; 0x96a <__stack+0x6b>
 944:	8a e0       	ldi	r24, 0x0A	; 10
 946:	38 9e       	mul	r3, r24
 948:	30 0d       	add	r19, r0
 94a:	11 24       	eor	r1, r1
 94c:	33 2e       	mov	r3, r19
 94e:	20 62       	ori	r18, 0x20	; 32
 950:	0c c0       	rjmp	.+24     	; 0x96a <__stack+0x6b>
 952:	8e 32       	cpi	r24, 0x2E	; 46
 954:	21 f4       	brne	.+8      	; 0x95e <__stack+0x5f>
 956:	26 fd       	sbrc	r18, 6
 958:	6b c1       	rjmp	.+726    	; 0xc30 <__stack+0x331>
 95a:	20 64       	ori	r18, 0x40	; 64
 95c:	06 c0       	rjmp	.+12     	; 0x96a <__stack+0x6b>
 95e:	8c 36       	cpi	r24, 0x6C	; 108
 960:	11 f4       	brne	.+4      	; 0x966 <__stack+0x67>
 962:	20 68       	ori	r18, 0x80	; 128
 964:	02 c0       	rjmp	.+4      	; 0x96a <__stack+0x6b>
 966:	88 36       	cpi	r24, 0x68	; 104
 968:	41 f4       	brne	.+16     	; 0x97a <__stack+0x7b>
 96a:	f6 01       	movw	r30, r12
 96c:	93 fd       	sbrc	r25, 3
 96e:	85 91       	lpm	r24, Z+
 970:	93 ff       	sbrs	r25, 3
 972:	81 91       	ld	r24, Z+
 974:	6f 01       	movw	r12, r30
 976:	81 11       	cpse	r24, r1
 978:	c1 cf       	rjmp	.-126    	; 0x8fc <vfprintf+0x5c>
 97a:	98 2f       	mov	r25, r24
 97c:	9f 7d       	andi	r25, 0xDF	; 223
 97e:	95 54       	subi	r25, 0x45	; 69
 980:	93 30       	cpi	r25, 0x03	; 3
 982:	28 f4       	brcc	.+10     	; 0x98e <__stack+0x8f>
 984:	0c 5f       	subi	r16, 0xFC	; 252
 986:	1f 4f       	sbci	r17, 0xFF	; 255
 988:	ff e3       	ldi	r31, 0x3F	; 63
 98a:	f9 83       	std	Y+1, r31	; 0x01
 98c:	0d c0       	rjmp	.+26     	; 0x9a8 <__stack+0xa9>
 98e:	83 36       	cpi	r24, 0x63	; 99
 990:	31 f0       	breq	.+12     	; 0x99e <__stack+0x9f>
 992:	83 37       	cpi	r24, 0x73	; 115
 994:	71 f0       	breq	.+28     	; 0x9b2 <__stack+0xb3>
 996:	83 35       	cpi	r24, 0x53	; 83
 998:	09 f0       	breq	.+2      	; 0x99c <__stack+0x9d>
 99a:	5b c0       	rjmp	.+182    	; 0xa52 <__stack+0x153>
 99c:	22 c0       	rjmp	.+68     	; 0x9e2 <__stack+0xe3>
 99e:	f8 01       	movw	r30, r16
 9a0:	80 81       	ld	r24, Z
 9a2:	89 83       	std	Y+1, r24	; 0x01
 9a4:	0e 5f       	subi	r16, 0xFE	; 254
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	44 24       	eor	r4, r4
 9aa:	43 94       	inc	r4
 9ac:	51 2c       	mov	r5, r1
 9ae:	54 01       	movw	r10, r8
 9b0:	15 c0       	rjmp	.+42     	; 0x9dc <__stack+0xdd>
 9b2:	38 01       	movw	r6, r16
 9b4:	f2 e0       	ldi	r31, 0x02	; 2
 9b6:	6f 0e       	add	r6, r31
 9b8:	71 1c       	adc	r7, r1
 9ba:	f8 01       	movw	r30, r16
 9bc:	a0 80       	ld	r10, Z
 9be:	b1 80       	ldd	r11, Z+1	; 0x01
 9c0:	26 ff       	sbrs	r18, 6
 9c2:	03 c0       	rjmp	.+6      	; 0x9ca <__stack+0xcb>
 9c4:	65 2d       	mov	r22, r5
 9c6:	70 e0       	ldi	r23, 0x00	; 0
 9c8:	02 c0       	rjmp	.+4      	; 0x9ce <__stack+0xcf>
 9ca:	6f ef       	ldi	r22, 0xFF	; 255
 9cc:	7f ef       	ldi	r23, 0xFF	; 255
 9ce:	c5 01       	movw	r24, r10
 9d0:	2c 87       	std	Y+12, r18	; 0x0c
 9d2:	0e 94 2d 06 	call	0xc5a	; 0xc5a <strnlen>
 9d6:	2c 01       	movw	r4, r24
 9d8:	83 01       	movw	r16, r6
 9da:	2c 85       	ldd	r18, Y+12	; 0x0c
 9dc:	2f 77       	andi	r18, 0x7F	; 127
 9de:	22 2e       	mov	r2, r18
 9e0:	17 c0       	rjmp	.+46     	; 0xa10 <__stack+0x111>
 9e2:	38 01       	movw	r6, r16
 9e4:	f2 e0       	ldi	r31, 0x02	; 2
 9e6:	6f 0e       	add	r6, r31
 9e8:	71 1c       	adc	r7, r1
 9ea:	f8 01       	movw	r30, r16
 9ec:	a0 80       	ld	r10, Z
 9ee:	b1 80       	ldd	r11, Z+1	; 0x01
 9f0:	26 ff       	sbrs	r18, 6
 9f2:	03 c0       	rjmp	.+6      	; 0x9fa <__stack+0xfb>
 9f4:	65 2d       	mov	r22, r5
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	02 c0       	rjmp	.+4      	; 0x9fe <__stack+0xff>
 9fa:	6f ef       	ldi	r22, 0xFF	; 255
 9fc:	7f ef       	ldi	r23, 0xFF	; 255
 9fe:	c5 01       	movw	r24, r10
 a00:	2c 87       	std	Y+12, r18	; 0x0c
 a02:	0e 94 22 06 	call	0xc44	; 0xc44 <strnlen_P>
 a06:	2c 01       	movw	r4, r24
 a08:	2c 85       	ldd	r18, Y+12	; 0x0c
 a0a:	20 68       	ori	r18, 0x80	; 128
 a0c:	22 2e       	mov	r2, r18
 a0e:	83 01       	movw	r16, r6
 a10:	23 fc       	sbrc	r2, 3
 a12:	1b c0       	rjmp	.+54     	; 0xa4a <__stack+0x14b>
 a14:	83 2d       	mov	r24, r3
 a16:	90 e0       	ldi	r25, 0x00	; 0
 a18:	48 16       	cp	r4, r24
 a1a:	59 06       	cpc	r5, r25
 a1c:	b0 f4       	brcc	.+44     	; 0xa4a <__stack+0x14b>
 a1e:	b7 01       	movw	r22, r14
 a20:	80 e2       	ldi	r24, 0x20	; 32
 a22:	90 e0       	ldi	r25, 0x00	; 0
 a24:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 a28:	3a 94       	dec	r3
 a2a:	f4 cf       	rjmp	.-24     	; 0xa14 <__stack+0x115>
 a2c:	f5 01       	movw	r30, r10
 a2e:	27 fc       	sbrc	r2, 7
 a30:	85 91       	lpm	r24, Z+
 a32:	27 fe       	sbrs	r2, 7
 a34:	81 91       	ld	r24, Z+
 a36:	5f 01       	movw	r10, r30
 a38:	b7 01       	movw	r22, r14
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 a40:	31 10       	cpse	r3, r1
 a42:	3a 94       	dec	r3
 a44:	f1 e0       	ldi	r31, 0x01	; 1
 a46:	4f 1a       	sub	r4, r31
 a48:	51 08       	sbc	r5, r1
 a4a:	41 14       	cp	r4, r1
 a4c:	51 04       	cpc	r5, r1
 a4e:	71 f7       	brne	.-36     	; 0xa2c <__stack+0x12d>
 a50:	e5 c0       	rjmp	.+458    	; 0xc1c <__stack+0x31d>
 a52:	84 36       	cpi	r24, 0x64	; 100
 a54:	11 f0       	breq	.+4      	; 0xa5a <__stack+0x15b>
 a56:	89 36       	cpi	r24, 0x69	; 105
 a58:	39 f5       	brne	.+78     	; 0xaa8 <__stack+0x1a9>
 a5a:	f8 01       	movw	r30, r16
 a5c:	27 ff       	sbrs	r18, 7
 a5e:	07 c0       	rjmp	.+14     	; 0xa6e <__stack+0x16f>
 a60:	60 81       	ld	r22, Z
 a62:	71 81       	ldd	r23, Z+1	; 0x01
 a64:	82 81       	ldd	r24, Z+2	; 0x02
 a66:	93 81       	ldd	r25, Z+3	; 0x03
 a68:	0c 5f       	subi	r16, 0xFC	; 252
 a6a:	1f 4f       	sbci	r17, 0xFF	; 255
 a6c:	08 c0       	rjmp	.+16     	; 0xa7e <__stack+0x17f>
 a6e:	60 81       	ld	r22, Z
 a70:	71 81       	ldd	r23, Z+1	; 0x01
 a72:	07 2e       	mov	r0, r23
 a74:	00 0c       	add	r0, r0
 a76:	88 0b       	sbc	r24, r24
 a78:	99 0b       	sbc	r25, r25
 a7a:	0e 5f       	subi	r16, 0xFE	; 254
 a7c:	1f 4f       	sbci	r17, 0xFF	; 255
 a7e:	2f 76       	andi	r18, 0x6F	; 111
 a80:	72 2e       	mov	r7, r18
 a82:	97 ff       	sbrs	r25, 7
 a84:	09 c0       	rjmp	.+18     	; 0xa98 <__stack+0x199>
 a86:	90 95       	com	r25
 a88:	80 95       	com	r24
 a8a:	70 95       	com	r23
 a8c:	61 95       	neg	r22
 a8e:	7f 4f       	sbci	r23, 0xFF	; 255
 a90:	8f 4f       	sbci	r24, 0xFF	; 255
 a92:	9f 4f       	sbci	r25, 0xFF	; 255
 a94:	20 68       	ori	r18, 0x80	; 128
 a96:	72 2e       	mov	r7, r18
 a98:	2a e0       	ldi	r18, 0x0A	; 10
 a9a:	30 e0       	ldi	r19, 0x00	; 0
 a9c:	a4 01       	movw	r20, r8
 a9e:	0e 94 70 06 	call	0xce0	; 0xce0 <__ultoa_invert>
 aa2:	a8 2e       	mov	r10, r24
 aa4:	a8 18       	sub	r10, r8
 aa6:	44 c0       	rjmp	.+136    	; 0xb30 <__stack+0x231>
 aa8:	85 37       	cpi	r24, 0x75	; 117
 aaa:	29 f4       	brne	.+10     	; 0xab6 <__stack+0x1b7>
 aac:	2f 7e       	andi	r18, 0xEF	; 239
 aae:	b2 2e       	mov	r11, r18
 ab0:	2a e0       	ldi	r18, 0x0A	; 10
 ab2:	30 e0       	ldi	r19, 0x00	; 0
 ab4:	25 c0       	rjmp	.+74     	; 0xb00 <__stack+0x201>
 ab6:	f2 2f       	mov	r31, r18
 ab8:	f9 7f       	andi	r31, 0xF9	; 249
 aba:	bf 2e       	mov	r11, r31
 abc:	8f 36       	cpi	r24, 0x6F	; 111
 abe:	c1 f0       	breq	.+48     	; 0xaf0 <__stack+0x1f1>
 ac0:	18 f4       	brcc	.+6      	; 0xac8 <__stack+0x1c9>
 ac2:	88 35       	cpi	r24, 0x58	; 88
 ac4:	79 f0       	breq	.+30     	; 0xae4 <__stack+0x1e5>
 ac6:	b4 c0       	rjmp	.+360    	; 0xc30 <__stack+0x331>
 ac8:	80 37       	cpi	r24, 0x70	; 112
 aca:	19 f0       	breq	.+6      	; 0xad2 <__stack+0x1d3>
 acc:	88 37       	cpi	r24, 0x78	; 120
 ace:	21 f0       	breq	.+8      	; 0xad8 <__stack+0x1d9>
 ad0:	af c0       	rjmp	.+350    	; 0xc30 <__stack+0x331>
 ad2:	2f 2f       	mov	r18, r31
 ad4:	20 61       	ori	r18, 0x10	; 16
 ad6:	b2 2e       	mov	r11, r18
 ad8:	b4 fe       	sbrs	r11, 4
 ada:	0d c0       	rjmp	.+26     	; 0xaf6 <__stack+0x1f7>
 adc:	8b 2d       	mov	r24, r11
 ade:	84 60       	ori	r24, 0x04	; 4
 ae0:	b8 2e       	mov	r11, r24
 ae2:	09 c0       	rjmp	.+18     	; 0xaf6 <__stack+0x1f7>
 ae4:	24 ff       	sbrs	r18, 4
 ae6:	0a c0       	rjmp	.+20     	; 0xafc <__stack+0x1fd>
 ae8:	9f 2f       	mov	r25, r31
 aea:	96 60       	ori	r25, 0x06	; 6
 aec:	b9 2e       	mov	r11, r25
 aee:	06 c0       	rjmp	.+12     	; 0xafc <__stack+0x1fd>
 af0:	28 e0       	ldi	r18, 0x08	; 8
 af2:	30 e0       	ldi	r19, 0x00	; 0
 af4:	05 c0       	rjmp	.+10     	; 0xb00 <__stack+0x201>
 af6:	20 e1       	ldi	r18, 0x10	; 16
 af8:	30 e0       	ldi	r19, 0x00	; 0
 afa:	02 c0       	rjmp	.+4      	; 0xb00 <__stack+0x201>
 afc:	20 e1       	ldi	r18, 0x10	; 16
 afe:	32 e0       	ldi	r19, 0x02	; 2
 b00:	f8 01       	movw	r30, r16
 b02:	b7 fe       	sbrs	r11, 7
 b04:	07 c0       	rjmp	.+14     	; 0xb14 <__stack+0x215>
 b06:	60 81       	ld	r22, Z
 b08:	71 81       	ldd	r23, Z+1	; 0x01
 b0a:	82 81       	ldd	r24, Z+2	; 0x02
 b0c:	93 81       	ldd	r25, Z+3	; 0x03
 b0e:	0c 5f       	subi	r16, 0xFC	; 252
 b10:	1f 4f       	sbci	r17, 0xFF	; 255
 b12:	06 c0       	rjmp	.+12     	; 0xb20 <__stack+0x221>
 b14:	60 81       	ld	r22, Z
 b16:	71 81       	ldd	r23, Z+1	; 0x01
 b18:	80 e0       	ldi	r24, 0x00	; 0
 b1a:	90 e0       	ldi	r25, 0x00	; 0
 b1c:	0e 5f       	subi	r16, 0xFE	; 254
 b1e:	1f 4f       	sbci	r17, 0xFF	; 255
 b20:	a4 01       	movw	r20, r8
 b22:	0e 94 70 06 	call	0xce0	; 0xce0 <__ultoa_invert>
 b26:	a8 2e       	mov	r10, r24
 b28:	a8 18       	sub	r10, r8
 b2a:	fb 2d       	mov	r31, r11
 b2c:	ff 77       	andi	r31, 0x7F	; 127
 b2e:	7f 2e       	mov	r7, r31
 b30:	76 fe       	sbrs	r7, 6
 b32:	0b c0       	rjmp	.+22     	; 0xb4a <__stack+0x24b>
 b34:	37 2d       	mov	r19, r7
 b36:	3e 7f       	andi	r19, 0xFE	; 254
 b38:	a5 14       	cp	r10, r5
 b3a:	50 f4       	brcc	.+20     	; 0xb50 <__stack+0x251>
 b3c:	74 fe       	sbrs	r7, 4
 b3e:	0a c0       	rjmp	.+20     	; 0xb54 <__stack+0x255>
 b40:	72 fc       	sbrc	r7, 2
 b42:	08 c0       	rjmp	.+16     	; 0xb54 <__stack+0x255>
 b44:	37 2d       	mov	r19, r7
 b46:	3e 7e       	andi	r19, 0xEE	; 238
 b48:	05 c0       	rjmp	.+10     	; 0xb54 <__stack+0x255>
 b4a:	ba 2c       	mov	r11, r10
 b4c:	37 2d       	mov	r19, r7
 b4e:	03 c0       	rjmp	.+6      	; 0xb56 <__stack+0x257>
 b50:	ba 2c       	mov	r11, r10
 b52:	01 c0       	rjmp	.+2      	; 0xb56 <__stack+0x257>
 b54:	b5 2c       	mov	r11, r5
 b56:	34 ff       	sbrs	r19, 4
 b58:	0d c0       	rjmp	.+26     	; 0xb74 <__stack+0x275>
 b5a:	fe 01       	movw	r30, r28
 b5c:	ea 0d       	add	r30, r10
 b5e:	f1 1d       	adc	r31, r1
 b60:	80 81       	ld	r24, Z
 b62:	80 33       	cpi	r24, 0x30	; 48
 b64:	11 f4       	brne	.+4      	; 0xb6a <__stack+0x26b>
 b66:	39 7e       	andi	r19, 0xE9	; 233
 b68:	09 c0       	rjmp	.+18     	; 0xb7c <__stack+0x27d>
 b6a:	32 ff       	sbrs	r19, 2
 b6c:	06 c0       	rjmp	.+12     	; 0xb7a <__stack+0x27b>
 b6e:	b3 94       	inc	r11
 b70:	b3 94       	inc	r11
 b72:	04 c0       	rjmp	.+8      	; 0xb7c <__stack+0x27d>
 b74:	83 2f       	mov	r24, r19
 b76:	86 78       	andi	r24, 0x86	; 134
 b78:	09 f0       	breq	.+2      	; 0xb7c <__stack+0x27d>
 b7a:	b3 94       	inc	r11
 b7c:	33 fd       	sbrc	r19, 3
 b7e:	13 c0       	rjmp	.+38     	; 0xba6 <__stack+0x2a7>
 b80:	30 ff       	sbrs	r19, 0
 b82:	06 c0       	rjmp	.+12     	; 0xb90 <__stack+0x291>
 b84:	5a 2c       	mov	r5, r10
 b86:	b3 14       	cp	r11, r3
 b88:	18 f4       	brcc	.+6      	; 0xb90 <__stack+0x291>
 b8a:	53 0c       	add	r5, r3
 b8c:	5b 18       	sub	r5, r11
 b8e:	b3 2c       	mov	r11, r3
 b90:	b3 14       	cp	r11, r3
 b92:	68 f4       	brcc	.+26     	; 0xbae <__stack+0x2af>
 b94:	b7 01       	movw	r22, r14
 b96:	80 e2       	ldi	r24, 0x20	; 32
 b98:	90 e0       	ldi	r25, 0x00	; 0
 b9a:	3c 87       	std	Y+12, r19	; 0x0c
 b9c:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 ba0:	b3 94       	inc	r11
 ba2:	3c 85       	ldd	r19, Y+12	; 0x0c
 ba4:	f5 cf       	rjmp	.-22     	; 0xb90 <__stack+0x291>
 ba6:	b3 14       	cp	r11, r3
 ba8:	10 f4       	brcc	.+4      	; 0xbae <__stack+0x2af>
 baa:	3b 18       	sub	r3, r11
 bac:	01 c0       	rjmp	.+2      	; 0xbb0 <__stack+0x2b1>
 bae:	31 2c       	mov	r3, r1
 bb0:	34 ff       	sbrs	r19, 4
 bb2:	12 c0       	rjmp	.+36     	; 0xbd8 <__stack+0x2d9>
 bb4:	b7 01       	movw	r22, r14
 bb6:	80 e3       	ldi	r24, 0x30	; 48
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	3c 87       	std	Y+12, r19	; 0x0c
 bbc:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bc0:	3c 85       	ldd	r19, Y+12	; 0x0c
 bc2:	32 ff       	sbrs	r19, 2
 bc4:	17 c0       	rjmp	.+46     	; 0xbf4 <__stack+0x2f5>
 bc6:	31 fd       	sbrc	r19, 1
 bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <__stack+0x2d1>
 bca:	88 e7       	ldi	r24, 0x78	; 120
 bcc:	90 e0       	ldi	r25, 0x00	; 0
 bce:	02 c0       	rjmp	.+4      	; 0xbd4 <__stack+0x2d5>
 bd0:	88 e5       	ldi	r24, 0x58	; 88
 bd2:	90 e0       	ldi	r25, 0x00	; 0
 bd4:	b7 01       	movw	r22, r14
 bd6:	0c c0       	rjmp	.+24     	; 0xbf0 <__stack+0x2f1>
 bd8:	83 2f       	mov	r24, r19
 bda:	86 78       	andi	r24, 0x86	; 134
 bdc:	59 f0       	breq	.+22     	; 0xbf4 <__stack+0x2f5>
 bde:	31 ff       	sbrs	r19, 1
 be0:	02 c0       	rjmp	.+4      	; 0xbe6 <__stack+0x2e7>
 be2:	8b e2       	ldi	r24, 0x2B	; 43
 be4:	01 c0       	rjmp	.+2      	; 0xbe8 <__stack+0x2e9>
 be6:	80 e2       	ldi	r24, 0x20	; 32
 be8:	37 fd       	sbrc	r19, 7
 bea:	8d e2       	ldi	r24, 0x2D	; 45
 bec:	b7 01       	movw	r22, r14
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 bf4:	a5 14       	cp	r10, r5
 bf6:	38 f4       	brcc	.+14     	; 0xc06 <__stack+0x307>
 bf8:	b7 01       	movw	r22, r14
 bfa:	80 e3       	ldi	r24, 0x30	; 48
 bfc:	90 e0       	ldi	r25, 0x00	; 0
 bfe:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 c02:	5a 94       	dec	r5
 c04:	f7 cf       	rjmp	.-18     	; 0xbf4 <__stack+0x2f5>
 c06:	aa 94       	dec	r10
 c08:	f4 01       	movw	r30, r8
 c0a:	ea 0d       	add	r30, r10
 c0c:	f1 1d       	adc	r31, r1
 c0e:	80 81       	ld	r24, Z
 c10:	b7 01       	movw	r22, r14
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 c18:	a1 10       	cpse	r10, r1
 c1a:	f5 cf       	rjmp	.-22     	; 0xc06 <__stack+0x307>
 c1c:	33 20       	and	r3, r3
 c1e:	09 f4       	brne	.+2      	; 0xc22 <__stack+0x323>
 c20:	51 ce       	rjmp	.-862    	; 0x8c4 <vfprintf+0x24>
 c22:	b7 01       	movw	r22, r14
 c24:	80 e2       	ldi	r24, 0x20	; 32
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 94 38 06 	call	0xc70	; 0xc70 <fputc>
 c2c:	3a 94       	dec	r3
 c2e:	f6 cf       	rjmp	.-20     	; 0xc1c <__stack+0x31d>
 c30:	f7 01       	movw	r30, r14
 c32:	86 81       	ldd	r24, Z+6	; 0x06
 c34:	97 81       	ldd	r25, Z+7	; 0x07
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <__stack+0x33d>
 c38:	8f ef       	ldi	r24, 0xFF	; 255
 c3a:	9f ef       	ldi	r25, 0xFF	; 255
 c3c:	2c 96       	adiw	r28, 0x0c	; 12
 c3e:	e2 e1       	ldi	r30, 0x12	; 18
 c40:	0c 94 ea 06 	jmp	0xdd4	; 0xdd4 <__epilogue_restores__>

00000c44 <strnlen_P>:
 c44:	fc 01       	movw	r30, r24
 c46:	05 90       	lpm	r0, Z+
 c48:	61 50       	subi	r22, 0x01	; 1
 c4a:	70 40       	sbci	r23, 0x00	; 0
 c4c:	01 10       	cpse	r0, r1
 c4e:	d8 f7       	brcc	.-10     	; 0xc46 <strnlen_P+0x2>
 c50:	80 95       	com	r24
 c52:	90 95       	com	r25
 c54:	8e 0f       	add	r24, r30
 c56:	9f 1f       	adc	r25, r31
 c58:	08 95       	ret

00000c5a <strnlen>:
 c5a:	fc 01       	movw	r30, r24
 c5c:	61 50       	subi	r22, 0x01	; 1
 c5e:	70 40       	sbci	r23, 0x00	; 0
 c60:	01 90       	ld	r0, Z+
 c62:	01 10       	cpse	r0, r1
 c64:	d8 f7       	brcc	.-10     	; 0xc5c <strnlen+0x2>
 c66:	80 95       	com	r24
 c68:	90 95       	com	r25
 c6a:	8e 0f       	add	r24, r30
 c6c:	9f 1f       	adc	r25, r31
 c6e:	08 95       	ret

00000c70 <fputc>:
 c70:	0f 93       	push	r16
 c72:	1f 93       	push	r17
 c74:	cf 93       	push	r28
 c76:	df 93       	push	r29
 c78:	fb 01       	movw	r30, r22
 c7a:	23 81       	ldd	r18, Z+3	; 0x03
 c7c:	21 fd       	sbrc	r18, 1
 c7e:	03 c0       	rjmp	.+6      	; 0xc86 <fputc+0x16>
 c80:	8f ef       	ldi	r24, 0xFF	; 255
 c82:	9f ef       	ldi	r25, 0xFF	; 255
 c84:	28 c0       	rjmp	.+80     	; 0xcd6 <fputc+0x66>
 c86:	22 ff       	sbrs	r18, 2
 c88:	16 c0       	rjmp	.+44     	; 0xcb6 <fputc+0x46>
 c8a:	46 81       	ldd	r20, Z+6	; 0x06
 c8c:	57 81       	ldd	r21, Z+7	; 0x07
 c8e:	24 81       	ldd	r18, Z+4	; 0x04
 c90:	35 81       	ldd	r19, Z+5	; 0x05
 c92:	42 17       	cp	r20, r18
 c94:	53 07       	cpc	r21, r19
 c96:	44 f4       	brge	.+16     	; 0xca8 <fputc+0x38>
 c98:	a0 81       	ld	r26, Z
 c9a:	b1 81       	ldd	r27, Z+1	; 0x01
 c9c:	9d 01       	movw	r18, r26
 c9e:	2f 5f       	subi	r18, 0xFF	; 255
 ca0:	3f 4f       	sbci	r19, 0xFF	; 255
 ca2:	31 83       	std	Z+1, r19	; 0x01
 ca4:	20 83       	st	Z, r18
 ca6:	8c 93       	st	X, r24
 ca8:	26 81       	ldd	r18, Z+6	; 0x06
 caa:	37 81       	ldd	r19, Z+7	; 0x07
 cac:	2f 5f       	subi	r18, 0xFF	; 255
 cae:	3f 4f       	sbci	r19, 0xFF	; 255
 cb0:	37 83       	std	Z+7, r19	; 0x07
 cb2:	26 83       	std	Z+6, r18	; 0x06
 cb4:	10 c0       	rjmp	.+32     	; 0xcd6 <fputc+0x66>
 cb6:	eb 01       	movw	r28, r22
 cb8:	09 2f       	mov	r16, r25
 cba:	18 2f       	mov	r17, r24
 cbc:	00 84       	ldd	r0, Z+8	; 0x08
 cbe:	f1 85       	ldd	r31, Z+9	; 0x09
 cc0:	e0 2d       	mov	r30, r0
 cc2:	09 95       	icall
 cc4:	89 2b       	or	r24, r25
 cc6:	e1 f6       	brne	.-72     	; 0xc80 <fputc+0x10>
 cc8:	8e 81       	ldd	r24, Y+6	; 0x06
 cca:	9f 81       	ldd	r25, Y+7	; 0x07
 ccc:	01 96       	adiw	r24, 0x01	; 1
 cce:	9f 83       	std	Y+7, r25	; 0x07
 cd0:	8e 83       	std	Y+6, r24	; 0x06
 cd2:	81 2f       	mov	r24, r17
 cd4:	90 2f       	mov	r25, r16
 cd6:	df 91       	pop	r29
 cd8:	cf 91       	pop	r28
 cda:	1f 91       	pop	r17
 cdc:	0f 91       	pop	r16
 cde:	08 95       	ret

00000ce0 <__ultoa_invert>:
 ce0:	fa 01       	movw	r30, r20
 ce2:	aa 27       	eor	r26, r26
 ce4:	28 30       	cpi	r18, 0x08	; 8
 ce6:	51 f1       	breq	.+84     	; 0xd3c <__ultoa_invert+0x5c>
 ce8:	20 31       	cpi	r18, 0x10	; 16
 cea:	81 f1       	breq	.+96     	; 0xd4c <__ultoa_invert+0x6c>
 cec:	e8 94       	clt
 cee:	6f 93       	push	r22
 cf0:	6e 7f       	andi	r22, 0xFE	; 254
 cf2:	6e 5f       	subi	r22, 0xFE	; 254
 cf4:	7f 4f       	sbci	r23, 0xFF	; 255
 cf6:	8f 4f       	sbci	r24, 0xFF	; 255
 cf8:	9f 4f       	sbci	r25, 0xFF	; 255
 cfa:	af 4f       	sbci	r26, 0xFF	; 255
 cfc:	b1 e0       	ldi	r27, 0x01	; 1
 cfe:	3e d0       	rcall	.+124    	; 0xd7c <__ultoa_invert+0x9c>
 d00:	b4 e0       	ldi	r27, 0x04	; 4
 d02:	3c d0       	rcall	.+120    	; 0xd7c <__ultoa_invert+0x9c>
 d04:	67 0f       	add	r22, r23
 d06:	78 1f       	adc	r23, r24
 d08:	89 1f       	adc	r24, r25
 d0a:	9a 1f       	adc	r25, r26
 d0c:	a1 1d       	adc	r26, r1
 d0e:	68 0f       	add	r22, r24
 d10:	79 1f       	adc	r23, r25
 d12:	8a 1f       	adc	r24, r26
 d14:	91 1d       	adc	r25, r1
 d16:	a1 1d       	adc	r26, r1
 d18:	6a 0f       	add	r22, r26
 d1a:	71 1d       	adc	r23, r1
 d1c:	81 1d       	adc	r24, r1
 d1e:	91 1d       	adc	r25, r1
 d20:	a1 1d       	adc	r26, r1
 d22:	20 d0       	rcall	.+64     	; 0xd64 <__ultoa_invert+0x84>
 d24:	09 f4       	brne	.+2      	; 0xd28 <__ultoa_invert+0x48>
 d26:	68 94       	set
 d28:	3f 91       	pop	r19
 d2a:	2a e0       	ldi	r18, 0x0A	; 10
 d2c:	26 9f       	mul	r18, r22
 d2e:	11 24       	eor	r1, r1
 d30:	30 19       	sub	r19, r0
 d32:	30 5d       	subi	r19, 0xD0	; 208
 d34:	31 93       	st	Z+, r19
 d36:	de f6       	brtc	.-74     	; 0xcee <__ultoa_invert+0xe>
 d38:	cf 01       	movw	r24, r30
 d3a:	08 95       	ret
 d3c:	46 2f       	mov	r20, r22
 d3e:	47 70       	andi	r20, 0x07	; 7
 d40:	40 5d       	subi	r20, 0xD0	; 208
 d42:	41 93       	st	Z+, r20
 d44:	b3 e0       	ldi	r27, 0x03	; 3
 d46:	0f d0       	rcall	.+30     	; 0xd66 <__ultoa_invert+0x86>
 d48:	c9 f7       	brne	.-14     	; 0xd3c <__ultoa_invert+0x5c>
 d4a:	f6 cf       	rjmp	.-20     	; 0xd38 <__ultoa_invert+0x58>
 d4c:	46 2f       	mov	r20, r22
 d4e:	4f 70       	andi	r20, 0x0F	; 15
 d50:	40 5d       	subi	r20, 0xD0	; 208
 d52:	4a 33       	cpi	r20, 0x3A	; 58
 d54:	18 f0       	brcs	.+6      	; 0xd5c <__ultoa_invert+0x7c>
 d56:	49 5d       	subi	r20, 0xD9	; 217
 d58:	31 fd       	sbrc	r19, 1
 d5a:	40 52       	subi	r20, 0x20	; 32
 d5c:	41 93       	st	Z+, r20
 d5e:	02 d0       	rcall	.+4      	; 0xd64 <__ultoa_invert+0x84>
 d60:	a9 f7       	brne	.-22     	; 0xd4c <__ultoa_invert+0x6c>
 d62:	ea cf       	rjmp	.-44     	; 0xd38 <__ultoa_invert+0x58>
 d64:	b4 e0       	ldi	r27, 0x04	; 4
 d66:	a6 95       	lsr	r26
 d68:	97 95       	ror	r25
 d6a:	87 95       	ror	r24
 d6c:	77 95       	ror	r23
 d6e:	67 95       	ror	r22
 d70:	ba 95       	dec	r27
 d72:	c9 f7       	brne	.-14     	; 0xd66 <__ultoa_invert+0x86>
 d74:	00 97       	sbiw	r24, 0x00	; 0
 d76:	61 05       	cpc	r22, r1
 d78:	71 05       	cpc	r23, r1
 d7a:	08 95       	ret
 d7c:	9b 01       	movw	r18, r22
 d7e:	ac 01       	movw	r20, r24
 d80:	0a 2e       	mov	r0, r26
 d82:	06 94       	lsr	r0
 d84:	57 95       	ror	r21
 d86:	47 95       	ror	r20
 d88:	37 95       	ror	r19
 d8a:	27 95       	ror	r18
 d8c:	ba 95       	dec	r27
 d8e:	c9 f7       	brne	.-14     	; 0xd82 <__ultoa_invert+0xa2>
 d90:	62 0f       	add	r22, r18
 d92:	73 1f       	adc	r23, r19
 d94:	84 1f       	adc	r24, r20
 d96:	95 1f       	adc	r25, r21
 d98:	a0 1d       	adc	r26, r0
 d9a:	08 95       	ret

00000d9c <__prologue_saves__>:
 d9c:	2f 92       	push	r2
 d9e:	3f 92       	push	r3
 da0:	4f 92       	push	r4
 da2:	5f 92       	push	r5
 da4:	6f 92       	push	r6
 da6:	7f 92       	push	r7
 da8:	8f 92       	push	r8
 daa:	9f 92       	push	r9
 dac:	af 92       	push	r10
 dae:	bf 92       	push	r11
 db0:	cf 92       	push	r12
 db2:	df 92       	push	r13
 db4:	ef 92       	push	r14
 db6:	ff 92       	push	r15
 db8:	0f 93       	push	r16
 dba:	1f 93       	push	r17
 dbc:	cf 93       	push	r28
 dbe:	df 93       	push	r29
 dc0:	cd b7       	in	r28, 0x3d	; 61
 dc2:	de b7       	in	r29, 0x3e	; 62
 dc4:	ca 1b       	sub	r28, r26
 dc6:	db 0b       	sbc	r29, r27
 dc8:	0f b6       	in	r0, 0x3f	; 63
 dca:	f8 94       	cli
 dcc:	de bf       	out	0x3e, r29	; 62
 dce:	0f be       	out	0x3f, r0	; 63
 dd0:	cd bf       	out	0x3d, r28	; 61
 dd2:	09 94       	ijmp

00000dd4 <__epilogue_restores__>:
 dd4:	2a 88       	ldd	r2, Y+18	; 0x12
 dd6:	39 88       	ldd	r3, Y+17	; 0x11
 dd8:	48 88       	ldd	r4, Y+16	; 0x10
 dda:	5f 84       	ldd	r5, Y+15	; 0x0f
 ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
 dde:	7d 84       	ldd	r7, Y+13	; 0x0d
 de0:	8c 84       	ldd	r8, Y+12	; 0x0c
 de2:	9b 84       	ldd	r9, Y+11	; 0x0b
 de4:	aa 84       	ldd	r10, Y+10	; 0x0a
 de6:	b9 84       	ldd	r11, Y+9	; 0x09
 de8:	c8 84       	ldd	r12, Y+8	; 0x08
 dea:	df 80       	ldd	r13, Y+7	; 0x07
 dec:	ee 80       	ldd	r14, Y+6	; 0x06
 dee:	fd 80       	ldd	r15, Y+5	; 0x05
 df0:	0c 81       	ldd	r16, Y+4	; 0x04
 df2:	1b 81       	ldd	r17, Y+3	; 0x03
 df4:	aa 81       	ldd	r26, Y+2	; 0x02
 df6:	b9 81       	ldd	r27, Y+1	; 0x01
 df8:	ce 0f       	add	r28, r30
 dfa:	d1 1d       	adc	r29, r1
 dfc:	0f b6       	in	r0, 0x3f	; 63
 dfe:	f8 94       	cli
 e00:	de bf       	out	0x3e, r29	; 62
 e02:	0f be       	out	0x3f, r0	; 63
 e04:	cd bf       	out	0x3d, r28	; 61
 e06:	ed 01       	movw	r28, r26
 e08:	08 95       	ret

00000e0a <_exit>:
 e0a:	f8 94       	cli

00000e0c <__stop_program>:
 e0c:	ff cf       	rjmp	.-2      	; 0xe0c <__stop_program>
