
UWAC_Arduino.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  0000017a  0000020e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800124  00800124  00000232  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000232  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000264  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003f6  00000000  00000000  000002ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002b3  00000000  00000000  000006e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000020a  00000000  00000000  00000995  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00000ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000021f  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000072  00000000  00000000  00000e1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00000e91  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e7       	ldi	r30, 0x7A	; 122
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 32       	cpi	r26, 0x24	; 36
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e2       	ldi	r26, 0x24	; 36
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 32       	cpi	r26, 0x2A	; 42
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

FILE usart0_str = FDEV_SETUP_STREAM(USART0SendByte, NULL, _FDEV_SETUP_WRITE);

int main(void)
{
	USART0Init();
  a6:	0e 94 69 00 	call	0xd2	; 0xd2 <USART0Init>
	stdout =& usart0_str;
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	90 93 27 01 	sts	0x0127, r25
  b2:	80 93 26 01 	sts	0x0126, r24

    while (1) 
    {
		printf("Send debug data to PC\n");
  b6:	8e e0       	ldi	r24, 0x0E	; 14
  b8:	91 e0       	ldi	r25, 0x01	; 1
  ba:	0e 94 8b 00 	call	0x116	; 0x116 <puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	83 ed       	ldi	r24, 0xD3	; 211
  c2:	90 e3       	ldi	r25, 0x30	; 48
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x1e>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x28>
  ce:	00 00       	nop
  d0:	f2 cf       	rjmp	.-28     	; 0xb6 <main+0x10>

000000d2 <USART0Init>:
#include "USART.h"

void USART0Init()
{
	// Set baud rate
	UBRR0H = (uint8_t)(UBRR_VALUE >> 8);
  d2:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (uint8_t)UBRR_VALUE;
  d6:	87 e6       	ldi	r24, 0x67	; 103
  d8:	80 93 c4 00 	sts	0x00C4, r24
	// Set frame format to 8 data bits, no parity, 1 stop bit
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
  dc:	e2 ec       	ldi	r30, 0xC2	; 194
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	86 60       	ori	r24, 0x06	; 6
  e4:	80 83       	st	Z, r24
	// Enable transmission
	UCSR0B |= (1 << TXEN0);
  e6:	e1 ec       	ldi	r30, 0xC1	; 193
  e8:	f0 e0       	ldi	r31, 0x00	; 0
  ea:	80 81       	ld	r24, Z
  ec:	88 60       	ori	r24, 0x08	; 8
  ee:	80 83       	st	Z, r24
  f0:	08 95       	ret

000000f2 <USART0SendByte>:
}

int USART0SendByte(char u8Data, FILE *stream)
{
  f2:	cf 93       	push	r28
  f4:	c8 2f       	mov	r28, r24
	if (u8Data == '\n') USART0SendByte('\r', stream);
  f6:	8a 30       	cpi	r24, 0x0A	; 10
  f8:	19 f4       	brne	.+6      	; 0x100 <USART0SendByte+0xe>
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	0e 94 79 00 	call	0xf2	; 0xf2 <USART0SendByte>

	// Wait while previous byte is completed
	while (!(UCSR0A & (1 << UDRE0)));
 100:	e0 ec       	ldi	r30, 0xC0	; 192
 102:	f0 e0       	ldi	r31, 0x00	; 0
 104:	90 81       	ld	r25, Z
 106:	95 ff       	sbrs	r25, 5
 108:	fd cf       	rjmp	.-6      	; 0x104 <USART0SendByte+0x12>

	// Transmit data
	UDR0 = u8Data;
 10a:	c0 93 c6 00 	sts	0x00C6, r28
	return 0;
 10e:	80 e0       	ldi	r24, 0x00	; 0
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	cf 91       	pop	r28
 114:	08 95       	ret

00000116 <puts>:
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	e0 91 26 01 	lds	r30, 0x0126
 122:	f0 91 27 01 	lds	r31, 0x0127
 126:	23 81       	ldd	r18, Z+3	; 0x03
 128:	21 ff       	sbrs	r18, 1
 12a:	1b c0       	rjmp	.+54     	; 0x162 <puts+0x4c>
 12c:	8c 01       	movw	r16, r24
 12e:	d0 e0       	ldi	r29, 0x00	; 0
 130:	c0 e0       	ldi	r28, 0x00	; 0
 132:	f8 01       	movw	r30, r16
 134:	81 91       	ld	r24, Z+
 136:	8f 01       	movw	r16, r30
 138:	60 91 26 01 	lds	r22, 0x0126
 13c:	70 91 27 01 	lds	r23, 0x0127
 140:	db 01       	movw	r26, r22
 142:	18 96       	adiw	r26, 0x08	; 8
 144:	ed 91       	ld	r30, X+
 146:	fc 91       	ld	r31, X
 148:	19 97       	sbiw	r26, 0x09	; 9
 14a:	88 23       	and	r24, r24
 14c:	31 f0       	breq	.+12     	; 0x15a <puts+0x44>
 14e:	09 95       	icall
 150:	89 2b       	or	r24, r25
 152:	79 f3       	breq	.-34     	; 0x132 <puts+0x1c>
 154:	df ef       	ldi	r29, 0xFF	; 255
 156:	cf ef       	ldi	r28, 0xFF	; 255
 158:	ec cf       	rjmp	.-40     	; 0x132 <puts+0x1c>
 15a:	8a e0       	ldi	r24, 0x0A	; 10
 15c:	09 95       	icall
 15e:	89 2b       	or	r24, r25
 160:	19 f0       	breq	.+6      	; 0x168 <puts+0x52>
 162:	8f ef       	ldi	r24, 0xFF	; 255
 164:	9f ef       	ldi	r25, 0xFF	; 255
 166:	02 c0       	rjmp	.+4      	; 0x16c <puts+0x56>
 168:	8d 2f       	mov	r24, r29
 16a:	9c 2f       	mov	r25, r28
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	1f 91       	pop	r17
 172:	0f 91       	pop	r16
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
